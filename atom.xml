<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>达叔小生</title>
  
  <subtitle>爱好分享的码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangguangda.github.io/"/>
  <updated>2019-02-06T15:06:46.291Z</updated>
  <id>https://huangguangda.github.io/</id>
  
  <author>
    <name>达叔小生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java工程师必备</title>
    <link href="https://huangguangda.github.io/2019/02/03/1/"/>
    <id>https://huangguangda.github.io/2019/02/03/1/</id>
    <published>2019-02-03T11:44:56.000Z</published>
    <updated>2019-02-06T15:06:46.291Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-b917eba9d5af909b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><blockquote><p>Java工程师必备</p></blockquote><a id="more"></a><ol><li>JAVA基础扎实，熟悉JVM，熟悉网络、多线程、分布式编程及性能调优</li><li>精通Java EE相关技术</li><li>熟练运用Spring/SpringBoot/MyBatis等基础框架</li><li>熟悉分布式系统相关技术</li><li>熟悉MySQL及SQL优化</li><li>高并发、高可用、微服务、容器化等开发经验</li><li>熟悉JVM原理，精通io、多线程，精通分布式、缓存、消息等机制</li><li>熟练使用和配置Tomcat应用服务器</li><li>掌握Eclispse,Maven,SVN,GIT等软件开发工具的环境搭建和使用</li><li>熟悉H5、CSS、JS等前端技术，熟悉BootStrap、Jquery等常用框架的一种</li><li>掌握SQL，至少熟悉MariaDB(MySQL)/Oracle数据库中的一种</li><li>客户端与服务端数据接口封装，独立调试各类数据接口，如支付接口，短信接口，等各类第三方数据接口对接</li><li>熟悉分布式缓存、消息中间件、RPC框架、负载均衡、安全防御等技术</li><li>有大数据处理经验，包括hadoop/storm/spark/hbase/ELK等</li><li>对RPC或GRPC有一定的工作经验</li><li>熟悉Linux环境以及操作</li><li>熟练掌握Java开发语言或Python，有服务端开发经验，熟悉多线程、高并发等常用开发技术</li><li>熟悉JS、Jquery，掌握HTTP/HTTPS协议，有Web前台开发经验优先</li><li>有云计算及大数据领域开发经验优先</li></ol><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>好了，欢迎在留言区留言，与大家分享你的经验和心得。</p><p>感谢你学习今天的内容，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友，感谢。</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-b917eba9d5af909b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java工程师必备&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第83节：Java中的学生管理系统分页功能</title>
    <link href="https://huangguangda.github.io/2019/02/02/1/"/>
    <id>https://huangguangda.github.io/2019/02/02/1/</id>
    <published>2019-02-01T16:17:21.000Z</published>
    <updated>2019-02-05T16:21:26.941Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-3f72290b57669942.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><blockquote><p>第83节:Java中的学生管理系统分页功能</p></blockquote><a id="more"></a><p>分页功能一般可以做成两种，一种是物理分页，另一种是逻辑分页。这两种功能是有各自的特点的，物理分页是查询的时候，对数据库进行访问，只是查一页数据就进行返回，其特点是对内存中数据量存储不大，只是缺点就是要对数据库不断的进行访问；而对逻辑分页来说，就有所不同，它是一下子就把所有的数据全部查询出来，然后放入到内存中，访问速度快，缺点就是对内存空间不足，数据量过大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu limit 5;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-64c2469aeae3f623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// offset 偏移前面的多少条，offset 1 跳过前面的一条</span><br><span class="line">select * from stu limit 5 offset 5;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-3e162ff3b074f227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu LIMIT 5 , 5;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b9376d6f0dcf42ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu LIMIT 5 , 2;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu LIMIT 2 , 5;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-0c5cae205b53236a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><blockquote><p>写分页的dao模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// index.jsp</span><br><span class="line">&lt;h3&gt;&lt;a href=&quot;StudentListPageServlet?currentPage=1&quot;&gt;分页显示所有学生&lt;/a&gt;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// StudentListPageServlet</span><br><span class="line">//1. 获取需要显示的页码数</span><br><span class="line">int currentPage =Integer.parseInt( request.getParameter(&quot;currentPage&quot;));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// StudentDao</span><br><span class="line">// 接口中定义的成员都是常量</span><br><span class="line">// 一页显示多少条记录</span><br><span class="line">int PAGE_SIZE = 5;</span><br><span class="line">// 分页dao,查询当页的学生数据</span><br><span class="line">List&lt;Student&gt; findStudentByPage(int currentPage) throws SQLException;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-890560404dbaa0f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// StudentDaoImpl</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findStudentByPage(int currentPage) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">// 第一个问号，一页返回多少条记录，第二个问号，跳过前面的多少条记录</span><br><span class="line">//5 0 --- 第一页 (1-1)*5</span><br><span class="line">//5 5  --- 第二页 (2-1)*5</span><br><span class="line">//5 10  --- 第三页</span><br><span class="line">return runner.query(&quot;select * from stu limit ? offset ?&quot;, new BeanListHandler&lt;Student&gt;(Student.class),PAGE_SIZE , (currentPage-1)*PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务逻辑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from stu;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-0f55c2f1e5602f81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><blockquote><p>业务逻辑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这是用于分页显示学生列表的servlet</span><br><span class="line"> */</span><br><span class="line">public class StudentListPageServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//1. 获取需要显示的页码数</span><br><span class="line">int currentPage =Integer.parseInt( request.getParameter(&quot;currentPage&quot;));</span><br><span class="line"></span><br><span class="line">//2. 根据指定的页数，去获取该页的数据回来</span><br><span class="line">//List&lt;Student&gt; --- list.jsp</span><br><span class="line"></span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">PageBean pageBean= service.findStudentByPage(currentPage);</span><br><span class="line">request.setAttribute(&quot;pageBean&quot;, pageBean);</span><br><span class="line">//3. 跳转界面。</span><br><span class="line">request.getRequestDispatcher(&quot;list_page.jsp&quot;).forward(request, response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>去业务逻辑去找</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生的业务处理规范</span><br><span class="line"> * */</span><br><span class="line">public interface StudentService &#123;</span><br><span class="line">// 分页dao,查询当页的学生数据</span><br><span class="line">// 分页的很多小逻辑业务 可以做到service里面</span><br><span class="line">// 业务做到service里面，做的就是bean了，当前页，总页数，显示条数， 总记录数</span><br><span class="line">// 返回的是一个bean了</span><br><span class="line">// 返回的是PageBean里面的所有数据了</span><br><span class="line">PageBean findStudentByPage(int currentPage) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据姓名或性别，查询</span><br><span class="line">List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.delete(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findStudentById(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.update(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.searchStudent(sname, sgender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PageBean findStudentByPage(int currentPage) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// 封装分页的该页的数据</span><br><span class="line">PageBean&lt;Student&gt; pageBean = new PageBean&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">int pageSize = StudentDao.PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">// 设置当前页</span><br><span class="line">pageBean.setCurrentPage(currentPage);</span><br><span class="line">// 每条记录</span><br><span class="line">pageBean.setPageSize(pageSize);</span><br><span class="line"></span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">List&lt;Student&gt; list = dao.findStudentByPage(currentPage);</span><br><span class="line">pageBean.setList(list);</span><br><span class="line">// 总记录数，总页数</span><br><span class="line">int count = dao.findCount();</span><br><span class="line">pageBean.setTotalSize(count);</span><br><span class="line"></span><br><span class="line">// 总页数</span><br><span class="line">pageBean.setTotalPage(count % pageSize == 0 ? count / pageSize : (count / pageSize) + 1);</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 封装的数据</span><br><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">// 一个用于封装了分页的数据</span><br><span class="line">// 有： 当前学生集合数据，总的记录数，总的页数，当前页，每页的显示记录数</span><br><span class="line">public class PageBean&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">private int currentPage; // 当前页</span><br><span class="line">private int totalPage;// 总页数</span><br><span class="line">private int pageSize;// 每页的记录数，每页要显示多少记录</span><br><span class="line">private int totalSize; // 总的记录数</span><br><span class="line">private List&lt;T&gt; list; // 当前页的学生集合</span><br><span class="line"></span><br><span class="line">public int getCurrentPage() &#123;</span><br><span class="line">return currentPage;</span><br><span class="line">&#125;</span><br><span class="line">public void setCurrentPage(int currentPage) &#123;</span><br><span class="line">this.currentPage = currentPage;</span><br><span class="line">&#125;</span><br><span class="line">public int getTotalPage() &#123;</span><br><span class="line">return totalPage;</span><br><span class="line">&#125;</span><br><span class="line">public void setTotalPage(int totalPage) &#123;</span><br><span class="line">this.totalPage = totalPage;</span><br><span class="line">&#125;</span><br><span class="line">public int getPageSize() &#123;</span><br><span class="line">return pageSize;</span><br><span class="line">&#125;</span><br><span class="line">public void setPageSize(int pageSize) &#123;</span><br><span class="line">this.pageSize = pageSize;</span><br><span class="line">&#125;</span><br><span class="line">public int getTotalSize() &#123;</span><br><span class="line">return totalSize;</span><br><span class="line">&#125;</span><br><span class="line">public void setTotalSize(int totalSize) &#123;</span><br><span class="line">this.totalSize = totalSize;</span><br><span class="line">&#125;</span><br><span class="line">public List&lt;T&gt; getList() &#123;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line">public void setList(List&lt;T&gt; list) &#123;</span><br><span class="line">this.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f9bcb7cfdae96cd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><blockquote><p>最后就靠显示页面逻辑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;%@ taglib prefix=&quot;c&quot;  uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;学生列表页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function doDelete(sid) &#123;</span><br><span class="line">/* 如果这里弹出的对话框，用户点击的是确定，就马上去请求Servlet。 </span><br><span class="line">如何知道用户点击的是确定。</span><br><span class="line">如何在js的方法中请求servlet。 */</span><br><span class="line">var flag = confirm(&quot;是否确定删除?&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//表明点了确定。 访问servlet。 在当前标签页上打开 超链接，</span><br><span class="line">//window.location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;SearchStudentServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr &gt;</span><br><span class="line">&lt;td colspan=&quot;8&quot;&gt;</span><br><span class="line"></span><br><span class="line">按姓名查询:&lt;input type=&quot;text&quot; name=&quot;sname&quot;/&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">按性别查询:&lt;select name=&quot;sgender&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;--请选择--</span><br><span class="line">&lt;option value=&quot;男&quot;&gt;男</span><br><span class="line">&lt;option value=&quot;女&quot;&gt;女</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;add.jsp&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;c:forEach items=&quot;$&#123;pageBean.list &#125;&quot; var=&quot;stu&quot;&gt;</span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sid &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sname &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.gender &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.phone &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.birthday &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.hobby &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.info &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;EditServlet?sid=$&#123;stu.sid &#125;&quot;&gt;更新&lt;/a&gt;   &lt;a href=&quot;#&quot; onclick=&quot;doDelete($&#123;stu.sid&#125;)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  &lt;td colspan=&quot;8&quot;&gt;</span><br><span class="line">  第 $&#123;pageBean.currentPage &#125; / $&#123;pageBean.totalPage &#125;</span><br><span class="line">  &amp;nbsp;&amp;nbsp;</span><br><span class="line">  每页显示$&#123;pageBean.pageSize &#125;条  &amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">  总的记录数$&#123;pageBean.totalSize &#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">  </span><br><span class="line">  &lt;c:if test=&quot;$&#123;pageBean.currentPage !=1 &#125;&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;StudentListPageServlet?currentPage=1&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">| &lt;a href=&quot;StudentListPageServlet?currentPage=$&#123;pageBean.currentPage-1 &#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;c:forEach begin=&quot;1&quot; end=&quot;$&#123;pageBean.totalPage &#125;&quot; var=&quot;i&quot;&gt;</span><br><span class="line">  &lt;c:if test=&quot;$&#123;pageBean.currentPage == i &#125;&quot;&gt;</span><br><span class="line">  $&#123;i &#125;</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">  &lt;c:if test=&quot;$&#123;pageBean.currentPage != i &#125;&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;StudentListPageServlet?currentPage=$&#123;i &#125;&quot;&gt;$&#123;i &#125;&lt;/a&gt;</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/c:forEach&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;c:if test=&quot;$&#123;pageBean.currentPage !=pageBean.totalPage &#125;&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;StudentListPageServlet?currentPage=$&#123;pageBean.currentPage+1 &#125;&quot;&gt;下一页&lt;/a&gt; | </span><br><span class="line">  &lt;a href=&quot;StudentListPageServlet?currentPage=$&#123;pageBean.totalPage &#125;&quot;&gt;尾页&lt;/a&gt;</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f91be865fb8a8f96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p><blockquote><p>我的源码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line">// 接口中定义的成员都是常量</span><br><span class="line">// 一页显示多少条记录</span><br><span class="line">int PAGE_SIZE = 5;</span><br><span class="line">// 分页dao,查询当页的学生数据</span><br><span class="line">List&lt;Student&gt; findStudentByPage(int currentPage) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据姓名或性别，查询</span><br><span class="line">List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 查询总的学生记录数</span><br><span class="line">int findCount() throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line">import com.dashucoding.util.TextUtils;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *这是StudentDao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">return runner.query(&quot;select * from stu&quot;, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;insert into stu values(null, ?,?,?,?,?,?)&quot;, </span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;delete from stu where sid=?&quot;, sid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line"></span><br><span class="line">return runner.query(&quot;select * from stu where sid = ?&quot;, new BeanHandler&lt;Student&gt;(Student.class), sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;update stu set sname=?, gender=?, phone=?, birthday=?, hobby=?, info=? where sid=?&quot;,</span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo(),</span><br><span class="line">student.getSid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 模糊查询</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">/*System.out.println(sname + sgender);*/</span><br><span class="line"></span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * String sql = &quot;select * from stu where sname=? or sgender=?&quot;;</span><br><span class="line"> * select * from stu where sname like ?;</span><br><span class="line"> * select * from stu where gender = ?;</span><br><span class="line"> * select * from stu where sname like ? and gender = ?;</span><br><span class="line"> * 如果两个都没有就查询所有</span><br><span class="line"> * sql = &quot;select * from stu&quot;</span><br><span class="line"> * if(姓名)&#123;</span><br><span class="line"> *  sql = sql + &quot;where sname like ?&quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * if(性别)&#123;</span><br><span class="line"> *  sql = sql + &quot;where gender = ?&quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * </span><br><span class="line"> * String sql = &quot;select * from stu where 1=1&quot;;</span><br><span class="line"> * if(姓名)&#123;</span><br><span class="line"> *  sql = sql + &quot; and sname like ? &quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * if(性别)&#123;</span><br><span class="line"> *  sql = sql + &quot; and gender = ? &quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">String sql = &quot;select * from stu where 1=1&quot;;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">if(!TextUtils.isEmpty(sname)) &#123;</span><br><span class="line">sql = sql + &quot; and sname like ? &quot;;</span><br><span class="line">list.add(&quot;%&quot;+sname+&quot;%&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!TextUtils.isEmpty(sgender)) &#123;</span><br><span class="line">sql = sql + &quot; and gender = ? &quot;;</span><br><span class="line">list.add(sgender);</span><br><span class="line">&#125;</span><br><span class="line">/*list.toArray()*/</span><br><span class="line"></span><br><span class="line">return runner.query(sql, new BeanListHandler&lt;Student&gt;(Student.class),list.toArray());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findStudentByPage(int currentPage) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">// 第一个问号，一页返回多少条记录，第二个问号，跳过前面的多少条记录</span><br><span class="line">//5 0 --- 第一页 (1-1)*5</span><br><span class="line">//5 5  --- 第二页 (2-1)*5</span><br><span class="line">//5 10  --- 第三页</span><br><span class="line">return runner.query(&quot;select * from stu limit ? offset ?&quot;, new BeanListHandler&lt;Student&gt;(Student.class),PAGE_SIZE , (currentPage-1)*PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询总的记录数</span><br><span class="line">@Override</span><br><span class="line">public int findCount() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">// 用于处理平均值，总的个数</span><br><span class="line">Long result = (Long) runner.query(&quot;select count(*) from stu&quot;, new ScalarHandler());</span><br><span class="line">return result.intValue();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">// 一个用于封装了分页的数据</span><br><span class="line">// 有： 当前学生集合数据，总的记录数，总的页数，当前页，每页的显示记录数</span><br><span class="line">public class PageBean&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">private int currentPage; // 当前页</span><br><span class="line">private int totalPage;// 总页数</span><br><span class="line">private int pageSize;// 每页的记录数，每页要显示多少记录</span><br><span class="line">private int totalSize; // 总的记录数</span><br><span class="line">private List&lt;T&gt; list; // 当前页的学生集合</span><br><span class="line"></span><br><span class="line">public int getCurrentPage() &#123;</span><br><span class="line">return currentPage;</span><br><span class="line">&#125;</span><br><span class="line">public void setCurrentPage(int currentPage) &#123;</span><br><span class="line">this.currentPage = currentPage;</span><br><span class="line">&#125;</span><br><span class="line">public int getTotalPage() &#123;</span><br><span class="line">return totalPage;</span><br><span class="line">&#125;</span><br><span class="line">public void setTotalPage(int totalPage) &#123;</span><br><span class="line">this.totalPage = totalPage;</span><br><span class="line">&#125;</span><br><span class="line">public int getPageSize() &#123;</span><br><span class="line">return pageSize;</span><br><span class="line">&#125;</span><br><span class="line">public void setPageSize(int pageSize) &#123;</span><br><span class="line">this.pageSize = pageSize;</span><br><span class="line">&#125;</span><br><span class="line">public int getTotalSize() &#123;</span><br><span class="line">return totalSize;</span><br><span class="line">&#125;</span><br><span class="line">public void setTotalSize(int totalSize) &#123;</span><br><span class="line">this.totalSize = totalSize;</span><br><span class="line">&#125;</span><br><span class="line">public List&lt;T&gt; getList() &#123;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line">public void setList(List&lt;T&gt; list) &#123;</span><br><span class="line">this.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生封装的对象bean</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">private int sid;</span><br><span class="line">private String sname;</span><br><span class="line">private String gender;</span><br><span class="line">private String phone;</span><br><span class="line">private String hobby;</span><br><span class="line">private String info;</span><br><span class="line">private Date birthday;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(int sid, String sname, String gender, String phone, String hobby, String info, Date birthday) &#123;</span><br><span class="line">super();</span><br><span class="line">this.sid = sid;</span><br><span class="line">this.sname = sname;</span><br><span class="line">this.gender = gender;</span><br><span class="line">this.phone = phone;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">this.info = info;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Student(String sname, String gender, String phone, String hobby, String info, Date birthday) &#123;</span><br><span class="line">super();</span><br><span class="line">this.sname = sname;</span><br><span class="line">this.gender = gender;</span><br><span class="line">this.phone = phone;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">this.info = info;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public String getGender() &#123;</span><br><span class="line">return gender;</span><br><span class="line">&#125;</span><br><span class="line">public void setGender(String gender) &#123;</span><br><span class="line">this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">public String getPhone() &#123;</span><br><span class="line">return phone;</span><br><span class="line">&#125;</span><br><span class="line">public void setPhone(String phone) &#123;</span><br><span class="line">this.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line">public String getHobby() &#123;</span><br><span class="line">return hobby;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobby(String hobby) &#123;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line">public String getInfo() &#123;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line">public void setInfo(String info) &#123;</span><br><span class="line">this.info = info;</span><br><span class="line">&#125;</span><br><span class="line">public Date getBirthday() &#123;</span><br><span class="line">return birthday;</span><br><span class="line">&#125;</span><br><span class="line">public void setBirthday(Date birthday) &#123;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;, gender=&quot; + gender + &quot;, phone=&quot; + phone + &quot;, hobby=&quot;</span><br><span class="line">+ hobby + &quot;, info=&quot; + info + &quot;, birthday=&quot; + birthday + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生的业务处理规范</span><br><span class="line"> * */</span><br><span class="line">public interface StudentService &#123;</span><br><span class="line">// 分页dao,查询当页的学生数据</span><br><span class="line">// 分页的很多小逻辑业务 可以做到service里面</span><br><span class="line">// 业务做到service里面，做的就是bean了，当前页，总页数，显示条数， 总记录数</span><br><span class="line">// 返回的是一个bean了</span><br><span class="line">// 返回的是PageBean里面的所有数据了</span><br><span class="line">PageBean findStudentByPage(int currentPage) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据姓名或性别，查询</span><br><span class="line">List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.delete(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findStudentById(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.update(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.searchStudent(sname, sgender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PageBean findStudentByPage(int currentPage) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// 封装分页的该页的数据</span><br><span class="line">PageBean&lt;Student&gt; pageBean = new PageBean&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">int pageSize = StudentDao.PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">// 设置当前页</span><br><span class="line">pageBean.setCurrentPage(currentPage);</span><br><span class="line">// 每条记录</span><br><span class="line">pageBean.setPageSize(pageSize);</span><br><span class="line"></span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">List&lt;Student&gt; list = dao.findStudentByPage(currentPage);</span><br><span class="line">pageBean.setList(list);</span><br><span class="line">// 总记录数，总页数</span><br><span class="line">int count = dao.findCount();</span><br><span class="line">pageBean.setTotalSize(count);</span><br><span class="line"></span><br><span class="line">// 总页数</span><br><span class="line">pageBean.setTotalPage(count % pageSize == 0 ? count / pageSize : (count / pageSize) + 1);</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用于处理学生的添加请求</span><br><span class="line"> */</span><br><span class="line">public class AddServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">// 1. 获取客户端提交上来的数据</span><br><span class="line">String sname = request.getParameter(&quot;sname&quot;);</span><br><span class="line">String gender = request.getParameter(&quot;gender&quot;);</span><br><span class="line">String phone = request.getParameter(&quot;phone&quot;);</span><br><span class="line">String birthday = request.getParameter(&quot;birthday&quot;);</span><br><span class="line">String info = request.getParameter(&quot;info&quot;);</span><br><span class="line">// String hobby = request.getParameter(&quot;hobby&quot;);//hobby : 游泳，写字， 足球。</span><br><span class="line">String[] h = request.getParameterValues(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">String hobby = Arrays.toString(h);</span><br><span class="line">hobby = hobby.substring(1, hobby.length() - 1);</span><br><span class="line"></span><br><span class="line">// 2. 添加到数据库</span><br><span class="line">// string -- date</span><br><span class="line">Date date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(birthday);</span><br><span class="line"></span><br><span class="line">Student student = new Student(sname, gender, phone, hobby, info, date);</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">service.insert(student);</span><br><span class="line"></span><br><span class="line">// 3. 跳转到列表页</span><br><span class="line">request.getRequestDispatcher(&quot;StudentListServlet&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用于处理删除学生</span><br><span class="line"> */</span><br><span class="line">public class DeleteServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int sid = Integer.parseInt(request.getParameter(&quot;sid&quot;));</span><br><span class="line">// System.out.println(&quot;sid=&quot;+sid);</span><br><span class="line">// 执行删除</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">service.delete(sid);</span><br><span class="line">// 跳转到列表页</span><br><span class="line">request.getRequestDispatcher(&quot;StudentListServlet&quot;).forward(request, response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 处理单个学生的更新，查询学生的信息，跳转到更新的页面</span><br><span class="line"> */</span><br><span class="line">public class EditServlet extends HttpServlet &#123;</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 接收id</span><br><span class="line">int sid = Integer.parseInt(request.getParameter(&quot;sid&quot;));</span><br><span class="line">// 查询学生数据</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">Student stu = service.findStudentById(sid);</span><br><span class="line"></span><br><span class="line">// 显示数据</span><br><span class="line">// 存储数据</span><br><span class="line">request.setAttribute(&quot;stu&quot;, stu);</span><br><span class="line">// 跳转</span><br><span class="line">request.getRequestDispatcher(&quot;edit.jsp&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse</span><br><span class="line"> *      response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class SearchStudentServlet</span><br><span class="line"> */</span><br><span class="line">public class SearchStudentServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">// 取到了要查询的关键数据</span><br><span class="line">String sname = request.getParameter(&quot;sname&quot;);</span><br><span class="line">String sgender = request.getParameter(&quot;sgender&quot;);</span><br><span class="line"></span><br><span class="line">// 找service查询</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">List&lt;Student&gt; list = service.searchStudent(sname, sgender);</span><br><span class="line"></span><br><span class="line">/*for(Student student : list) &#123;</span><br><span class="line">System.out.println(&quot;stu=&quot; + student);</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">request.setAttribute(&quot;list&quot;, list);</span><br><span class="line">// 跳转界面</span><br><span class="line">request.getRequestDispatcher(&quot;list.jsp&quot;).forward(request, response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这是用于分页显示学生列表的servlet</span><br><span class="line"> */</span><br><span class="line">public class StudentListPageServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//1. 获取需要显示的页码数</span><br><span class="line">int currentPage =Integer.parseInt( request.getParameter(&quot;currentPage&quot;));</span><br><span class="line"></span><br><span class="line">//2. 根据指定的页数，去获取该页的数据回来</span><br><span class="line">//List&lt;Student&gt; --- list.jsp</span><br><span class="line"></span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">PageBean pageBean= service.findStudentByPage(currentPage);</span><br><span class="line">request.setAttribute(&quot;pageBean&quot;, pageBean);</span><br><span class="line">//3. 跳转界面。</span><br><span class="line">request.getRequestDispatcher(&quot;list_page.jsp&quot;).forward(request, response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">public class StudentListServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 查询所有的学生</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">List&lt;Student&gt; list = service.findAll();</span><br><span class="line">// 把数据存储到作用域中</span><br><span class="line">request.setAttribute(&quot;list&quot;, list);</span><br><span class="line"></span><br><span class="line">// 跳转页面</span><br><span class="line">request.getRequestDispatcher(&quot;list.jsp&quot;).forward(request,response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class UpdateServlet</span><br><span class="line"> */</span><br><span class="line">public class UpdateServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">// 1. 获取客户端提交上来的数据</span><br><span class="line">int sid = Integer.parseInt(request.getParameter(&quot;sid&quot;));</span><br><span class="line">String sname = request.getParameter(&quot;sname&quot;);</span><br><span class="line">String gender = request.getParameter(&quot;gender&quot;);</span><br><span class="line">String phone = request.getParameter(&quot;phone&quot;);</span><br><span class="line">String birthday = request.getParameter(&quot;birthday&quot;); </span><br><span class="line">String info = request.getParameter(&quot;info&quot;);</span><br><span class="line">// String hobby = request.getParameter(&quot;hobby&quot;);</span><br><span class="line">String[] h = request.getParameterValues(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">String hobby = Arrays.toString(h);</span><br><span class="line">hobby = hobby.substring(1, hobby.length() - 1);</span><br><span class="line">// 2. 添加到数据库</span><br><span class="line"></span><br><span class="line">Date date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(birthday);</span><br><span class="line">Student student = new Student(sid, sname, gender, phone, hobby, info, date);</span><br><span class="line"></span><br><span class="line">// 2. 更新数据库数据</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">service.update(student);</span><br><span class="line"></span><br><span class="line">// 3. 跳转界面</span><br><span class="line">request.getRequestDispatcher(&quot;StudentListServlet&quot;).forward(request, response);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class JDBCUtil02 &#123;</span><br><span class="line"></span><br><span class="line">static ComboPooledDataSource dataSource = null;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">dataSource = new ComboPooledDataSource();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static DataSource getDataSource() &#123;</span><br><span class="line">return dataSource;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 获取连接对象</span><br><span class="line"> * @return</span><br><span class="line"> * @throws SQLException </span><br><span class="line"> */</span><br><span class="line">public static Connection getConn() throws SQLException&#123;</span><br><span class="line"></span><br><span class="line">return dataSource.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 释放资源</span><br><span class="line"> * @param conn</span><br><span class="line"> * @param st</span><br><span class="line"> * @param rs</span><br><span class="line"> */</span><br><span class="line">public static void release(Connection conn , Statement st , ResultSet rs)&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line">public static void release(Connection conn , Statement st)&#123;</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static void closeRs(ResultSet rs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(rs != null)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">rs = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeSt(Statement st)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(st != null)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">st = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeConn(Connection conn)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(conn != null)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">conn = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">public class TextUtils &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断某一个字符串是否为空。</span><br><span class="line"> * </span><br><span class="line"> * @param s</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static boolean isEmpty(CharSequence s) &#123;</span><br><span class="line">return s == null || s.length() == 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;添加学生页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;AddServlet&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;600&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;sname&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot;&gt;男 &lt;input</span><br><span class="line">type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;&gt;女&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;phone&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;birthday&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;游泳&quot;&gt;游泳 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;篮球&quot;&gt;篮球 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;足球&quot;&gt;足球 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;看书&quot;&gt;看书 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;写字&quot;&gt;写字&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;textarea name=&quot;info&quot; rows=&quot;3&quot; cols=&quot;20&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"> &lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;更新学生页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;更新学生页面&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;UpdateServlet&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;sid&quot; value=&quot;$&#123;stu.sid &#125;&quot;&gt;</span><br><span class="line">  &lt;table border=&quot;1&quot; width=&quot;600&quot;&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;sname&quot; value=&quot;$&#123;stu.sname &#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; &lt;c:if test=&quot;$&#123;stu.gender == &apos;男&apos;&#125;&quot;&gt;checked&lt;/c:if&gt;&gt;男</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot; &lt;c:if test=&quot;$&#123;stu.gender == &apos;女&apos;&#125;&quot;&gt;checked&lt;/c:if&gt;&gt;女</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;phone&quot; value=&quot;$&#123;stu.phone &#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;birthday&quot; value=&quot;$&#123;stu.birthday &#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;游泳&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;游泳&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;游泳</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;篮球&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;篮球&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;篮球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;足球&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;足球&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;足球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;看书&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;看书&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;看书</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;写字&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;写字&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;写字</span><br><span class="line"></span><br><span class="line">&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;textarea name=&quot;info&quot; rows=&quot;3&quot; cols=&quot;20&quot;&gt;$&#123;stu.info &#125;&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;更新&quot;&gt; &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;&lt;a href=&quot;StudentListServlet&quot;&gt;显示所有学生列表&lt;/a&gt;&lt;/h3&gt;&lt;br&gt;</span><br><span class="line">&lt;h3&gt;&lt;a href=&quot;StudentListPageServlet?currentPage=1&quot;&gt;分页显示所有学生&lt;/a&gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;%@ taglib prefix=&quot;c&quot;  uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;学生列表页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function doDelete(sid) &#123;</span><br><span class="line">// 弹出对话框，点击确定，请求Servlet</span><br><span class="line">var flag = confirm(&quot;是否确定删除?&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//访问servlet</span><br><span class="line">//window.location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;SearchStudentServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr &gt;</span><br><span class="line">&lt;td colspan=&quot;8&quot;&gt;</span><br><span class="line"></span><br><span class="line">按姓名查询:&lt;input type=&quot;text&quot; name=&quot;sname&quot;/&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">按性别查询:&lt;select name=&quot;sgender&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;--请选择--</span><br><span class="line">&lt;option value=&quot;男&quot;&gt;男</span><br><span class="line">&lt;option value=&quot;女&quot;&gt;女</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;add.jsp&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;c:forEach items=&quot;$&#123;list &#125;&quot; var=&quot;stu&quot;&gt;</span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sid &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sname &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.gender &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.phone &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.birthday &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.hobby &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.info &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;EditServlet?sid=$&#123;stu.sid &#125;&quot;&gt;更新&lt;/a&gt;   &lt;a href=&quot;#&quot; onclick=&quot;doDelete($&#123;stu.sid&#125;)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;学生列表页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function doDelete(sid) &#123;</span><br><span class="line">// 弹出对话框，点击确定，请求Servlet</span><br><span class="line">var flag = confirm(&quot;是否确定删除?&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//访问servlet</span><br><span class="line">//window.location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;SearchStudentServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;8&quot;&gt;按姓名查询:&lt;input type=&quot;text&quot; name=&quot;sname&quot; /&gt; &amp;nbsp;</span><br><span class="line">按性别查询:&lt;select name=&quot;sgender&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;--请选择--</span><br><span class="line">&lt;option value=&quot;男&quot;&gt;男</span><br><span class="line">&lt;option value=&quot;女&quot;&gt;女</span><br><span class="line">&lt;/select&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;add.jsp&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=&quot;$&#123;pageBean.list &#125;&quot; var=&quot;stu&quot;&gt;</span><br><span class="line">&lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sid &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sname &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.gender &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.phone &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.birthday &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.hobby &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.info &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;EditServlet?sid=$&#123;stu.sid &#125;&quot;&gt;更新&lt;/a&gt; &lt;a href=&quot;#&quot;</span><br><span class="line">onclick=&quot;doDelete($&#123;stu.sid&#125;)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;8&quot;&gt;第 $&#123;pageBean.currentPage &#125; /</span><br><span class="line">$&#123;pageBean.totalPage &#125; &amp;nbsp;&amp;nbsp; 每页显示$&#123;pageBean.pageSize &#125;条</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp; 总的记录数$&#123;pageBean.totalSize &#125; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;c:if</span><br><span class="line">test=&quot;$&#123;pageBean.currentPage !=1 &#125;&quot;&gt;</span><br><span class="line">&lt;a href=&quot;StudentListPageServlet?currentPage=1&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">| &lt;a</span><br><span class="line">href=&quot;StudentListPageServlet?currentPage=$&#123;pageBean.currentPage-1 &#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt; &lt;c:forEach begin=&quot;1&quot; end=&quot;$&#123;pageBean.totalPage &#125;&quot; var=&quot;i&quot;&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.currentPage == i &#125;&quot;&gt;</span><br><span class="line">  $&#123;i &#125;</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.currentPage != i &#125;&quot;&gt;</span><br><span class="line">&lt;a href=&quot;StudentListPageServlet?currentPage=$&#123;i &#125;&quot;&gt;$&#123;i &#125;&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:forEach&gt; &lt;c:if test=&quot;$&#123;pageBean.currentPage !=pageBean.totalPage &#125;&quot;&gt;</span><br><span class="line">&lt;a</span><br><span class="line">href=&quot;StudentListPageServlet?currentPage=$&#123;pageBean.currentPage+1 &#125;&quot;&gt;下一页&lt;/a&gt; | </span><br><span class="line">  &lt;a</span><br><span class="line">href=&quot;StudentListPageServlet?currentPage=$&#123;pageBean.totalPage &#125;&quot;&gt;尾页&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a77a8b8e2cca3311.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.PageBean;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.delete(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findStudentById(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.update(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.searchStudent(sname, sgender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PageBean findStudentByPage(int currentPage) throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">// 封装分页的该页数据</span><br><span class="line">PageBean&lt;Student&gt; pageBean = new PageBean&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">int pageSize = StudentDao.PAGE_SIZE;</span><br><span class="line">pageBean.setCurrentPage(currentPage); </span><br><span class="line">// 设置当前页</span><br><span class="line">pageBean.setPageSize(pageSize); </span><br><span class="line">// 设置每页显示多少记录</span><br><span class="line"></span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">List&lt;Student&gt; list = dao.findStudentByPage(currentPage);</span><br><span class="line">pageBean.setList(list); </span><br><span class="line">// 设置这一页的学生数据</span><br><span class="line"></span><br><span class="line">// 总的记录数， 总的页数。</span><br><span class="line">int count = dao.findCount();</span><br><span class="line">pageBean.setTotalSize(count); </span><br><span class="line">// 设置总的记录数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pageBean.setTotalPage(count % pageSize == 0 ? count / pageSize : (count / pageSize) + 1); // 总页数</span><br><span class="line">return pageBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>好了，欢迎在留言区留言，与大家分享你的经验和心得。</p><p>感谢你学习今天的内容，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友，感谢。</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-3f72290b57669942.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第83节:Java中的学生管理系统分页功能&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第82节：Java中的学生管理系统</title>
    <link href="https://huangguangda.github.io/2019/02/01/1/"/>
    <id>https://huangguangda.github.io/2019/02/01/1/</id>
    <published>2019-02-01T01:55:30.000Z</published>
    <updated>2019-02-05T01:56:20.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-9ea7b01207a3ef5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><blockquote><p>第82节:Java中的学生管理系统</p></blockquote><a id="more"></a><blockquote><p>学生管理系统的删除功能</p></blockquote><p>删除，点击超链接，点击弹出对话框式是否进行删除，如果确定，就删除，超链接执行的是js方法，在js里访问，跳转servlet,,servlet中调用dao方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot; onclick=&quot;doDelete($&#123;stu.sid&#125;)&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function doDelete(sid) &#123;</span><br><span class="line">// 弹出对话框，点击确定，请求Servlet</span><br><span class="line">var flag = confirm(&quot;是否确定删除?&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//访问servlet</span><br><span class="line">//window.location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用于处理删除学生</span><br><span class="line"> */</span><br><span class="line">public class DeleteServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int sid = Integer.parseInt(request.getParameter(&quot;sid&quot;));</span><br><span class="line">// System.out.println(&quot;sid=&quot;+sid);</span><br><span class="line">// 执行删除</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">service.delete(sid);</span><br><span class="line">// 跳转到列表页</span><br><span class="line">request.getRequestDispatcher(&quot;StudentListServlet&quot;).forward(request, response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.delete(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *这是StudentDao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">return runner.query(&quot;select * from stu&quot;, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;insert into stu values(null, ?,?,?,?,?,?)&quot;, </span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;delete from stu where sid=?&quot;, sid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>学生管理系统更新</p></blockquote><p>fn:contains()函数</p><p>fn:contain()函数用于确定一个字符串是否包含指定的子串，函数的语法格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if test=&quot;$&#123;fn:contains()&quot;&gt;&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn:contains</span><br><span class="line">Tests if an input string contains the specified substring.</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>更新，点击列表上的按钮进行更新，跳转EditServlet，根据id查询这个学生的所有信息，跳转到更新的页面，显示在浏览器，修改后提交到UpdateServlet，提交数据要带id，获取数据，调用service和调用dao。</p><p>代码案例：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-926c991cdb2b1738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;%@ taglib prefix=&quot;c&quot;  uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;学生列表页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function doDelete(sid) &#123;</span><br><span class="line">// 弹出对话框，点击确定，请求Servlet</span><br><span class="line">var flag = confirm(&quot;是否确定删除?&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//访问servlet</span><br><span class="line">//window.location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;SearchStudentServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr &gt;</span><br><span class="line">&lt;td colspan=&quot;8&quot;&gt;</span><br><span class="line"></span><br><span class="line">按姓名查询:&lt;input type=&quot;text&quot; name=&quot;sname&quot;/&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">按性别查询:&lt;select name=&quot;sgender&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;--请选择--</span><br><span class="line">&lt;option value=&quot;男&quot;&gt;男</span><br><span class="line">&lt;option value=&quot;女&quot;&gt;女</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;add.jsp&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;c:forEach items=&quot;$&#123;list &#125;&quot; var=&quot;stu&quot;&gt;</span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sid &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sname &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.gender &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.phone &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.birthday &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.hobby &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.info &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;EditServlet?sid=$&#123;stu.sid &#125;&quot;&gt;更新&lt;/a&gt;   &lt;a href=&quot;#&quot; onclick=&quot;doDelete($&#123;stu.sid&#125;)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 处理单个学生的更新，查询学生的信息，跳转到更新的页面</span><br><span class="line"> */</span><br><span class="line">public class EditServlet extends HttpServlet &#123;</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 接收id</span><br><span class="line">int sid = Integer.parseInt(request.getParameter(&quot;sid&quot;));</span><br><span class="line">// 查询学生数据</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">Student stu = service.findStudentById(sid);</span><br><span class="line"></span><br><span class="line">// 显示数据</span><br><span class="line">// 存储数据</span><br><span class="line">request.setAttribute(&quot;stu&quot;, stu);</span><br><span class="line">// 跳转</span><br><span class="line">request.getRequestDispatcher(&quot;edit.jsp&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse</span><br><span class="line"> *      response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *这是StudentDao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">return runner.query(&quot;select * from stu&quot;, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;insert into stu values(null, ?,?,?,?,?,?)&quot;, </span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;delete from stu where sid=?&quot;, sid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line"></span><br><span class="line">return runner.query(&quot;select * from stu where sid = ?&quot;, new BeanHandler&lt;Student&gt;(Student.class), sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;update stu set sname=?, gender=?, phone=?, birthday=?, hobby=?, info=? where sid=?&quot;,</span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo(),</span><br><span class="line">student.getSid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生的业务处理规范</span><br><span class="line"> * */</span><br><span class="line">public interface StudentService &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.delete(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findStudentById(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.update(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class UpdateServlet</span><br><span class="line"> */</span><br><span class="line">public class UpdateServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">// 1. 获取客户端提交上来的数据</span><br><span class="line">int sid = Integer.parseInt(request.getParameter(&quot;sid&quot;));</span><br><span class="line">String sname = request.getParameter(&quot;sname&quot;);</span><br><span class="line">String gender = request.getParameter(&quot;gender&quot;);</span><br><span class="line">String phone = request.getParameter(&quot;phone&quot;);</span><br><span class="line">String birthday = request.getParameter(&quot;birthday&quot;); </span><br><span class="line">String info = request.getParameter(&quot;info&quot;);</span><br><span class="line">// String hobby = request.getParameter(&quot;hobby&quot;);</span><br><span class="line">String[] h = request.getParameterValues(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">String hobby = Arrays.toString(h);</span><br><span class="line">hobby = hobby.substring(1, hobby.length() - 1);</span><br><span class="line">// 2. 添加到数据库</span><br><span class="line"></span><br><span class="line">Date date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(birthday);</span><br><span class="line">Student student = new Student(sid, sname, gender, phone, hobby, info, date);</span><br><span class="line"></span><br><span class="line">// 2. 更新数据库数据</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">service.update(student);</span><br><span class="line"></span><br><span class="line">// 3. 跳转界面</span><br><span class="line">request.getRequestDispatcher(&quot;StudentListServlet&quot;).forward(request, response);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">public class StudentListServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 查询所有的学生</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">List&lt;Student&gt; list = service.findAll();</span><br><span class="line">// 把数据存储到作用域中</span><br><span class="line">request.setAttribute(&quot;list&quot;, list);</span><br><span class="line"></span><br><span class="line">// 跳转页面</span><br><span class="line">request.getRequestDispatcher(&quot;list.jsp&quot;).forward(request,response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"> &lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;更新学生页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;更新学生页面&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;UpdateServlet&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;sid&quot; value=&quot;$&#123;stu.sid &#125;&quot;&gt;</span><br><span class="line">  &lt;table border=&quot;1&quot; width=&quot;600&quot;&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;sname&quot; value=&quot;$&#123;stu.sname &#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; &lt;c:if test=&quot;$&#123;stu.gender == &apos;男&apos;&#125;&quot;&gt;checked&lt;/c:if&gt;&gt;男</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot; &lt;c:if test=&quot;$&#123;stu.gender == &apos;女&apos;&#125;&quot;&gt;checked&lt;/c:if&gt;&gt;女</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;phone&quot; value=&quot;$&#123;stu.phone &#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;birthday&quot; value=&quot;$&#123;stu.birthday &#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;游泳&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;游泳&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;游泳</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;篮球&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;篮球&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;篮球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;足球&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;足球&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;足球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;看书&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;看书&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;看书</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;写字&quot; &lt;c:if test=&quot;$&#123;fn:contains(stu.hobby,&apos;写字&apos;) &#125;&quot;&gt;checked&lt;/c:if&gt;&gt;写字</span><br><span class="line"></span><br><span class="line">&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;textarea name=&quot;info&quot; rows=&quot;3&quot; cols=&quot;20&quot;&gt;$&#123;stu.info &#125;&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;更新&quot;&gt; &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c3daf488254b9971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码结构"></p><h2 id="进行模糊查询"><a href="#进行模糊查询" class="headerlink" title="进行模糊查询"></a>进行模糊查询</h2><p>查询结果<br><img src="https://upload-images.jianshu.io/upload_images/11158618-989b13a9ff454910.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a48c3101d840cde1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;%@ taglib prefix=&quot;c&quot;  uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;学生列表页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function doDelete(sid) &#123;</span><br><span class="line">// 弹出对话框，点击确定，请求Servlet</span><br><span class="line">var flag = confirm(&quot;是否确定删除?&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//访问servlet</span><br><span class="line">//window.location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">location.href=&quot;DeleteServlet?sid=&quot;+sid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;SearchStudentServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr &gt;</span><br><span class="line">&lt;td colspan=&quot;8&quot;&gt;</span><br><span class="line"></span><br><span class="line">按姓名查询:&lt;input type=&quot;text&quot; name=&quot;sname&quot;/&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">按性别查询:&lt;select name=&quot;sgender&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;--请选择--</span><br><span class="line">&lt;option value=&quot;男&quot;&gt;男</span><br><span class="line">&lt;option value=&quot;女&quot;&gt;女</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;add.jsp&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;c:forEach items=&quot;$&#123;list &#125;&quot; var=&quot;stu&quot;&gt;</span><br><span class="line">  &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sid &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.sname &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.gender &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.phone &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.birthday &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.hobby &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.info &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;EditServlet?sid=$&#123;stu.sid &#125;&quot;&gt;更新&lt;/a&gt;   &lt;a href=&quot;#&quot; onclick=&quot;doDelete($&#123;stu.sid&#125;)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">public class TextUtils &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断某一个字符串是否为空。</span><br><span class="line"> * </span><br><span class="line"> * @param s</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static boolean isEmpty(CharSequence s) &#123;</span><br><span class="line">return s == null || s.length() == 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line"></span><br><span class="line">// 根据姓名或性别，查询</span><br><span class="line">List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line">import com.dashucoding.util.TextUtils;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *这是StudentDao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">return runner.query(&quot;select * from stu&quot;, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;insert into stu values(null, ?,?,?,?,?,?)&quot;, </span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;delete from stu where sid=?&quot;, sid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line"></span><br><span class="line">return runner.query(&quot;select * from stu where sid = ?&quot;, new BeanHandler&lt;Student&gt;(Student.class), sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;update stu set sname=?, gender=?, phone=?, birthday=?, hobby=?, info=? where sid=?&quot;,</span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo(),</span><br><span class="line">student.getSid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 模糊查询</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">/*System.out.println(sname + sgender);*/</span><br><span class="line"></span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * String sql = &quot;select * from stu where sname=? or sgender=?&quot;;</span><br><span class="line"> * select * from stu where sname like ?;</span><br><span class="line"> * select * from stu where gender = ?;</span><br><span class="line"> * select * from stu where sname like ? and gender = ?;</span><br><span class="line"> * 如果两个都没有就查询所有</span><br><span class="line"> * sql = &quot;select * from stu&quot;</span><br><span class="line"> * if(姓名)&#123;</span><br><span class="line"> *  sql = sql + &quot;where sname like ?&quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * if(性别)&#123;</span><br><span class="line"> *  sql = sql + &quot;where gender = ?&quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * </span><br><span class="line"> * String sql = &quot;select * from stu where 1=1&quot;;</span><br><span class="line"> * if(姓名)&#123;</span><br><span class="line"> *  sql = sql + &quot; and sname like ? &quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * if(性别)&#123;</span><br><span class="line"> *  sql = sql + &quot; and gender = ? &quot;;</span><br><span class="line"> * &#125;</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">String sql = &quot;select * from stu where 1=1&quot;;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">if(!TextUtils.isEmpty(sname)) &#123;</span><br><span class="line">sql = sql + &quot; and sname like ? &quot;;</span><br><span class="line">list.add(&quot;%&quot;+sname+&quot;%&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!TextUtils.isEmpty(sgender)) &#123;</span><br><span class="line">sql = sql + &quot; and gender = ? &quot;;</span><br><span class="line">list.add(sgender);</span><br><span class="line">&#125;</span><br><span class="line">/*list.toArray()*/</span><br><span class="line"></span><br><span class="line">return runner.query(sql, new BeanListHandler&lt;Student&gt;(Student.class),list.toArray());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生的业务处理规范</span><br><span class="line"> * */</span><br><span class="line">public interface StudentService &#123;</span><br><span class="line">// 根据姓名或性别，查询</span><br><span class="line">List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生 list&lt;Student&gt;</span><br><span class="line"> */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException;</span><br><span class="line"></span><br><span class="line">// sid根据id删除学生</span><br><span class="line">void delete(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 根据id查询单个学生对象</span><br><span class="line">Student findStudentById(int sid) throws SQLException;</span><br><span class="line"></span><br><span class="line">// 更新学生信息</span><br><span class="line">void update(Student student) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.delete(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student findStudentById(int sid) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findStudentById(sid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void update(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.update(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; searchStudent(String sname, String sgender) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.searchStudent(sname, sgender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class SearchStudentServlet</span><br><span class="line"> */</span><br><span class="line">public class SearchStudentServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">// 取到了要查询的关键数据</span><br><span class="line">String sname = request.getParameter(&quot;sname&quot;);</span><br><span class="line">String sgender = request.getParameter(&quot;sgender&quot;);</span><br><span class="line"></span><br><span class="line">// 找service查询</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">List&lt;Student&gt; list = service.searchStudent(sname, sgender);</span><br><span class="line"></span><br><span class="line">/*for(Student student : list) &#123;</span><br><span class="line">System.out.println(&quot;stu=&quot; + student);</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">request.setAttribute(&quot;list&quot;, list);</span><br><span class="line">// 跳转界面</span><br><span class="line">request.getRequestDispatcher(&quot;list.jsp&quot;).forward(request, response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">public class StudentListServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 查询所有的学生</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">List&lt;Student&gt; list = service.findAll();</span><br><span class="line">// 把数据存储到作用域中</span><br><span class="line">request.setAttribute(&quot;list&quot;, list);</span><br><span class="line"></span><br><span class="line">// 跳转页面</span><br><span class="line">request.getRequestDispatcher(&quot;list.jsp&quot;).forward(request,response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>好了，欢迎在留言区留言，与大家分享你的经验和心得。</p><p>感谢你学习今天的内容，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友，感谢。</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-9ea7b01207a3ef5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第82节:Java中的学生管理系统&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第81节：Java中的数组</title>
    <link href="https://huangguangda.github.io/2019/01/31/1/"/>
    <id>https://huangguangda.github.io/2019/01/31/1/</id>
    <published>2019-01-31T05:19:16.000Z</published>
    <updated>2019-02-03T05:20:35.888Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-eeb845c9bbd185d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><blockquote><p>第81节：Java中的数组</p></blockquote><a id="more"></a><p>本节介绍数组的基本概念，数据就是一种数据结构，可以用来存储多个数据，每个数组中可以存放相同类型的数据。比如，在学校，我们是一个班，这里的班级中每个同学都是这个班级数组中的元素，都是同样的类型为学生，对应的学号就是我们的索引，但是在现实中的学号一般都是从1开始的，而在Java中的数组索引是从0开始的。</p><p>定义一个数组为方括([])，通过数组元素的索引(或下标，角标)来访问数组中的元素，同时可以为数组赋值和取出数组的元素值。</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-fee2b89479fa980b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数组"></p><p>问: 在Java中为什么要有数组呢?<br>答: 数组就是一个容器，是用来存储同种数据类型的多个值。</p><p>数组的概念</p><p>同一种类型的数据的集合，用来装数据的，数组就是一个容器。在Java中数组的好处就是可以用数组中的元素从0开始编号，可以利用下标(索引)，对齐进行操作，即方便又快捷。</p><p>在Java中的数组是用存储同种数组的元素，其指的是数据类型要相同，在数组中存放的数据类型是唯一的，只能存储一种数据类型，不能存储多种数据类型。数组可以存储基本数据类型，也可以存储引用数据类型。</p><p>数组的定义格式：</p><p>一般数组的定义为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] array; 或 int array[];</span><br></pre></td></tr></table></figure></p><p>这两种定义的语法通常都可以用，但是建议是使用 int[] array 这种语法，因为大多数程序员常用，这种语法定义更具有可读性。</p><p>格式1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = new 数组类型[元素个数或者数组的长度];</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[5];</span><br></pre></td></tr></table></figure></p><p>格式2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素类型[] 数组名 = new 元素类型[]&#123;元素1，元素2，。。。&#125;;</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[]&#123;1，2，3，4&#125;;</span><br><span class="line"></span><br><span class="line">int[] arr = &#123;2，3，4，5&#125;;</span><br></pre></td></tr></table></figure></p><p>数组的定义方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组的表示：[]，通过关键字new来创建数组</span><br></pre></td></tr></table></figure></p><p>一个数组一旦初始化建立，那么数组就会在内存中有一块空间被固定下来，那么这块空间就是这个数组的，不可变，即数组的长度将不可改变。就算把这个数组中的数组清空，在内存中还是这块空间被保存下来。比如，一家酒店我们把它定义一个数组，那么每个房间就是这家就是的长度，这家酒店我们就把它当做是我们在内存中开辟的一块固定下来的空间，每个房间中入住的人就是这块空间，也就是数组的元素，房间号码我们可以当做的数组的索引，通过房间号找到相应的入住者。当这家酒店中的每个元素即是客人都走时，这家酒店中的房间依然保留着，依然还是酒店，所以依然还是数组了。数组中的长度即酒店中的房间还是这个数量（长度）。</p><p>数组代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com。dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 数据类型[] 数组名=new 数据类型[数组的长度];</span><br><span class="line">        int[] arr = new int[5];</span><br><span class="line">        /*</span><br><span class="line">         * int: 代表数据类型</span><br><span class="line">         * []: 代表数组</span><br><span class="line">         * arr: 合法的标识符</span><br><span class="line">         * </span><br><span class="line">         * new: 创建新的实体或对象</span><br><span class="line">         * int: 数据类型</span><br><span class="line">         * []: 代表的数组</span><br><span class="line">         * 5: 代表数组的长度</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数组的索引</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[3];</span><br></pre></td></tr></table></figure></p><p>数组可以存储多个数据，并且会对数组进行编号，从0开始操作元素，可以通过编号（索引，角标，下标）找到该元素。代码中会在内存空间中开辟3个空间，如三个房子编号，从0开始，第二个房子为1，第三个房子为2。这只是一种比如，我们把它看作三个空间，对应的三个地址编号而已，通过地址是不是就可以找到房子了呢！</p><p>数组也是一种数据类型，为引用类型，如int为一种基本数据类型，那么int[]这是一种属于int数组的一种引用类型，所以int[]是一种数据类型，创建int[]类型的对象为创建数组。</p><p>什么是数组的初始化？</p><p>就是为数组开辟连续的内存空间，并为每个数据元素赋予值。</p><p>只要数组进行分配，就具有初始化值，数组变量一旦在内存空间分配了区域，就会在每个空间里存储数组的初始化值，就算内存空间为空，也会有一个初始化的值为null，这里的值会根据变量类型来给定初始化值，初始化值可以有系统进行自动分配，如果我们不给定值的话，另一种就是由我们程序员给定初始化值。</p><p>如何对数组进行初始化？</p><p>动态初始化就是程序员指定数组的长度，有系统进行数组元素的分配初始值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如： int[] arr = new int[5];</span><br></pre></td></tr></table></figure></p><p>格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayName = new type[length];</span><br></pre></td></tr></table></figure></p><p>使用动态初始化过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] array = new int[5];</span><br></pre></td></tr></table></figure></p><p>静态初始化就是程序员给定初始化值，然后由系统进行决定长度。</p><p>静态初始化的语法格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array = new type[]&#123;元素1，元素2，元素3，。。。&#125;;</span><br></pre></td></tr></table></figure></p><p>定义一个int数组类型的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] intArray;</span><br></pre></td></tr></table></figure></p><p>静态初始化，给定数组元素的初始化值，不给定数组长度，由系统决定数组长度：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intArray = new int[]&#123;2，3，4，5，6&#125;; 或 intArray = &#123;2，3，4，5，6&#125;;</span><br></pre></td></tr></table></figure></p><p>在程序员的通常写法中，数组的定义和数组进行初始化都是同时完成如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] a = &#123;1，2，3，4&#125;;</span><br></pre></td></tr></table></figure></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com。dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 数据类型[] 数组名 = new 数据类型[数组长度];</span><br><span class="line">        int[] arr = new int[5]; // 动态初始化，在内存中开辟连续的5块空间</span><br><span class="line">        System。out。println(arr[0]); // 系统会给出默认的初始化值</span><br><span class="line">        // 整数类型都为0</span><br><span class="line">        arr[0] = 12;</span><br><span class="line">        System。out。println(arr[0]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-6558ddb037de2575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>结果在内存中开辟连续的5块空间，在内存中进行存储，这5块空间有自己的地址，用于方便去找到，可以通过地址先找到该数组，如找一栋楼，需要地址，然后找数组中的元素，如每个房间，通过编号找到每个元素。</p><p>案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System。out。println(arr);// 打印结果</span><br><span class="line">[I@7852e922// 16进制的表现形式// [ 代表数组// I 代表是int类型// @ 固定的// 7852e922 代表16进制的地址值</span><br></pre></td></tr></table></figure></p><p>在Java中运行程序会进行划分空间进行运行程序：五块内存空间</p><p>1.栈：用来存储局部变量的<br>2.堆：存储new出来的数组或对象<br>3.方法区：面向对象<br>4.本地方法区：和系统相关<br>5.寄存器：供给CPU使用（不需要了解）</p><p>局部变量是定义在方法声明上或方法中的变量，在栈内存中，存储的都是局部变量，只要在方法中定义的变量都是局部变量，一旦变量的生命周期结束该变量就会被释放，用完就会被删掉了。</p><p>堆内存，存储的都是实体，就是对象，凡是用new 创建的都是在堆里面。</p><p>new，一个new指在内存中进行开辟空间，在堆内存中每个实体都是一个首地址值，堆内存的变量都是有默认的初始化值的，不同类型都不一样，当实体不在使用时，堆中的变量不会马上删除，会由Java系统中的垃圾回收机制进行回收（Java中有个垃圾回收机制，自动回收垃圾）</p><p>数组地址，例如：0x0011，可以通过索引找到每个值，系统会给初始化值。</p><p>整数类型：</p><p>byte， short， int， long 的默认初始化值都为0</p><p>浮点类型：</p><p>float， double 的默认初始化值都为0。0</p><p>布尔类型：</p><p>boolean的默认初始化值为false</p><p>字符类型：</p><p>char默认初始化值为 “\u0000”，char在内存中是占两个字节，是16个二进制位。\u0000每个0代表16进制的0，那么四个0就是代表16个二进制位。</p><p>一个字节代表8个二进制位，那么两个字节，就代表16个二进制位。’\u0000’每个0代表16进制的0，那么四个0就是代表16个二进制位。</p><p>char在内存中占两个字节</p><p>代表16个二进制位， 两个字节代表16个二进制位。<br>一个字节代表8个二进制位，那么两个字节就代表16个二进制位。</p><p>\u0000:<br>每个0代表16进制的0，那么四个0就代表16个二进制位。<br>两个字节就代表16个二进制位，那么四个0代表16个二进制位。</p><p>char:就代表16个二进制位。<br>\u0000`:就代表16个二进制位 = 四个0就代表16个二进制位。<br>每个0就代表16个进制的二进制数。1个0就代表4位，16进制是4位代表一位的，4个就代表16个二进制数。</p><p>16个二进制位: 0000<br>一个就代表4个二进制位，那么4个就代表16个二进制位。</p><p>数组元素如果是引用数据类型为类，接口和数组，那么数组元素的初始化值是null。</p><p>注意：静态初始化和动态初始化不能同时用，不要在进行数组初始化值是，既要分配数组元素初始化值，还要给定数组的长度，千万不要，知道吗！</p><p>枪</p><p>枪中的弹夹，子弹是一颗一颗地压进去的，第一颗压进的子弹是最后打出来的，最后一颗的子弹先发射出来。所以java中的方法就想弹夹一样，而主方法，是先进入内存的，虚拟机调用主方法，程序运行起来，首先进入内存的，进入栈的，是主方法。</p><p>主方法就像子弹一样，放入到栈低，压进栈，压栈。主方法直接压入栈底，运行完之后会弹出去，就叫弹栈。栈是先进后出。主方法压进栈。方法里的局部变量，类型为数组类型。</p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com。dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // int x = 12; // x就是局部变量</span><br><span class="line">        int[] arr = new int=[3]; </span><br><span class="line">        // 动态初始化，创建3块连续的空间</span><br><span class="line">        // 方法里的局部变量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在栈中存放主方法，主方法内有局部变量，这个局部变量为数组类型:</p><p>int[] arr;</p><p>然后在堆中是数组类型new出来的值。</p><p>内存分析案例：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-884bf08ed23ed7f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // int x = 12; // x就是局部变量</span><br><span class="line">        int[] arr = new int[3]; </span><br><span class="line">        // 动态初始化，创建3块连续的空间</span><br><span class="line">        // 方法里的局部变量</span><br><span class="line">        arr[0] = 10;</span><br><span class="line">        arr[1] = 20;</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        System.out.println(arr[1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>制作内存图：</p><p>地址值是赋予给arr，只是通过地址找到实体的。<br><img src="https://upload-images.jianshu.io/upload_images/11158618-d9844ec479c0096a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr1 = new int[3]; // 创建数组长度为3</span><br><span class="line">        int[] arr2 = new int[3];</span><br><span class="line">        </span><br><span class="line">        System.out.println(arr1); // 打印数组的地址值</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line">        </span><br><span class="line">        arr1[0] = 10; // 给第一个数组中的第一个元素赋值</span><br><span class="line">        arr2[1] = 20; // 给第二个数组中的第二个元素赋值</span><br><span class="line">        </span><br><span class="line">        System.out.println(arr1[0]);</span><br><span class="line">        System.out.println(arr1[1]);</span><br><span class="line">        System.out.println(arr1[2]);</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;-----------&quot;);</span><br><span class="line">        </span><br><span class="line">        System.out.println(arr2[0]);</span><br><span class="line">        System.out.println(arr2[1]);</span><br><span class="line">        System.out.println(arr2[2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-405654a6af9cb35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>制作内存图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-e6da53cea930786a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr1 = new int[3];</span><br><span class="line">        int[] arr2 = new int[5];</span><br><span class="line">        int[] arr3 = arr2;</span><br><span class="line">        </span><br><span class="line">        System.out.println(arr1);</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line">        System.out.println(arr3);</span><br><span class="line">        </span><br><span class="line">        arr1[0] = 10;</span><br><span class="line">        arr1[1] = 20;</span><br><span class="line">        </span><br><span class="line">        arr2[1] = 30;</span><br><span class="line">         </span><br><span class="line">        arr3[1] = 40;</span><br><span class="line">        arr3[2] = 50;</span><br><span class="line">        </span><br><span class="line">        System.out.println(arr1[0]);</span><br><span class="line">        System.out.println(arr1[1]);</span><br><span class="line">        System.out.println(arr1[2]);</span><br><span class="line">        System.out.println(&quot;--------------&quot;);</span><br><span class="line">        System.out.println(arr2[0]);</span><br><span class="line">        System.out.println(arr2[1]);</span><br><span class="line">        System.out.println(arr2[2]);</span><br><span class="line">        System.out.println(arr2[3]);</span><br><span class="line">        System.out.println(arr2[4]);</span><br><span class="line">        System.out.println(&quot;--------------&quot;);</span><br><span class="line">        System.out.println(arr3[0]);</span><br><span class="line">        System.out.println(arr3[1]);</span><br><span class="line">        System.out.println(arr3[2]);</span><br><span class="line">        System.out.println(arr3[3]);</span><br><span class="line">        System.out.println(arr3[4]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-91a352da16e4932a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>制作内存图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-13aa9af1a2a716c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 数据类型[] 数组名=new 数据类型[]&#123;元素1，元素2，...&#125;;</span><br><span class="line">        // int[] arr = new int[] &#123;1，23，45，67，28&#125;;</span><br><span class="line">        // int[] arr2 = &#123;2，35，6，12&#125;; // 静态初始化的简写形式</span><br><span class="line">        </span><br><span class="line">        // int[] arr; //声明数组引用</span><br><span class="line">        // arr = new int[] &#123;11，22，33，44&#125;; // 可以不同行</span><br><span class="line">        </span><br><span class="line">        // int [] arr2;</span><br><span class="line">        // arr2 = &#123;23，43，55&#125;; // 简写形式声明和赋值必须在同一行</span><br><span class="line">        </span><br><span class="line">        // int[] arr = new int[3]&#123;23，22，1&#125;; //会报错，不允许动静结合</span><br><span class="line">        // 应该写成 int[] arr = new int[3]; 为动态初始化</span><br><span class="line">        // int[] arr = new int[]&#123;23，44，2&#125;; 为静态初始化</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 数据类型[] 数组名=new 数据类型[]&#123;元素1，元素2，...&#125;;</span><br><span class="line">        // int[] arr = new int[] &#123;1，23，45，67，28&#125;;</span><br><span class="line">        // int[] arr2 = &#123;2，35，6，12&#125;; // 静态初始化的简写形式</span><br><span class="line">        </span><br><span class="line">        int[] arr = &#123;12，23，34&#125;;</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>制作内存图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-eafc96e2d8393d80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>数组中的异常问题：</p><p>程序员写程序不能保证自己写的代码是正确的，总会出现一些错误，这时我们要学会调式这些代码程序保证可以正常的运行。</p><p>数组索引越界异常<br>ArrayIndexOutOfBoundsException，指你访问的索引不存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int arr = &#123;1，34，234&#125;;</span><br><span class="line">System.out.println(arr[23]);</span><br></pre></td></tr></table></figure></p><p>空指针异常<br>NullPointerException，指数组已经不在指向堆内存了，而你还用数组名去访问元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = &#123;1，2，3&#125;;</span><br><span class="line">arr = null;</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr = new int[5];</span><br><span class="line">        System.out.println(arr[5]); // 当访问数组中不存在的索引，就会出现索引越界异常.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图：<br><img src="https://upload-images.jianshu.io/upload_images/11158618-6ddf39a9c6e7b8ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>当访问数组中不存在的索引的时候就会导致数组越界异常。</p><p>同理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr[-1]); 同样导致数组越界异常。</span><br></pre></td></tr></table></figure></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr = new int[5];</span><br><span class="line">        // System.out.println(arr[5]);</span><br><span class="line">        arr = null;</span><br><span class="line">        System.out.println(arr[0]); // 当数组引用赋值为null，在去调用数组中的元素就会出现空指针异常.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-40ebb884952eb2b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>数组的遍历：</p><p>循环数组中的每个数组元素。</p><p>使用foreach循环，这种循环遍历数组是非常方便的，foreach循环的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (type variableName : array )&#123;</span><br><span class="line"> // 访问每个元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ForeachTest &#123;</span><br><span class="line"> public static void main(String[] args)&#123;</span><br><span class="line">  String[] names = &#123; “dashu”, “dashucoding”&#125;;</span><br><span class="line">  // 使用foreach循环遍历数组中的每个元素</span><br><span class="line">  for(String name : names)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;/*</span><br><span class="line"> *  数组的遍历：依次输出数组中的每个元素</span><br><span class="line"> *  数组的属性：arr.length数组的长度</span><br><span class="line"> *  数组的最大索引：arr.length-1;</span><br><span class="line"> * */public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr = &#123;11，22，33，44，55&#125;;</span><br><span class="line">        /*      System.out.println(arr[0]);</span><br><span class="line">        System.out.println(arr[1]);</span><br><span class="line">        System.out.println(arr[2]);</span><br><span class="line">        System.out.println(arr[3]);</span><br><span class="line">        System.out.println(arr[4]);*/</span><br><span class="line">        </span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;---------&quot;);</span><br><span class="line">        </span><br><span class="line">        // arr.length 代表数组的长度</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;---------&quot;);</span><br><span class="line">        </span><br><span class="line">        int[] arr2 = &#123;1，2，3&#125;;</span><br><span class="line">        print(arr2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 遍历数组的方法</span><br><span class="line">     * 返回值类型为void</span><br><span class="line">     * 参数列表int[] arr</span><br><span class="line">     * */</span><br><span class="line">    private static void print(int[] arr) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        for(int i = 0;i&lt;arr.length;i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5103831214dc7522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>最大值</p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;/*</span><br><span class="line"> * 数组</span><br><span class="line"> * 如何获取数组的最大值</span><br><span class="line"> * */public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr = &#123;23，34，12，33&#125;;</span><br><span class="line">        int max = getMax(arr);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     * 获取数组最大值</span><br><span class="line">     * 返回值类型为int</span><br><span class="line">     * 参数列表为int[] arr</span><br><span class="line">     * */</span><br><span class="line">    public static int getMax(int[] arr) &#123;</span><br><span class="line">        int max = arr[0];</span><br><span class="line">        for (int i = 1; i &lt; arr.length; i++) &#123; // 从数组的第二个元素开始遍历</span><br><span class="line">            if(max &lt; arr[i]) &#123; // 如果max记录的值小于数组中的元素，就max记录记录最大的</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图：<br><img src="https://upload-images.jianshu.io/upload_images/11158618-bd72ea24b51d8387.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>分析制图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f61c16cf70e787ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>数组的操作反转：</p><p>操作反转，就是前后倒置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;/*</span><br><span class="line"> * 数组</span><br><span class="line"> * 如何获取数组的最大值</span><br><span class="line"> * */public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr = &#123;22，33，44，55&#125;;</span><br><span class="line">        reverseArray(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">        /*</span><br><span class="line">         * 数组元素的反转</span><br><span class="line">         * 返回值类型void</span><br><span class="line">         * 明确参数列表int[] arr</span><br><span class="line">         * */</span><br><span class="line">    public static void reverseArray(int[] arr) &#123;</span><br><span class="line">        for(int i=0; i &lt; arr.length / 2; i++) &#123;</span><br><span class="line">            // arr[0] 第一个 和 arr[arr.length-1-0] 最后一个 交换</span><br><span class="line">            // arr[1] 和 arr[arr.length-1-1] 交换</span><br><span class="line">            // arr[2] 和 arr[arr.length-1-2] 交换</span><br><span class="line">            // ...</span><br><span class="line">            </span><br><span class="line">            /*int temp = arr[0];</span><br><span class="line">            arr[0] = arr[arr.length-1];</span><br><span class="line">            arr[arr.length-1] = temp;*/</span><br><span class="line">            </span><br><span class="line">            int temp = arr[i];</span><br><span class="line">            arr[i] = arr[arr.length-1-i];</span><br><span class="line">            arr[arr.length-1-i] = temp;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     * 数组遍历</span><br><span class="line">     * 明确返回值类型void</span><br><span class="line">     * 明确参数列表int[] arr</span><br><span class="line">     * */</span><br><span class="line">    public static void print(int[] arr) &#123;</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图片：<br><img src="https://upload-images.jianshu.io/upload_images/11158618-d68df263d5098bf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>根据键盘录入索引，查找对应的星期：</p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">/*</span><br><span class="line"> * 数组</span><br><span class="line"> * 如何进行数组查表（根据键盘录入索引，查找对应的星期)</span><br><span class="line"> * */public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        System.out.println(&quot;星期&quot; + getWeek(2));</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;----------&quot;);</span><br><span class="line">        </span><br><span class="line">        // 键盘录入</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入对应的星期范围，对应1至7&quot;);</span><br><span class="line">        int week = sc.nextInt();</span><br><span class="line">        System.out.println(&quot;星期&quot; + getWeek(week));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     * 根据索引返回对应的星期</span><br><span class="line">     * 返回值的类型char</span><br><span class="line">     * 能存储中文的char</span><br><span class="line">     * 参数列表int week</span><br><span class="line">     * 通过索引获取数组中的元素</span><br><span class="line">     * */</span><br><span class="line">    public static char getWeek(int week) &#123;</span><br><span class="line">        char[] arr = &#123;&apos; &apos;，&apos;一&apos;，&apos;二&apos;，&apos;三&apos;，&apos;四&apos;，&apos;五&apos;，&apos;六&apos;，&apos;日&apos;&#125;; // 定义一张星期表</span><br><span class="line">        return arr[week]; // 通过索引获取数组中的元素</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数组元素查找：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">/*</span><br><span class="line"> * 数组</span><br><span class="line"> * 数组元素查找</span><br><span class="line"> * 查找指定元素第一次在数组中出现的索引</span><br><span class="line"> * */public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[] arr = &#123;11，22，33，44，55&#125;;</span><br><span class="line">        int index = getIndex(arr，22);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;----------&quot;);</span><br><span class="line">        </span><br><span class="line">        int index2 = getIndex(arr，10);</span><br><span class="line">        System.out.println(index2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     * 查找元素索引</span><br><span class="line">     * 返回值类型int</span><br><span class="line">     * 参数列表int[] arr， 要查找的值int value</span><br><span class="line">     * */</span><br><span class="line">    public static int getIndex(int[] arr， int value) &#123;</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++) &#123; // 数组的遍历</span><br><span class="line">            if(arr[i] == value) &#123; // 如果数组中的元素与查找元素匹配，就是这个元素</span><br><span class="line">                return i; // 返回索引</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果没有查到，没找到返回给你一个-1，如果返回值为-1，就知道没在数组中找到</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图片：<br><img src="https://upload-images.jianshu.io/upload_images/11158618-828de291b0982446.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>二维数组的格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = new int[3][2];</span><br></pre></td></tr></table></figure></p><p>表示二维数组的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[][] = new 数据类型[m][n];</span><br><span class="line">数据类型[] 数组名[] = new 数据类型[m][n];</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 建议这么写</span><br><span class="line">int[][] arr = new int[3][2];</span><br><span class="line">// 一维数组</span><br><span class="line">int[] x; // 二维数组int[] x，y[];int[] y[];</span><br></pre></td></tr></table></figure><p>二维数组案例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        /*</span><br><span class="line">         * 二维数组</span><br><span class="line">         * 二维数组中有3个一维数组</span><br><span class="line">         * 每个一维数组中有2个元素</span><br><span class="line">         * */</span><br><span class="line">        int[][] arr = new int[3][2];</span><br><span class="line">        // 打印二维数组</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        // 打印二维数组中的第一个一维数组</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        // 打印二维数组中的第一个一维数组的第一个元素</span><br><span class="line">        System.out.println(arr[0][0]);</span><br><span class="line">        </span><br><span class="line">        // 打印结果</span><br><span class="line">        /*</span><br><span class="line">         * [[I@7852e922 // 二维数组的地制值</span><br><span class="line">         * [I@4e25154f // 一维数组的地址值</span><br><span class="line">         * 0 // 元素值</span><br><span class="line">         * */ </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-02d1568bfa3da5bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>二维数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int[][] arr = new int[3][2];</span><br><span class="line">        </span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        System.out.println(arr[0][0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>内存分析：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-8df71163c5e85c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 二维数组，二维数组中有3个一维数组，三个一维数组都没有被赋值</span><br><span class="line">        int[][] arr = new int[3][];</span><br><span class="line">        // 打印二维数组中的三个一维数组</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        System.out.println(arr[1]);</span><br><span class="line">        System.out.println(arr[2]);</span><br><span class="line">        </span><br><span class="line">        arr[0] = new int[3]; // 第一个一维数组中存储三个int值</span><br><span class="line">        arr[1] = new int[5]; // 第二个一维数组中存储五个int值</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;-----&quot;);</span><br><span class="line">        </span><br><span class="line">        // 打印二维数组中的三个一维数组</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        System.out.println(arr[1]);</span><br><span class="line">        System.out.println(arr[2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-de944498e136df38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 二维数组，二维数组中有3个一维数组，三个一维数组都没有被赋值</span><br><span class="line">        int[][] arr = new int[3][];</span><br><span class="line">        // 打印二维数组中的三个一维数组</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        System.out.println(arr[1]);</span><br><span class="line">        System.out.println(arr[2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分析内存图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-803aab6417cb1cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>二维数组格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = &#123; &#123;1，2，3&#125;， &#123;4，5&#125;， &#123;6，7，8，9&#125; &#125;;</span><br></pre></td></tr></table></figure></p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 二维数组</span><br><span class="line">        int[][] arr = &#123; &#123;1，2，3&#125;， &#123;4，5&#125;， &#123;6，7，8，9&#125; &#125;;</span><br><span class="line">        System.out.println(arr); //二维数组的地址值</span><br><span class="line">        System.out.println(arr[0]); //一维数组的地址值</span><br><span class="line">        System.out.println(arr[0][0]); //元素</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图：<br><img src="https://upload-images.jianshu.io/upload_images/11158618-60af5bab8e08fe20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"><br>内存分析图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-2eaf516c48b1b4d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"><br>二维数据的遍历：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 二维数组的遍历</span><br><span class="line">        int[][] arr = &#123; &#123;1，2，3&#125;， &#123;4，5&#125;， &#123;6，7，8，9&#125; &#125;;</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            // 获取每个二维数组中的一维数组</span><br><span class="line">            // 获取一维数组中的元素</span><br><span class="line">            for(int j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                System.out.print(arr[i][j] + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图：</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-22458fd52b6974fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>二维数组的求和：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding;</span><br><span class="line">public class DemoArray &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        // 二维数组求和</span><br><span class="line">        int[][] arr = &#123; &#123;1，2，3&#125;， &#123;4，5，6&#125;， &#123;7，8，9&#125; &#125;;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            // 获取每个一维数组</span><br><span class="line">            for(int j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                //获取每个一维数组</span><br><span class="line">                sum = sum + arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果图：<br><img src="https://upload-images.jianshu.io/upload_images/11158618-705d2a380c7b03b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>基本数据类型的值传递，不会改变原值，因为调用后会弹栈，局部变量就会随之消失，而引用数据类型的值传递，会改变原值，因为使用方法弹栈，但是堆内存数组对象还在，可以通过地址继承访问。</p><p>数组的综合应用</p><p>代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 打印数组public static void printArray(int[] arr)&#123;</span><br><span class="line"> for(int x=0;x&lt;arr.length;x++)</span><br><span class="line"> &#123;</span><br><span class="line">    if(x!=arr.length-1)&#123;</span><br><span class="line">     System.out.print(arr[x]+&quot;,&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">     System.out.print(arr[x]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数组转字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 数组转换成为字符串// 结果返还为字符串，参数为数组public static String toString (int[] arr)&#123;</span><br><span class="line"> // 定义字符串变量</span><br><span class="line"> String temp = &quot;[&quot;;</span><br><span class="line"> for(int x = 0; x&lt;arr.length; x++)&#123;</span><br><span class="line">  // 判断是否为最后一位元素</span><br><span class="line">  if(x != arr.length - 1)&#123;</span><br><span class="line">   temp = temp + arr[x] + &quot;,&quot;;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    temp = temp + arr[x] + &quot;]&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static String getWeek(int num)&#123;</span><br><span class="line"> String[] weeks = &#123; &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot; &#125;;</span><br><span class="line"> if(num&gt;7 || num&lt;1)&#123;</span><br><span class="line">  return num + &quot;没有对应的星期&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> return weeks[num];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>选择排序</p><p>选择排序是第一个人和后续排序的人进行比较，若第一个人大于第二个人，就进行交换，那么这时第一人就是最小的，然后这时的第一个人和第三个人进行比较，若这时的第一个人大于第三个人，就进行交换位置，这时第一个人又换人了，也变得更小了，就这样，把剩下的人以这种方法进行比较，直到最后，第一轮结束，在第一位的就是最小的值。</p><p>这种就是排序算法，比如有6个人，第一轮要进行5次比较。小的值往前跑嘛。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//第一轮  for(int index=1;index&lt;arr.length;index++)  </span><br><span class="line">&#123;  if(arr[0]&gt;arr[index])  </span><br><span class="line">&#123;  </span><br><span class="line">  int temp = arr[0];  </span><br><span class="line">  arr[0] = arr[index];  </span><br><span class="line">  arr[index] = temp;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">print(arr);  </span><br><span class="line">  //第二轮  for(int index=2;index&lt;arr.length;index++)  </span><br><span class="line">&#123;  if(arr[1]&gt;arr[index])  </span><br><span class="line">&#123;  </span><br><span class="line">  int temp = arr[1];  </span><br><span class="line">  arr[1] = arr[index];  </span><br><span class="line">  arr[index] = temp;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">print(arr);  </span><br><span class="line">  //第三轮  for(int index=3;index&lt;arr.length;index++)  </span><br><span class="line">&#123;  if(arr[2]&gt;arr[index])  </span><br><span class="line">&#123;  </span><br><span class="line">  int temp = arr[2];  </span><br><span class="line">  arr[2] = arr[index];  </span><br><span class="line">  arr[index] = temp;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">print(arr);  </span><br><span class="line">  //第四轮  for(int index=4;index&lt;arr.length;index++)  </span><br><span class="line">&#123;  if(arr[3]&gt;arr[index])  </span><br><span class="line">&#123;  </span><br><span class="line">  int temp = arr[3];  </span><br><span class="line">  arr[3] = arr[index];  </span><br><span class="line">  arr[index] = temp;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">print(arr);  </span><br><span class="line">  //第五轮  for(int index=5;index&lt;arr.length;index++)  </span><br><span class="line">&#123;  if(arr[4]&gt;arr[index])  </span><br><span class="line">&#123;  </span><br><span class="line">  int temp = arr[4];  </span><br><span class="line">  arr[3] = arr[index];  </span><br><span class="line">  arr[index] = temp;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">print(arr);  </span><br><span class="line">  //第六轮没有，我们arr.length=6举例  //int index = 6;index&lt;arr.length; false</span><br></pre></td></tr></table></figure></p><p>优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static void selectionSort(int[] arr)  &#123;  </span><br><span class="line"> for(int count=1;count&lt;arr.length;count++)  </span><br><span class="line">&#123;  </span><br><span class="line"> for(int index=count;index&lt;arr.length;index++)  </span><br><span class="line"> &#123;  </span><br><span class="line">  if(arr[count-1]&gt;arr[index])  </span><br><span class="line">  &#123;  </span><br><span class="line">    int temp = arr[count-1];  </span><br><span class="line">    arr[count-1] = arr[index];  </span><br><span class="line">    arr[index] = temp;  </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">for(int x = 0;x&lt;arr.length-1;x++)</span><br><span class="line">&#123;</span><br><span class="line"> for(int y=x+1;y&lt;arr.length;y++)&#123;</span><br><span class="line">  if(arr[x]&gt;arr[y])&#123;</span><br><span class="line">    int temp = arr[x];</span><br><span class="line">    arr[x] = arr[y];</span><br><span class="line">    arr[y] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>冒泡排序</p><p>为什么这个排序要叫冒泡呢？为什么不叫其他名词呢？</p><p>其实这个取名是根据排序算法的基本思路命名的，见名知意，冒泡排序，就是想泡泡在水里一样，在水里大的泡泡先浮出水面，就是大的先排出来，最小的最慢排出。</p><p>冒泡排序，是对排序的各个元素从头到尾依次进行相邻的大小比较，比如你是队长，在你的面前有一排人，你要将其进行排序，依次按照从小到大排序。</p><p>怎么理解最大的值被排除，你是队长，你对面前的一群人看不惯，进行排序，从左到右开始，第一个和第二个进行比较，大的那个就被挑出来，与第三个进行比较，接下来就是依次按照这个方法比较，就能把那个最大的值，最高的给挑出来不是，这就是第一轮的比较。</p><p>接下来，最大的就不用跟他比较了，上面所述，在排序时，你面前的人，是不能乱动的，一旦比较哪个大，两者就换位，如果第一比第二个小，就是第二个大时，两者不用换位，第二个就与第三个进行比较。</p><p>依照这个方法，两两比较，大的都被排到了最后，那么一旦排完，是不是都依照从小到大，（从低到高）的顺序在你面前排好了。</p><p>代码示例</p><p>我们用索引下标来解释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//第一轮  for(int index=0;index &lt; arr.length-1; index++）&#123;  //相邻两个比较  </span><br><span class="line"> if(arr[index] &gt; arr[index+1])&#123;  </span><br><span class="line">   int temp = arr[index];  </span><br><span class="line">   arr[index] = arr[index+1];  </span><br><span class="line">   arr[index+1] = temp;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">print(arr);  </span><br><span class="line">  for(int index=0;index &lt; arr.length-2;index++)&#123;  //这里arr.length-2,为什么比上一次多减了1呢？  //因为第一轮，把最大的排出来了，就不用比较了，少了一个人  </span><br><span class="line"> if(arr[index] &gt; arr[index+1])&#123;  </span><br><span class="line">   int temp = arr[index];  </span><br><span class="line">   arr[index] = arr[index+1];  </span><br><span class="line">   arr[index+1] = temp;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">print(arr);  </span><br><span class="line">  for(int index=0;index &lt; arr.length-3;index++)&#123;  </span><br><span class="line"> if(arr[index]&gt;arr[index+1])&#123;  </span><br><span class="line">   int temp = arr[index];  </span><br><span class="line">   arr[index] = arr[index+1];  </span><br><span class="line">   arr[index+1] = temp;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">print(arr);</span><br></pre></td></tr></table></figure></p><p>优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for(int num=1;num&lt;arr.length;num++)&#123;  </span><br><span class="line">  </span><br><span class="line"> for(int index=0;index&lt;arr.length-num;index++)&#123;  </span><br><span class="line">  </span><br><span class="line">   if(arr[index]&gt;arr[index+1])&#123;  </span><br><span class="line">     int temp = arr[index];  </span><br><span class="line">     arr[index] = arr[index+1];  </span><br><span class="line">     arr[index+1] = temp;  </span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">for(int x=0;x&lt;arr.length-1;x++)&#123;</span><br><span class="line"> for(int y=0;y&lt;arr.length-1-x;y++)&#123;</span><br><span class="line">  if(arr[y]&gt;arr[y+1])&#123;</span><br><span class="line">   int temp = arr[y];</span><br><span class="line">   arr[y] = arrp[y+1];</span><br><span class="line">   arr[y+1] = temp;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二分查找，折半查找</p><p>什么是二分查找，折半查找呢？就是我说一个数，你来猜，你答一个数，我说大了，或小了，直到找到为止。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static int searchKey(int[] arr, int key)&#123;</span><br><span class="line"> for(int x=0;x&lt;arr.length;x++)&#123;</span><br><span class="line">   if(arr[x] == key)&#123;</span><br><span class="line">    rerurn x;</span><br><span class="line">   &#125;</span><br><span class="line">  return -1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static int binarySearch(int[] arr, int key)&#123;</span><br><span class="line"> int max,min,mid;</span><br><span class="line"> min = 0;</span><br><span class="line"> max = arr.length - 1;</span><br><span class="line"> mid = (max+min)&gt;&gt;1;</span><br><span class="line"></span><br><span class="line"> while(arr[mid] != key)&#123;</span><br><span class="line">  if(key&gt;arr[mid])&#123;</span><br><span class="line">    min = mid + 1;</span><br><span class="line">  &#125;else if(key&lt;arr[mid])</span><br><span class="line">    max = mid - 1;</span><br><span class="line"></span><br><span class="line">   mid = (max+min)&gt;&gt;1;</span><br><span class="line">  &#125;</span><br><span class="line"> return mid;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static int binarySearch(int[] arr, int key）&#123;</span><br><span class="line"> int max, min , mid;</span><br><span class="line"> min = 0;</span><br><span class="line"> max = arr.length - 1;</span><br><span class="line"></span><br><span class="line"> while(min &lt;= max)&#123;</span><br><span class="line">   mid = (min+max)&gt;&gt;1;</span><br><span class="line">   if(key&gt;arr[mid])&#123;</span><br><span class="line">    min = mid + 1;</span><br><span class="line">   &#125;else if(key &lt; arr[mid])</span><br><span class="line">    max = mid - 1;</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">    return mid;</span><br><span class="line"> &#125;</span><br><span class="line"> return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二维数组</p><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = new int[2][3];</span><br><span class="line">int[][] arr = &#123; &#123;3,5,6&#125;, &#123;33,44,66&#125;, &#123;23,21,6&#125; &#125;;</span><br><span class="line">for(int x=0; x&lt;arr.length; x++)&#123;</span><br><span class="line"> for(int y=0; y&lt;arr[x].length; y++)&#123;</span><br><span class="line">   sum += arr[x][y];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void revese(int[] arr)&#123;</span><br><span class="line"> for(int start=0, end = arr.length-1; start&lt;end; start++,end--)&#123;</span><br><span class="line">  swap(arr,start,end);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void swap(int[] arr, int a, int b)&#123;</span><br><span class="line"> int temp=arr[a];</span><br><span class="line"> arr[a] = arr[b];</span><br><span class="line"> arr[b] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本章小结</p><p>本章主要介绍了数组的定义，初始化，使用等基本知识，结合了大量的分析内存图用来分析数组在内存中的运行机制，数组的引用变量和数组直接的关系，大量讲解多维数组的实质性问题，文章中给出了多种代码案例来展示数组的运用扩展。</p><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>好了，欢迎在留言区留言，与大家分享你的经验和心得。</p><p>感谢你学习今天的内容，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友，感谢。</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-eeb845c9bbd185d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第81节：Java中的数组&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第80节:Java中的MVC设计模式</title>
    <link href="https://huangguangda.github.io/2019/01/30/1/"/>
    <id>https://huangguangda.github.io/2019/01/30/1/</id>
    <published>2019-01-30T13:29:06.000Z</published>
    <updated>2019-02-01T13:32:18.789Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-55e49c6e25ec6604.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><blockquote><p>第80节:Java中的MVC设计模式</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解java中的mvc模式.复习以及回顾!</p><p>事务,设置自动连接提交关闭.<br><code>setAutoCommit(false);</code><br><code>conn.commit();</code><br><code>conn.rollBack</code></p><p>隔离级别分别有:</p><p>读未提交有脏读<br>读已提交有不可重复读<br>可重复读有幻读<br>可串行化可以解决脏读,幻读,不可重复读</p><p>数据库连接池用于创建和管理连接对象.</p><p>DBCP和C3P0,分别了解代码设置和配置文件设置</p><p>DBUtils可以简化数据的增删改查.</p><p><code>QueryRunner runner = new QueryRunner();</code></p><p><code>runner.update();</code></p><p><code>runner.query();</code></p><blockquote><p>DBUtils通用的增删改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void testInsert()&#123;</span><br><span class="line"> // 查询</span><br><span class="line"> Connection conn = null;</span><br><span class="line"> Statement st = null;</span><br><span class="line"> try&#123;</span><br><span class="line">  // 获取连接对象</span><br><span class="line"> conn = JDBCUtil.getConn();</span><br><span class="line"> // 根据连接对象,得到state ment</span><br><span class="line"> st = conn.createStatement();</span><br><span class="line"> // 执行添加</span><br><span class="line"> String sql = &quot;insert into t_stu values(null, &apos;dashu&apos;, 23)&quot;;</span><br><span class="line"> // 影响行数</span><br><span class="line"> int result = st.executeUpdate(sql);</span><br><span class="line"> if(result &gt; 0)&#123;</span><br><span class="line">  System.out.println(&quot;添加成功&quot;);</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">  System.out.println(&quot;添加失败&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line"> JDBCUtil.release(conn, st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通用的增删改方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.commoncrud;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">public class CommonCRUDUtil &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testUpdate() &#123;</span><br><span class="line">//update(&quot;insert into account values(null, ?, ?)&quot; , &quot;dashu&quot;, 10);</span><br><span class="line"></span><br><span class="line">//update(&quot;delete from account where id = ?&quot;, 1);</span><br><span class="line"></span><br><span class="line">update(&quot;update account set money = ? where id = ?&quot;, 1999, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通用的增删改功能</span><br><span class="line">public void update(String sql, Object ...args) &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">conn = JDBCUtil02.getConn();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">for(int i = 0; i&lt;args.length; i++) &#123;</span><br><span class="line">ps.setObject(i+1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.sql</span><br><span class="line">接口 DatabaseMetaData</span><br><span class="line">所有超级接口: Wrapper</span><br><span class="line"></span><br><span class="line">public interface DatabaseMetaData extends Wrapper</span><br><span class="line">数据库的整体综合信息</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">getCatalogs()</span><br><span class="line">可以获取在数据库中使用的类别名称</span><br><span class="line"></span><br><span class="line">getCatalogSeparator()</span><br><span class="line">获取此数据库用作类别和表名之间的分隔符的String</span><br><span class="line"></span><br><span class="line">getCatalogTerm()</span><br><span class="line">获取数据库供应商用于&quot;catalog&quot;的首选手语</span><br><span class="line"></span><br><span class="line">getClientInfoProperties()</span><br><span class="line">获取驱动程序支持的客户端信息属性的列表</span><br><span class="line"></span><br><span class="line">getConnection()</span><br><span class="line">获取此元数据对象所产生的连接</span><br><span class="line"></span><br><span class="line">getDatabaseMajorVersion()</span><br><span class="line">获取底层数据库的主版本号</span><br><span class="line"></span><br><span class="line">getDatabaseProductName()</span><br><span class="line">获取此数据库产品的名称</span><br><span class="line"></span><br><span class="line">getDatabaseProductVersion()</span><br><span class="line">获取此数据库产品的版本号</span><br><span class="line"></span><br><span class="line">getDefaultTransactionIsolation()</span><br><span class="line">获取此数据库的默认事务隔离级别</span><br><span class="line"></span><br><span class="line">getDriverMajorVersion()</span><br><span class="line">获取此JDBC驱动程序的主版本号</span><br><span class="line"></span><br><span class="line">getDriverMinorVersion()</span><br><span class="line">获取此JDBC驱动程序的次版本号</span><br><span class="line"></span><br><span class="line">getDriverName()</span><br><span class="line">获取此JDBC驱动程序的名称</span><br><span class="line"></span><br><span class="line">getDriverVersion()</span><br><span class="line">获取此JDBC驱动程序的String形式的版本号</span><br></pre></td></tr></table></figure><p>参数的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.sql</span><br><span class="line">接口 ParameterMetaData</span><br><span class="line">public interface ParameterMetaData extends Wrapper</span><br><span class="line">获取PreparedStatement对象中每个参数标记和属性信息的对象.</span><br></pre></td></tr></table></figure><p>方法的摘要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">getParameterClassName(int param)</span><br><span class="line">获取Java类的完全限定名称</span><br><span class="line"></span><br><span class="line">getParameterCount()</span><br><span class="line">获取PreparedStatement对象中的参数数量</span><br><span class="line"></span><br><span class="line">getParameterMode(int param)</span><br><span class="line">获取指定参数的SQL类型</span><br><span class="line"></span><br><span class="line">getParameterTypeName(int param)</span><br><span class="line">获取指定参数的特定于数据库的类型名称</span><br><span class="line"></span><br><span class="line">getPrecision(int param)</span><br><span class="line">获取指定参数的指定两列大小</span><br><span class="line"></span><br><span class="line">getScale(int param)</span><br><span class="line">获取指定参数的小数点右边的位数</span><br><span class="line"></span><br><span class="line">isNullable(int param)</span><br><span class="line">获取是否允许在指定参数中使用null值</span><br><span class="line"></span><br><span class="line">isSigned(int param)</span><br><span class="line">获取指定参数的值是否可以是带符号的数字</span><br></pre></td></tr></table></figure><p>结果集元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.sql</span><br><span class="line">接口 ResultSetMetaData</span><br><span class="line">public interface ResultSetMetaData extends Wrapper</span><br></pre></td></tr></table></figure><p>用来描述数据的数据,叫做元数据</p><p>数据库元数据,参数元数据,结果集元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.commoncrud;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ParameterMetaData;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">public class CommonCRUDUtil &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testUpdate() &#123;</span><br><span class="line">//update(&quot;insert into account values(null, ?, ?)&quot; , &quot;dashu&quot;, 10);</span><br><span class="line"></span><br><span class="line">//update(&quot;delete from account where id = ?&quot;, 1);</span><br><span class="line"></span><br><span class="line">update(&quot;update account set money = ? where id = ?&quot;, 1999, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通用的增删改功能</span><br><span class="line">public void update(String sql, Object ...args) &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">conn = JDBCUtil02.getConn();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">// 元数据</span><br><span class="line">// 获取的有几个问好</span><br><span class="line">ParameterMetaData metaData = ps.getParameterMetaData();</span><br><span class="line">int count = metaData.getParameterCount();</span><br><span class="line"></span><br><span class="line">for(int i = 0; i&lt;count; i++) &#123;</span><br><span class="line">ps.setObject(i+1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TestDBUtils.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 删除</span><br><span class="line">queryRunner.update(&quot;delete from account where id = ?&quot;, 4);</span><br><span class="line">// 更新</span><br><span class="line">queryRunner.update(&quot;update account set money=? where id=?&quot;, 10000, 5);</span><br><span class="line"></span><br><span class="line">// 执行查询,查询到的数据还是在那个result里面然后调用下面的handle方法,由用户手动封装</span><br><span class="line">Account account = queryRunner.query(&quot;select * from account where id =?&quot;, new ResultSetHandler&lt;Account&gt;()&#123;</span><br><span class="line">@Override</span><br><span class="line"> public Account handle(ResultSet rs) throws SQLException&#123;</span><br><span class="line"> Account account = new Account();</span><br><span class="line"> while(rs.next())&#123;</span><br><span class="line">  String name = rs.getString(&quot;name&quot;);</span><br><span class="line">  int money = rs.getInt(&quot;money&quot;);</span><br><span class="line">  account.setName(name);</span><br><span class="line">  account.setMoney(money);</span><br><span class="line"> &#125;</span><br><span class="line">  return account;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;, 6);</span><br></pre></td></tr></table></figure><blockquote><p>快速查询方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testQuery()&#123;</span><br><span class="line"> query(&quot;select * from account where id = ?&quot;, 接口的实现类对象, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A implements ResultSetHandler &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void handle(ResultSet rs) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通用的查询方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.commoncrud;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ParameterMetaData;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Account;</span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">public class CommonCRUDUtil &#123;</span><br><span class="line">class A implements ResultSetHandler&lt;Account&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Account handle(ResultSet rs) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">Account account = new Account();</span><br><span class="line">if(rs.next()) &#123;</span><br><span class="line">String name = rs.getString(&quot;name&quot;);</span><br><span class="line">int money = rs.getInt(&quot;money&quot;);</span><br><span class="line"></span><br><span class="line">account.setName(name);</span><br><span class="line">account.setMoney(money);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return account;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*@Override</span><br><span class="line">public Object handle(ResultSet rs) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">/*@Override</span><br><span class="line">public void handle(ResultSet rs) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">String name = rs.getString(&quot;name&quot;);</span><br><span class="line">int money = rs.getInt(&quot;money&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQuery() &#123;</span><br><span class="line">/*query(&quot;select * from account where id=?&quot;, new ResultSetHandler() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void handle(ResultSet rs) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;,3);*/</span><br><span class="line"></span><br><span class="line">/*Account account = query(&quot;select * from account where id = ?&quot;, new A(), 2);</span><br><span class="line"></span><br><span class="line">System.out.println(account.toString());*/</span><br><span class="line"></span><br><span class="line">query(&quot;select * from account where id = ?&quot;, new ResultSetHandler&lt;Account&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Account handle(ResultSet rs) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;&#125;, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testUpdate() &#123;</span><br><span class="line">//update(&quot;insert into account values(null, ?, ?)&quot; , &quot;dashu&quot;, 10);</span><br><span class="line"></span><br><span class="line">//update(&quot;delete from account where id = ?&quot;, 1);</span><br><span class="line"></span><br><span class="line">//update(&quot;update account set money = ? where id = ?&quot;, 1999, 2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public &lt;T&gt; T query(String sql, ResultSetHandler&lt;T&gt; handler, Object... args) &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">conn = JDBCUtil02.getConn();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">// 元数据</span><br><span class="line">// 获取的有几个问好</span><br><span class="line">ParameterMetaData metaData = ps.getParameterMetaData();</span><br><span class="line">int count = metaData.getParameterCount();</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">ps.setObject(i + 1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 执行查询工作,然后得到结果集</span><br><span class="line">ResultSet rs = ps.executeQuery();</span><br><span class="line">// 把结果集丢给调用者, 让它去封装数据,返回封装数据</span><br><span class="line">T t = (T) handler.handle(rs);</span><br><span class="line">return t;</span><br><span class="line"></span><br><span class="line">/*while(rs.next()) &#123;</span><br><span class="line">rs.getInt(&quot;id&quot;);</span><br><span class="line">rs.getString(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通用的增删改功能</span><br><span class="line">/*public void update(String sql, Object... args) &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">conn = JDBCUtil02.getConn();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">// 元数据</span><br><span class="line">// 获取的有几个问好</span><br><span class="line">ParameterMetaData metaData = ps.getParameterMetaData();</span><br><span class="line">int count = metaData.getParameterCount();</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">ps.setObject(i + 1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">public class Account &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int money;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getMoney() &#123;</span><br><span class="line">return money;</span><br><span class="line">&#125;</span><br><span class="line">public void setMoney(int money) &#123;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Account [name=&quot; + name + &quot;, money=&quot; + money + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.commoncrud;</span><br><span class="line"></span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line">public interface ResultSetHandler&lt;T&gt; &#123;</span><br><span class="line">// 数据封装的规则,规范</span><br><span class="line">T handle(ResultSet rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JSP开发模式</p></blockquote><p>mvc的设计模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javaBean数据的封装+jsp</span><br><span class="line">可以在jsp中直接写java代码</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"> 封装数据</span><br><span class="line"> 执行业务</span><br><span class="line"> 准备数据</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">特点维护比较难,jsp的页面代码会臃肿</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">servlet + javabean + jsp</span><br><span class="line"></span><br><span class="line">mvc模式:</span><br><span class="line"></span><br><span class="line">m:model</span><br><span class="line">模型层</span><br><span class="line">封装数据javabean</span><br><span class="line"></span><br><span class="line">v:view</span><br><span class="line">视图层</span><br><span class="line">jsp专注显示</span><br><span class="line"></span><br><span class="line">c:controller</span><br><span class="line">控制层</span><br><span class="line">servlet接收页面的请求,找模型层去处理</span><br></pre></td></tr></table></figure><blockquote><p>三层架构</p></blockquote><p>客户端,web层,业务逻辑层,数据访问层</p><p>servlet/jsp web层<br>javabean 业务逻辑层<br>dao 数据访问层</p><p>web层 对应 controller view</p><p>业务逻辑层 对应 model</p><p>数据访问层 对应 model</p><p>mvc模式: controller view model</p><p>controller: 接收请求,调用模型层出来数据,反馈给view</p><p>view: 用于显示</p><p>model: 数据的封装,数据的处理</p><blockquote><p>学生管理系统中的增删查改,分页,模糊查询</p></blockquote><h2 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h2><p>欢迎使用学生管理系统, 按姓名查询, 按性别查询, 添加<br>有编号,姓名 ,性别,电话,生日,爱好,简介,操作.</p><blockquote><p>创建数据库</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ca0b42a2f15064b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据库"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d446c322b1b80e9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ctrl+t"></p><blockquote><p>dao环境搭建</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b8d5445d8b43d6b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;&lt;a href=&quot;StudentListServlet&quot;&gt;显示所有学生列表&lt;/a&gt;&lt;/h3&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * list&lt;Student&gt;</span><br><span class="line"> * */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是studentdao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">String sql = &quot;select * from stu&quot;;</span><br><span class="line">List&lt;Student&gt; list = runner.query(sql, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生封装的对象bean</span><br><span class="line"> * 根据表写</span><br><span class="line"> * */</span><br><span class="line">public class Student &#123;</span><br><span class="line">private int sid;</span><br><span class="line">private String sname;</span><br><span class="line">private String gender;</span><br><span class="line">private String phone;</span><br><span class="line">private String hobby;</span><br><span class="line">private String info;</span><br><span class="line">private Date birthday;</span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public String getGender() &#123;</span><br><span class="line">return gender;</span><br><span class="line">&#125;</span><br><span class="line">public void setGender(String gender) &#123;</span><br><span class="line">this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">public String getPhone() &#123;</span><br><span class="line">return phone;</span><br><span class="line">&#125;</span><br><span class="line">public void setPhone(String phone) &#123;</span><br><span class="line">this.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line">public String getHobby() &#123;</span><br><span class="line">return hobby;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobby(String hobby) &#123;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line">public String getInfo() &#123;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line">public void setInfo(String info) &#123;</span><br><span class="line">this.info = info;</span><br><span class="line">&#125;</span><br><span class="line">public Date getBirthday() &#123;</span><br><span class="line">return birthday;</span><br><span class="line">&#125;</span><br><span class="line">public void setBirthday(Date birthday) &#123;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class StudentListServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class JDBCUtil02 &#123;</span><br><span class="line"></span><br><span class="line">static ComboPooledDataSource dataSource = null;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">dataSource = new ComboPooledDataSource();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static DataSource getDataSource() &#123;</span><br><span class="line">return dataSource;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 获取连接对象</span><br><span class="line"> * @return</span><br><span class="line"> * @throws SQLException </span><br><span class="line"> */</span><br><span class="line">public static Connection getConn() throws SQLException&#123;</span><br><span class="line"></span><br><span class="line">return dataSource.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 释放资源</span><br><span class="line"> * @param conn</span><br><span class="line"> * @param st</span><br><span class="line"> * @param rs</span><br><span class="line"> */</span><br><span class="line">public static void release(Connection conn , Statement st , ResultSet rs)&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line">public static void release(Connection conn , Statement st)&#123;</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static void closeRs(ResultSet rs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(rs != null)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">rs = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeSt(Statement st)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(st != null)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">st = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeConn(Connection conn)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(conn != null)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">conn = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>service层</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-3592e4b99507c4a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="显示"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d11add5ecea31ebd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="显示"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dao只做一件事,数据操作层</span><br><span class="line">service是业务层</span><br></pre></td></tr></table></figure><blockquote><p>查询数据</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a4c00419da20c5ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * list&lt;Student&gt;</span><br><span class="line"> * */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *这是StudentDao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">return runner.query(&quot;select * from stu&quot;, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生封装的对象bean</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">private int sid;</span><br><span class="line">private String sname;</span><br><span class="line">private String gender;</span><br><span class="line">private String phone;</span><br><span class="line">private String hobby;</span><br><span class="line">private String info;</span><br><span class="line">private Date birthday;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(int sid, String sname, String gender, String phone, String hobby, String info, Date birthday) &#123;</span><br><span class="line">super();</span><br><span class="line">this.sid = sid;</span><br><span class="line">this.sname = sname;</span><br><span class="line">this.gender = gender;</span><br><span class="line">this.phone = phone;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">this.info = info;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public String getGender() &#123;</span><br><span class="line">return gender;</span><br><span class="line">&#125;</span><br><span class="line">public void setGender(String gender) &#123;</span><br><span class="line">this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">public String getPhone() &#123;</span><br><span class="line">return phone;</span><br><span class="line">&#125;</span><br><span class="line">public void setPhone(String phone) &#123;</span><br><span class="line">this.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line">public String getHobby() &#123;</span><br><span class="line">return hobby;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobby(String hobby) &#123;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line">public String getInfo() &#123;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line">public void setInfo(String info) &#123;</span><br><span class="line">this.info = info;</span><br><span class="line">&#125;</span><br><span class="line">public Date getBirthday() &#123;</span><br><span class="line">return birthday;</span><br><span class="line">&#125;</span><br><span class="line">public void setBirthday(Date birthday) &#123;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;, gender=&quot; + gender + &quot;, phone=&quot; + phone + &quot;, hobby=&quot;</span><br><span class="line">+ hobby + &quot;, info=&quot; + info + &quot;, birthday=&quot; + birthday + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生的业务处理规范</span><br><span class="line"> * */</span><br><span class="line">public interface StudentService &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * list&lt;Student&gt;</span><br><span class="line"> * */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">public class StudentListServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 查询所有的学生</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">List&lt;Student&gt; list = service.findAll();</span><br><span class="line">// 把数据存储到作用域中</span><br><span class="line">request.setAttribute(&quot;list&quot;, list);</span><br><span class="line"></span><br><span class="line">// 跳转页面</span><br><span class="line">request.getRequestDispatcher(&quot;list.jsp&quot;).forward(request,response);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class JDBCUtil02 &#123;</span><br><span class="line"></span><br><span class="line">static ComboPooledDataSource dataSource = null;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">dataSource = new ComboPooledDataSource();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static DataSource getDataSource() &#123;</span><br><span class="line">return dataSource;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 获取连接对象</span><br><span class="line"> * @return</span><br><span class="line"> * @throws SQLException </span><br><span class="line"> */</span><br><span class="line">public static Connection getConn() throws SQLException&#123;</span><br><span class="line"></span><br><span class="line">return dataSource.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 释放资源</span><br><span class="line"> * @param conn</span><br><span class="line"> * @param st</span><br><span class="line"> * @param rs</span><br><span class="line"> */</span><br><span class="line">public static void release(Connection conn , Statement st , ResultSet rs)&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line">public static void release(Connection conn , Statement st)&#123;</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static void closeRs(ResultSet rs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(rs != null)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">rs = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeSt(Statement st)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(st != null)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">st = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeConn(Connection conn)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(conn != null)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">conn = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结业务逻辑"><a href="#小结业务逻辑" class="headerlink" title="小结业务逻辑"></a>小结业务逻辑</h2><p>先写一个jsp页面,有个链接<code>&lt;a href=&quot;StudentListServlet&quot;&gt;&lt;/a&gt;</code>写个Servlet,接收请求,去调用Service,由service去调用dao,写dao,然后做dao实现,再写Service,做Service的实现,在servlet存储数据,做出页面响应,在list.jsp上显示数据.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b1bfd6455610171a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dao"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-45251a153841a9d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加效果"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f609771ec475ec19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加按钮"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;添加学生页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;AddServlet&quot;&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;600&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;sname&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot;&gt;男 &lt;input</span><br><span class="line">type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;&gt;女&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;电话&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;phone&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;birthday&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;游泳&quot;&gt;游泳 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;篮球&quot;&gt;篮球 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;足球&quot;&gt;足球 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;看书&quot;&gt;看书 &lt;input</span><br><span class="line">type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;写字&quot;&gt;写字&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;简介&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;textarea name=&quot;info&quot; rows=&quot;3&quot; cols=&quot;20&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是针对学生表的数据访问</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * list&lt;Student&gt;</span><br><span class="line"> * */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.util.JDBCUtil02;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *这是StudentDao的实现,针对前面定义的规范,做出具体的实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">return runner.query(&quot;select * from stu&quot;, new BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">QueryRunner runner = new QueryRunner(JDBCUtil02.getDataSource());</span><br><span class="line">runner.update(&quot;insert into stu values(null, ?,?,?,?,?,?)&quot;, </span><br><span class="line">student.getSname(), </span><br><span class="line">student.getGender(),</span><br><span class="line">student.getPhone(), </span><br><span class="line">student.getBirthday(), </span><br><span class="line">student.getHobby(), </span><br><span class="line">student.getInfo()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生封装的对象bean</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">private int sid;</span><br><span class="line">private String sname;</span><br><span class="line">private String gender;</span><br><span class="line">private String phone;</span><br><span class="line">private String hobby;</span><br><span class="line">private String info;</span><br><span class="line">private Date birthday;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(int sid, String sname, String gender, String phone, String hobby, String info, Date birthday) &#123;</span><br><span class="line">super();</span><br><span class="line">this.sid = sid;</span><br><span class="line">this.sname = sname;</span><br><span class="line">this.gender = gender;</span><br><span class="line">this.phone = phone;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">this.info = info;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Student(String sname, String gender, String phone, String hobby, String info, Date birthday) &#123;</span><br><span class="line">super();</span><br><span class="line">this.sname = sname;</span><br><span class="line">this.gender = gender;</span><br><span class="line">this.phone = phone;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">this.info = info;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public String getGender() &#123;</span><br><span class="line">return gender;</span><br><span class="line">&#125;</span><br><span class="line">public void setGender(String gender) &#123;</span><br><span class="line">this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">public String getPhone() &#123;</span><br><span class="line">return phone;</span><br><span class="line">&#125;</span><br><span class="line">public void setPhone(String phone) &#123;</span><br><span class="line">this.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line">public String getHobby() &#123;</span><br><span class="line">return hobby;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobby(String hobby) &#123;</span><br><span class="line">this.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line">public String getInfo() &#123;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line">public void setInfo(String info) &#123;</span><br><span class="line">this.info = info;</span><br><span class="line">&#125;</span><br><span class="line">public Date getBirthday() &#123;</span><br><span class="line">return birthday;</span><br><span class="line">&#125;</span><br><span class="line">public void setBirthday(Date birthday) &#123;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;, gender=&quot; + gender + &quot;, phone=&quot; + phone + &quot;, hobby=&quot;</span><br><span class="line">+ hobby + &quot;, info=&quot; + info + &quot;, birthday=&quot; + birthday + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是学生的业务处理规范</span><br><span class="line"> * */</span><br><span class="line">public interface StudentService &#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 查询所有学生</span><br><span class="line"> * list&lt;Student&gt;</span><br><span class="line"> * */</span><br><span class="line">List&lt;Student&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">void insert(Student student) throws SQLException ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.service.impl;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.dao.StudentDao;</span><br><span class="line">import com.dashucoding.dao.impl.StudentDaoImpl;</span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">/*</span><br><span class="line"> * 这是学生业务实现</span><br><span class="line"> * */</span><br><span class="line">public class StudentServiceImpl implements StudentService&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Student&gt; findAll() throws SQLException &#123;</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">return dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert(Student student) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">StudentDao dao = new StudentDaoImpl();</span><br><span class="line">dao.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-618effe10e976b32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c660ad13183515c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Student;</span><br><span class="line">import com.dashucoding.service.StudentService;</span><br><span class="line">import com.dashucoding.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用于处理学生的添加请求</span><br><span class="line"> */</span><br><span class="line">public class AddServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">// 1. 获取客户端提交上来的数据</span><br><span class="line">String sname = request.getParameter(&quot;sname&quot;);</span><br><span class="line">String gender = request.getParameter(&quot;gender&quot;);</span><br><span class="line">String phone = request.getParameter(&quot;phone&quot;);</span><br><span class="line">String birthday = request.getParameter(&quot;birthday&quot;);</span><br><span class="line">String info = request.getParameter(&quot;info&quot;);</span><br><span class="line">// String hobby = request.getParameter(&quot;hobby&quot;);//hobby : 游泳，写字， 足球。</span><br><span class="line">String[] h = request.getParameterValues(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">String hobby = Arrays.toString(h);</span><br><span class="line">hobby = hobby.substring(1, hobby.length() - 1);</span><br><span class="line"></span><br><span class="line">// 2. 添加到数据库</span><br><span class="line">// string -- date</span><br><span class="line">Date date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(birthday);</span><br><span class="line"></span><br><span class="line">Student student = new Student(sname, gender, phone, hobby, info, date);</span><br><span class="line">StudentService service = new StudentServiceImpl();</span><br><span class="line">service.insert(student);</span><br><span class="line"></span><br><span class="line">// 3. 跳转到列表页</span><br><span class="line">request.getRequestDispatcher(&quot;StudentListServlet&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要的jar包,都在这.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-9181932d3b49f07d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="群里"></p><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>好了，欢迎在留言区留言，与大家分享你的经验和心得。</p><p>感谢你学习今天的内容，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友，感谢。</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-55e49c6e25ec6604.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第80节:Java中的MVC设计模式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第79节:Java中的一些要点</title>
    <link href="https://huangguangda.github.io/2019/01/29/1/"/>
    <id>https://huangguangda.github.io/2019/01/29/1/</id>
    <published>2019-01-29T13:26:57.000Z</published>
    <updated>2019-02-01T13:32:11.704Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-845c571a65c9a3e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><blockquote><p>第79节:Java中一些要点</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些知识点忘了没,可以通过一个点引出什么内容呢?做出自己的思维导图,看看自己到了哪一步了呢</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>如果有人问jre,jdk,jvm是什么,你怎么回答呢?</p><p>jre的英文是java runtime environment ,包含有java虚拟机,库函数,java运行应用程序和applet的要的文件.java 运行环境功能主要有加载代码,校验代码,执行代码.jre是java运行时环境,有jvm和其他一些java核心api,只要有jre就可以运行java程序.jre含jvm,运行java程序需要jre</p><p>jdk的英文是java development kit包含jre,编译器和调式器等.jdk是jre的超集.要进行开发java程序需要安装jdk.</p><p>jvm是一种规范,是一个虚拟的用于执行字节码的计算机.jvm是负责java字节码解释运行的,jvm实现了跨平台,可移植的功能.</p><blockquote><p>一次编译，随处运行</p></blockquote><p>源程序(.java文件)-&gt;java编译器-&gt;字节码(.class文件)</p><p>jre,java运行环境,类装载器,字节码校验器,解释器.</p><blockquote><p>什么是变量?</p></blockquote><p>变量是用来操作存储空间中的数据的,是代指存储空间,位置一定,存储空间中的数据类型不确定,就有了数据类型,放置的值也不确定.类型可以是基本类型,也可以是引用类型.</p><p>变量:局部变量(方法或语句块内部定义的变量),实例变量(方法外部,类的内部定义的变量),静态变量(使用static).</p><p>那么讲了java的变量,那么讲究数据类型,在java中,数据类型分为两大类,一为基本数据类型,二位引用数据类型.</p><p>数据类型的定义了8种基本数据类型,我们可以分为3类来了解,一种为逻辑类型,一种的文本类型,一种是数值类型:</p><p>逻辑类型记住是boolean就行,文本类型记住是char类型就行,而数值类型记住顺序一下子就可以记住,byte,short,int,long,foloat,double,从小到大的顺序.</p><p>类型类型分基本数据类型和引用数据类型</p><blockquote><p>基本数据类型分,数值型,字符型,布尔型.</p></blockquote><p>数值型分,整数类型和浮点类型.那么整数类型有byte,short,int,long,浮点类型有float,double.</p><p>float为单精度类型,double为双精度类型.</p><p>字符型的有char. 布尔型的有boolean.</p><p>boolean类型有两个值为true和false.用来判断逻辑条件的,一般用于程序流程控制.</p><p>字符型,单引号用来表示字符类型的常量,’a’为一个字符.char类型可以在unicode编码表中的 字符.char可以用来整数运算.</p><blockquote><p>引用数据类型分,类class,接口interface,数组</p></blockquote><p>注意:引用类型指的就是对象的地址</p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td><code>byte</code></td><td>1字节</td><td>-128到127</td></tr><tr><td><code>short</code></td><td>2字节</td><td>-215到214</td></tr><tr><td><code>int</code></td><td>4字节</td><td>略</td></tr><tr><td><code>long</code></td><td>8字节</td><td>略</td></tr><tr><td><code>float</code></td><td>4字节</td><td>略</td></tr><tr><td><code>double</code></td><td>8字节</td><td>略</td></tr></tbody></table><blockquote><p>进制数</p></blockquote><p>十进制整数,八进制整数(以 0 开头),十六进制数(以0x 或 0X 开头).</p><blockquote><p>字符集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iso8859-1-&gt;big5,gb2312,unicode  gb2312-&gt;gbk</span><br></pre></td></tr></table></figure><blockquote><p>方法:定义类和对象的动态行为特征的抽象</p></blockquote><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">算术运算符: +，-，*，/，%，++，--</span><br><span class="line">关系运算符: &gt;，&lt;，&gt;=，&lt;=，==，!= instanceof</span><br><span class="line">逻辑运算符: &amp;&amp;，||，!</span><br><span class="line">位运算符: &amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>面向对象和面向过程</p></blockquote><p>面向过程的思维模式是比较简单的线性思维.<br>面向对象的思维模式适合处理复杂的问题.</p><blockquote><p>构造器用于构造类的实例.<br>构造器的作用就是初始化一些数据.</p></blockquote><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>用static声明的成员变量为静态成员变量,用static声明的方法为静态方法.</p><blockquote><p>内存</p></blockquote><p>栈:局部变量放在栈中,栈是一种连续的内存空间,由系统分配.</p><p>堆:通过new的对象都在,是不连续的内存空间,速度慢.</p><p>方法区:用来存放程序中不变和唯一的内容,方法区也是堆,用于存放类的代码信息,static变量,和常量池.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 常量池</span><br><span class="line">public class Student &#123;</span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> public void study()&#123;</span><br><span class="line">  System.out.println(&quot;学习&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> public void sayHello(String sname)&#123;</span><br><span class="line">  System.out.println(&quot;大帅哥&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line"> public static void main(String[] args)&#123;</span><br><span class="line">  // 类加载器Class Loader</span><br><span class="line">  // 堆中创建一个student对象</span><br><span class="line">  Student s1 = new Student();</span><br><span class="line"> // 创建字符串常量,放入常量池中</span><br><span class="line"> s1.name = &quot;大帅哥&quot;;</span><br><span class="line"> // 通过s1找到student对象</span><br><span class="line"> s1.study();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>栈自动分配连续的内存空间,后进先出,放入的都是局部变量,堆是不连续的内存空间,不像栈按照子弹夹一样,方法区也是堆,里面存放的都是类的代码信息,static 变量和常量池.</p><blockquote><p>抽象方法</p></blockquote><p>抽象方法用abstract修饰,没有方法体,需要用子类来重写</p><p>记住:抽象类不能进行实例化,抽象类可以有属性,方法和构造方法,但构造方法不能用new实例,需要用来被子类调用的.抽象类是用来被继承的,抽象方法必须由子类实现.</p><p>定义接口:</p><p>格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public或默认 interface 接口名 extends (接口可以多)</span><br><span class="line">&#123;</span><br><span class="line"> public static final 常量</span><br><span class="line"> public abstract 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>内部类</p></blockquote><p>一个类放在另一个类的内部定义为内部类.</p><p>内部类用来干嘛的?</p><p>提供更好的封装,让外部类直接进行访问,内部类可以访问外部类的私有属性.而外部类不能访问内部类的内部属性.</p><p>内部类分:匿名内部类,成员内部类,非静态内部类</p><blockquote><p>非静态内部类可以使用外部类的成员,而外部类不能访问非静态内部类的成员</p></blockquote><blockquote><p>静态成员不能访问非静态成员</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new InnerClass()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Outer.inner name = OuterObject.new Inner()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.变量名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名.this.变量名</span><br></pre></td></tr></table></figure><p>访问修饰符:</p><p>private在同一个类中<br>default在同一个类中,在同一个包中<br>protected在同一个类中,在同一个包中,在子类中<br>public 公共都可以</p><blockquote><p>多态</p></blockquote><p>指不同类的对象对同一件事情进行不同的效果反应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">abstract class Student&#123;</span><br><span class="line"> public abstract void study();</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">class Student1 extends Student &#123;</span><br><span class="line"> @Override</span><br><span class="line"> public void study()&#123;</span><br><span class="line">  System.out.println(&quot;学习1&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student2 extends Student &#123;</span><br><span class="line"> @Override</span><br><span class="line"> public void study()&#123;</span><br><span class="line">  System.out.println(&quot;学习2&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的特点:</p><p>继承,有方法的重写,父类引用指向子类对象引用</p><blockquote><p>基本数据类型的包装类</p></blockquote><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><blockquote><p>StringBuilder 与 StringBuffer 区别</p></blockquote><p>StringBuilder 可变字符串,线程不太安全,效率高<br>StringBuffer 可变字符串,线程安全,效率低<br>String 不可变字符串,final修饰了string类,所以不能被继承,修饰了char value[],所以字符串的值不可以改变,记住final没有修饰string的引用,就会存在内存空间的浪费.</p><blockquote><p>string</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = &quot;大哥&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>io流</p></blockquote><p>io流的分类为输入流和输出流</p><p>按数据分</p><p>字节流是按照二进制,字符流是按照文本文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">字节流:</span><br><span class="line"></span><br><span class="line">输入流 InputStream </span><br><span class="line">read(byte[] b)</span><br><span class="line">read(byte[] b, int off, int len)</span><br><span class="line">FileInputStream()</span><br><span class="line">InputStream FileInputStream</span><br><span class="line"></span><br><span class="line">输出流:OutputStream</span><br><span class="line">write(byte[] b)</span><br><span class="line">write(byte[] b, int off, int len) </span><br><span class="line">FileOutputStream</span><br><span class="line">OutputStream FileOutputStream</span><br><span class="line"></span><br><span class="line">字符流</span><br><span class="line"></span><br><span class="line">输入流 Reader</span><br><span class="line">read(char[] c)</span><br><span class="line">read(char[] c, int off, int len) </span><br><span class="line">FileReader()</span><br><span class="line">Reader FileReader</span><br><span class="line"></span><br><span class="line">输出流 Writer</span><br><span class="line">write(char[] c)</span><br><span class="line">write(char[] c, int off, int len) </span><br><span class="line">FileWriter()</span><br><span class="line">Writer FileWriter</span><br><span class="line"></span><br><span class="line">处理流</span><br><span class="line"></span><br><span class="line">缓冲流</span><br><span class="line"></span><br><span class="line">字节缓冲流</span><br><span class="line">BufferedInputStream</span><br><span class="line">BufferedOutputStream</span><br><span class="line"></span><br><span class="line">字符缓冲流</span><br><span class="line">BufferedReader</span><br><span class="line">BufferedWriter</span><br><span class="line"></span><br><span class="line">输入流:InputStream</span><br><span class="line">输出流:OutputStream</span><br><span class="line"></span><br><span class="line">字节流搞定一切</span><br><span class="line">BufferedInputStream -&gt; FileInputStream -&gt; File</span><br><span class="line">BufferedOutputStream -&gt; FileOutputStream -&gt; File</span><br><span class="line"></span><br><span class="line">通过解码</span><br><span class="line">InputStreamReader</span><br><span class="line">OutputStreamWriter</span><br><span class="line"></span><br><span class="line">通过解码变字符流,只能处理纯文本</span><br><span class="line"></span><br><span class="line">BufferedReader -&gt; FileReader -&gt; File</span><br><span class="line">BufferedWriter -&gt; FileWriter -&gt; File</span><br><span class="line"></span><br><span class="line">Reader Writer</span><br></pre></td></tr></table></figure><blockquote><p>线程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Thread</span><br><span class="line">sleep()</span><br><span class="line">yield()</span><br><span class="line">stop()</span><br><span class="line">start()</span><br><span class="line">interrpet()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>一些你需要重新复习的一些基础内容,写出自己的思维导图看看哦!</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-845c571a65c9a3e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第79节:Java中一些要点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第78节:Java中的网络编程(上)</title>
    <link href="https://huangguangda.github.io/2019/01/28/1/"/>
    <id>https://huangguangda.github.io/2019/01/28/1/</id>
    <published>2019-01-28T09:57:12.000Z</published>
    <updated>2019-02-01T13:32:06.094Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><p><img src="/images/40.jpg" style="width: 100%;height: 100%"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b57dd3323b6ccb8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"><br><a id="more"></a></p><blockquote><p>第78节:Java中的网络编程(上)</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网络编程涉及ip,端口,协议,tcp和udp的了解,和对socket通信的网络细节.</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-50789192d99799ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络模型"></p><blockquote><p><code>OSI</code>开放系统互连</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c2ede227c80d869e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络通讯要素"></p><blockquote><p>网络编程指IO加网络</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-816157e087704a35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OSI模型"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d2160daadcd84aa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP/IP模型"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-1da2a3aa7bf372bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="描述"></p><p>TCP/IP模型:</p><ol><li>应用层</li><li>传输层</li><li>网际层</li><li>主机到网络层</li></ol><p>OSI模型:(封装) 网络1封包-&gt;网络2拆包</p><ol><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol><p>网络通讯要素:</p><ol><li>ip地址</li><li>端口号</li><li>传输协议</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/11158618-2ea41eb853a60c88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络通讯要素"></p><blockquote><p>主机名和ip地址是对应的,默认的主机名:localhost</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.net</span><br><span class="line">类 InetAddress</span><br><span class="line"></span><br><span class="line">java.lang.Object</span><br><span class="line">-&gt; java.net.InetAddress</span><br><span class="line"></span><br><span class="line">已实现的接口: Serializable</span><br><span class="line">已知子类: Inet4Address, Inet6Address</span><br><span class="line"></span><br><span class="line">public class InetAddress extends Object implements Serializable</span><br><span class="line">该类表示互联网协议ip地址</span><br></pre></td></tr></table></figure><p>ip地址是ip使用32或128位无符号数字,它是一种低级的协议,UDP和TCP协议都是在它的基础上构建的.</p><p>InetAddress的实例包含ip地址,相应的主机名</p><p>升级:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.net</span><br><span class="line">类 Inet6Address</span><br><span class="line"></span><br><span class="line">java.lang.Object</span><br><span class="line">-&gt; java.net.InetAddress</span><br><span class="line">-&gt; java.net.Inet6Address</span><br><span class="line"></span><br><span class="line">所有已实现的接口:Serializable</span><br><span class="line"></span><br><span class="line">public final class Inet6Address extends InetAddress</span><br><span class="line">该类表示互联网协议第6版地址</span><br></pre></td></tr></table></figure><blockquote><p>获取ip地址</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.ip;</span><br><span class="line"></span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class IPDemo &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws UnknownHostException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// ip地址对象 InetAddress</span><br><span class="line"></span><br><span class="line">// 获取本地主机地址对象</span><br><span class="line">InetAddress ip = InetAddress.getLocalHost();</span><br><span class="line">// 获取主机地址和主机名</span><br><span class="line">System.out.println(ip.getHostAddress() + &quot;:&quot; + ip.getHostName());</span><br><span class="line"></span><br><span class="line">InetAddress ip2 = InetAddress.getByName(&quot;192.168.2.151&quot;);</span><br><span class="line">// 获取主机地址和主机名</span><br><span class="line">System.out.println(ip.getHostAddress() + &quot;:&quot; + ip.getHostName());</span><br><span class="line"></span><br><span class="line">// 主机名是需要进行解析的</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="域名解析-查表"><a href="#域名解析-查表" class="headerlink" title="域名解析_查表"></a>域名解析_查表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-bc4899e493d6bd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-cc811063c51f33d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Internet协议属性"></p><p><code>DNS</code>域名解析服务器,宽带服务.配置<code>DNS</code>域名服务器主机,一个网址浏览要到它的Ip地址,要找到,就会把ip地址放到<code>DNS</code>域名解析服务器,供给本地使用宽带连接的使用,就可以在浏览器中找到ip地址,浏览网址了.</p><p>装<code>DNS</code>服务器软件,把你要浏览的地址ip写进去就可以了</p><blockquote><p>有些软件需要进行注册序列号?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// hosts 文件配置</span><br><span class="line">127.0.0.1 www.###.cn // 该域名地址</span><br></pre></td></tr></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口,为物理端口,一台电脑发送信息给另一台电脑的软件,发送ip地址完, 要带上端口号, 然后 对应另一台接收消息的软件 有个软件应用程序的数字标识,为逻辑端口, 这样就可以对应发送到另一台电脑上的对应软件接收消息.</p><p>我今天要去一家酒店去了地址,到了楼层, 要知道哪个房间号,才知道对应做什么事.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-19fbe726d213c6af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="端口号"></p><h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><p>TCP和UDP: 传输协议,传输规则,通讯规则,传输层.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5977c5a446f7a7f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP和UDP"></p><p><code>UDP</code>,不需要建立连接.我发给你信息,不管你在不在,我就发给你了.我送你东西,写个地址,发到你家就行.有个包,装东西,有大小限制,最多是64k的限制数据.(好处,速度快,不可靠)</p><p><code>TCP</code>发数据,要确保连接是不是畅通的.<code>TCP</code>是通过三次握手完成的,确保数据的连接畅通.用流行的话语:</p><p>完成了三次TCP握手:</p><p>女朋友发给男朋友<br>:”在吗?”</p><p>男朋友回复女朋友<br>:”我在!”</p><p>女朋友回复男朋友<br>:”我知道了”</p><p>这样爱情可靠,但是很浪费时间的,这样维护情感有点耗时,但是很可靠.</p><p><code>TCP</code>断开就不传了,<code>UDP</code>不管.电话来形容TCP,对讲机来形容UDP.</p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-8159ef69ec808926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Socket"></p><p><code>Socke &lt;-&gt; Socket</code><br>数据在两者之间通过IO传输,传输协议TCP或UDP</p><p>Socket就像两端插口,传输协议不一样,Socket插口也是由不同的类型的.数据在两者之间进行传输,数据是基于网络的io流进行传输的,传输过程就是传入和传出的过程</p><h2 id="UDP-发送端-out"><a href="#UDP-发送端-out" class="headerlink" title="UDP_发送端_out"></a>UDP_发送端_out</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.net</span><br><span class="line">Class DatagramSocket</span><br><span class="line">java.lang.Object</span><br><span class="line">-&gt; java.net.DatagramSocket</span><br><span class="line"></span><br><span class="line">All Implemented Interfaces: </span><br><span class="line">Closeable, AutoCloseable</span><br><span class="line">已知直接子类：</span><br><span class="line">MulticastSocket</span><br><span class="line"></span><br><span class="line">public class DatagramSocket extends Object implements Closeable</span><br><span class="line">该类为用于发送和接收数据报数据包的套接字,数据报套接字是分组传送服务的发送或接收点.</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket s = new DatagramSocket(null); </span><br><span class="line">s.bind(new InetSocketAddress(8888));</span><br><span class="line"></span><br><span class="line">DatagramSocket s = new DatagramSocket(8888);</span><br></pre></td></tr></table></figure><blockquote><p>构造方法摘要</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>DatagramSocket()</code></td><td>构造数据报套接字并将其绑定到本地主机上的任何可用端口</td></tr><tr><td><code>DatagramSocket(DatagramSocketImpl impl)</code></td><td>使用指定的<code>DatagramSocketImpl</code>创建一个未绑定的数据报套接字</td></tr><tr><td><code>DatagramSocket(int port)</code></td><td>构造数据报套接字并将其绑定到本地主机上的指定端口</td></tr><tr><td><code>DatagramSocket(int port, InetAddress laddr)</code></td><td>创建一个数据报套接字，绑定到指定的本地地址</td></tr><tr><td><code>DatagramSocket(SocketAddress bindaddr)</code></td><td>创建一个数据报套接字，绑定到指定的本地套接字地址</td></tr></tbody></table><p><code>receive(DatagramPacket p)</code>:从此套接字接收数据报包<br><code>send(DatagramPacket p)</code>:从此套接字发送数据报包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.net</span><br><span class="line">Class DatagramPacket</span><br><span class="line">java.lang.Object</span><br><span class="line">-&gt; java.net.DatagramPacket</span><br><span class="line"></span><br><span class="line">public final class DatagramPacket extends Object</span><br><span class="line">该类表示数据报包</span><br><span class="line"></span><br><span class="line">将数据封装到数据包中,数据包对象为DatagramPacket</span><br></pre></td></tr></table></figure><p>数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DatagramPacket(byte[] buf, int length)</span><br><span class="line">// 字节数组来的</span><br></pre></td></tr></table></figure><p>构造一个<code>DatagramPacket</code>用于接收长度的数据包<code>length</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">receive</span><br><span class="line">public void receive(DatagramPacket p) throws IOException</span><br><span class="line">此套接字接收数据报包</span><br><span class="line">返回, DatagramPacket的缓冲区填充了接收的数据</span><br><span class="line">数据报包也包含发送的ip地址和发送方的端口号</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-814a1f48ffc12f77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="发送端"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ed168e8b2149a7d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="接收端"></p><blockquote><p>UDPSend</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.udp;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class UDPSend &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;udp 发送端 run&quot;);</span><br><span class="line">// 先建立upd的socket 面向对象编程</span><br><span class="line">// 将数据封装到数据包中</span><br><span class="line">// 使用Socket对象的send方法</span><br><span class="line">// 将数据包发送出去</span><br><span class="line">// 关闭资源</span><br><span class="line">DatagramSocket ds = new DatagramSocket();</span><br><span class="line">// 数据</span><br><span class="line">String text = &quot;我是发送端,发送的数据&quot;;</span><br><span class="line">// 将数据转成字节数组</span><br><span class="line">byte[] buf = text.getBytes();</span><br><span class="line">// 将字节数据封装到数据包中</span><br><span class="line">DatagramPacket dp = new DatagramPacket(buf, buf.length, InetAddress.getByName(&quot;你的ip地址&quot;),10000);</span><br><span class="line">// 发送</span><br><span class="line">ds.send(dp);</span><br><span class="line">// 发完关掉,不然留着资源干嘛</span><br><span class="line">ds.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.udp;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line"></span><br><span class="line">public class UDPRece &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">System.out.println(&quot;udp 接收端 run&quot;);</span><br><span class="line">// 定义udp接收数据,显示在屏幕上</span><br><span class="line">// 先有插座嘛,udpsocket服务</span><br><span class="line">// 接收数据前 -&gt; 先将数据存储到数据包中</span><br><span class="line">// 先定义数据包</span><br><span class="line">// 数据包对象会获取数据包中的内容,发送端的ip和端口</span><br><span class="line">// 关闭资源</span><br><span class="line"></span><br><span class="line">// 有upsocket服务</span><br><span class="line">DatagramSocket ds = new DatagramSocket(10000);</span><br><span class="line">// 接收数据,接收字节数据</span><br><span class="line">byte[] buf = new byte[1024];</span><br><span class="line">// 定义包</span><br><span class="line">DatagramPacket dp = new DatagramPacket(buf, buf.length);</span><br><span class="line"></span><br><span class="line">// 还没存到数据包,进行存储</span><br><span class="line">ds.receive(dp); // 阻塞</span><br><span class="line"></span><br><span class="line">String ip = dp.getAddress().getHostAddress();</span><br><span class="line">int port = dp.getPort();</span><br><span class="line">String text = new String(dp.getData(),0,dp.getLength());</span><br><span class="line"></span><br><span class="line">System.out.println(ip+&quot; : &quot;+port+&quot; : &quot;+text);</span><br><span class="line">// 关闭资源</span><br><span class="line">ds.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>键盘录入</p></blockquote><p>发送端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.udp2;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class UDPSend2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;udp2 发送端 run&quot;);</span><br><span class="line">DatagramSocket ds = new DatagramSocket();</span><br><span class="line">// 数据来源于键盘录入</span><br><span class="line">BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">String line = null;</span><br><span class="line">while ((line = bufr.readLine()) != null) &#123;</span><br><span class="line">if(&quot;over&quot;.equals(line)) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">// 将数据转成字节数组</span><br><span class="line">byte[] buf = line.getBytes();</span><br><span class="line">// 将字节数据封装到数据包中</span><br><span class="line">DatagramPacket dp = new DatagramPacket(buf, buf.length, InetAddress.getByName(&quot;你的ip地址&quot;), 10002);</span><br><span class="line">ds.send(dp);</span><br><span class="line">// 发完关掉,不然留着资源干嘛</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ds.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.udp2;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line"></span><br><span class="line">public class UDPRece2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// 有upsocket服务</span><br><span class="line">System.out.println(&quot;udp2 接收端 run&quot;);</span><br><span class="line">DatagramSocket ds = new DatagramSocket(10002);</span><br><span class="line">while (true) &#123;</span><br><span class="line"></span><br><span class="line">// 接收数据,接收字节数据</span><br><span class="line">byte[] buf = new byte[1024];</span><br><span class="line">// 定义包</span><br><span class="line">DatagramPacket dp = new DatagramPacket(buf, buf.length);</span><br><span class="line"></span><br><span class="line">// 还没存到数据包,进行存储</span><br><span class="line">ds.receive(dp); // 阻塞</span><br><span class="line"></span><br><span class="line">String ip = dp.getAddress().getHostAddress();</span><br><span class="line">int port = dp.getPort();</span><br><span class="line">String text = new String(dp.getData(), 0, dp.getLength());</span><br><span class="line"></span><br><span class="line">System.out.println(ip + &quot; : &quot; + port + &quot; : &quot; + text);</span><br><span class="line">// 关闭资源</span><br><span class="line">&#125;</span><br><span class="line">// ds.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>群聊工程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变化ip地址192.168.1.255</span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a><code>TCP</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Socket()</span><br><span class="line">通过系统默认类型的SocketImpl创建未连接套接字</span><br><span class="line"></span><br><span class="line">Socket(InetAddress address, int port)</span><br><span class="line">创建一个流套接字并将其连接到指定ip地址的指定端口</span><br><span class="line"></span><br><span class="line">Socket(String host, int port)</span><br><span class="line">创建一个流套接字并将其连接到指定主机上的指定端口号</span><br><span class="line"></span><br><span class="line">getOutputStream()</span><br><span class="line"></span><br><span class="line">返回此套接字的输出流</span><br></pre></td></tr></table></figure><p>网络编程<em>TCP</em>服务端</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-caad9f6e6436fa94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.tcp;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class TCPClient &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws UnknownHostException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// 建立tcp的客户端socket 明确服务端的地址和端口</span><br><span class="line">// socket io流</span><br><span class="line">// 获取socket流</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;客户端运行&quot;);</span><br><span class="line">// 建立tcp的客户端socket,明确服务端的地址和端口</span><br><span class="line">Socket s = new Socket(&quot;ip地址&quot;,20003);</span><br><span class="line">// socket输出流数据发送</span><br><span class="line">OutputStream out = s.getOutputStream();</span><br><span class="line">// 通过socket输出流将数据发送</span><br><span class="line">out.write(&quot;hello tcp 来了&quot;.getBytes());</span><br><span class="line">// 关闭</span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.tcp;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class TCPServer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// 获取客户端的数据,在屏幕上</span><br><span class="line"></span><br><span class="line">// 思路</span><br><span class="line">// 创建服务端的socket,明确端口,监听一个端口</span><br><span class="line">// 服务端只要获取到链接过来的客户端就可以和指定的客户端通信了</span><br><span class="line">// 通过获取客户端的读取流对象读取客户端发来的数据.</span><br><span class="line">// 显示屏幕上</span><br><span class="line">System.out.println(&quot;服务端运行&quot;);</span><br><span class="line"></span><br><span class="line">// 创建服务端的socket,明确接收端口</span><br><span class="line">ServerSocket ss = new ServerSocket(20003);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">// 服务端只要获取到连接过来的客户端就可以和指定的客户端通信</span><br><span class="line">Socket s = ss.accept();</span><br><span class="line">String ip = s.getInetAddress().getHostAddress();</span><br><span class="line">System.out.println(ip + &quot;...connected&quot;);</span><br><span class="line"></span><br><span class="line">// 通过获取客户端的读取流对象读取客户端发送来的数据</span><br><span class="line">InputStream in = s.getInputStream();</span><br><span class="line">// 流操作</span><br><span class="line">byte[] buf = new byte[1024];</span><br><span class="line">int len = in.read(buf);</span><br><span class="line">String text = new String(buf, 0, len);</span><br><span class="line">System.out.println(text);</span><br><span class="line">// 关闭</span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line">// ss.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>客户端和服务端交互</p></blockquote><p>客户端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.tcp2;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class TCPClient2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws UnknownHostException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// 实现客户端和服务端的收发过程</span><br><span class="line">System.out.println(&quot;客户端2 启动&quot;);</span><br><span class="line">// 创建客户端的socket对象 </span><br><span class="line">Socket s = new Socket(&quot;ip地址&quot;,20004);</span><br><span class="line">// 发送数据,通过socket输出流完成</span><br><span class="line">OutputStream out = s.getOutputStream();</span><br><span class="line">out.write(&quot;服务端,我来了&quot;.getBytes());</span><br><span class="line"></span><br><span class="line">// 读取服务端返回的数据,通过socket输入流</span><br><span class="line">InputStream in = s.getInputStream();</span><br><span class="line">byte[] buf=new byte[1024];</span><br><span class="line">int len = in.read(buf);</span><br><span class="line">String text = new String(buf,0,len);</span><br><span class="line">System.out.println(text);</span><br><span class="line"></span><br><span class="line">// 关闭资源</span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.tcp2;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class TCPServer2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;服务端2 启动&quot;);</span><br><span class="line">// 创建tcp服务端socket明确端口</span><br><span class="line">ServerSocket ss = new ServerSocket(20004);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">// 获取客户端</span><br><span class="line">Socket s = ss.accept();</span><br><span class="line">System.out.println(s.getInetAddress().getHostAddress() + &quot;...&quot;);</span><br><span class="line"></span><br><span class="line">// 读取客户端的发送过来的数据</span><br><span class="line">InputStream in = s.getInputStream();</span><br><span class="line">byte[] buf = new byte[1024];</span><br><span class="line">int len = in.read(buf);</span><br><span class="line">String text = new String(buf, 0, len);</span><br><span class="line">System.out.println(text);</span><br><span class="line">// 给客户端回馈数据</span><br><span class="line">OutputStream out = s.getOutputStream();</span><br><span class="line">out.write(&quot;客户端,我已经收到&quot;.getBytes());</span><br><span class="line"></span><br><span class="line">// 关闭客户端</span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line">// 关闭服务端</span><br><span class="line">// ss.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-954f04d6840fcb4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="客户端"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c8216bda18761ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务端"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>网络编程到网络模型:一开始7层到4层</p><p>传输层的了解</p><p>网络通讯:</p><ol><li>ip:用于网络中主机的数字标识</li><li>端口:用于应用程序的数字标识</li><li>传输协议:用于数据传输的规则</li></ol><blockquote><p>TCP和UDP的区别</p></blockquote><p>TCP: 面向连接,三次握手,速度慢,可靠<br>UDP: 面向无连接,速度快,不可靠</p><p>实现UDP的通信:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以发送，又可以接收 DatagramSocket DatagramPacket 数据包对象</span><br></pre></td></tr></table></figure><p>实现TCP传输:</p><p>客户端，服务端</p><p>客户端要明确服务端的ip+端口,而服务端要明确端口,通过accept的方法获取客户端对象.</p><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>那么你是否掌握了,什么是tcp和udp,socket通信机制,以及ip,端口,协议.</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/40.jpg&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-b57dd3323b6ccb8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第77节:Java中的事务和数据库连接池和DBUtils</title>
    <link href="https://huangguangda.github.io/2019/01/27/1/"/>
    <id>https://huangguangda.github.io/2019/01/27/1/</id>
    <published>2019-01-27T08:17:07.000Z</published>
    <updated>2019-01-27T08:19:54.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><p><img src="/images/40.jpg" style="width: 100%;height: 100%"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-de1eea934cb6fb28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"><br><a id="more"></a></p><blockquote><p>第77节:Java中的事务和数据库连接池和DBUtiles</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看哭你,字数:8803,承蒙关照,谢谢朋友点赞!</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b6bfcd0a9cd91b2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字数8803"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><code>Transaction</code>事务,什么是事务,事务是包含一组操作,这组操作里面包含许多个单一的逻辑,只要有一个逻辑没有执行成功就算失败,导致回滚就是指所有的数据都会回到最初的状态.</p><p>有事务,是为了保证逻辑一定要成功,如银行转账.</p><h2 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h2><p>什么是<code>jsp</code>,<code>jsp</code>的三大指令.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page: 定义当前页面的信息</span><br><span class="line">include: 包含其他页面</span><br><span class="line">taglib: 引入标签库</span><br></pre></td></tr></table></figure><p>三大动作标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=&quot;&quot;&gt;:跳转</span><br><span class="line">&lt;jsp:param name=&quot;&quot; value=&quot;&quot;&gt;:跳转到具体页面或是某个页面被包含的时候,可以指定参数</span><br><span class="line">&lt;jsp:include page=&quot;&quot;&gt;:包含</span><br></pre></td></tr></table></figure><p>九大内置对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 四个作用域</span><br><span class="line">pageContext 当前页</span><br><span class="line">request 请求 一次请求 响应后就不行了</span><br><span class="line">session 会话 一次会话</span><br><span class="line">application 都可以 整个项目,直到关闭服务器</span><br><span class="line"></span><br><span class="line">// 5</span><br><span class="line">response</span><br><span class="line">out</span><br><span class="line">exception</span><br><span class="line">config -&gt; ServletConfig</span><br><span class="line">page -&gt; this 翻译成java文件的类对象</span><br></pre></td></tr></table></figure><h2 id="EL"><a href="#EL" class="headerlink" title="EL"></a><code>EL</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123; 表达式 &#125;;</span><br></pre></td></tr></table></figure><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% User user = new User(); %&gt;</span><br><span class="line">$&#123;user.ame&#125;</span><br><span class="line">从四个作用域里面找 </span><br><span class="line">pageContext -&gt; request -&gt; session -&gt; application</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"> User user = new User();</span><br><span class="line"> pageContext.setAttribute(&quot;user&quot;,user);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;sessionScope.user.name&#125;强制用session找</span><br></pre></td></tr></table></figure><p><code>EL</code>的11个隐式对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pageContext</span><br><span class="line">// 作用域</span><br><span class="line">pageScope</span><br><span class="line">requestScope</span><br><span class="line">sessionScope</span><br><span class="line">applicationScope</span><br><span class="line"></span><br><span class="line">头相关</span><br><span class="line">header</span><br><span class="line">headerValues</span><br><span class="line">参数</span><br><span class="line">param</span><br><span class="line">paramValues</span><br><span class="line">cookie</span><br><span class="line">initparam</span><br></pre></td></tr></table></figure><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a><code>JSTL</code></h2><p>导包哦,引入标签库是1.1的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set&gt;: 存储到作用域</span><br><span class="line">&lt;c:set var=&quot;&quot; value=&quot;&quot; scope=&quot;&quot;&gt;</span><br><span class="line">&lt;c: if&gt;: 用来判断</span><br><span class="line">&lt;c:forEach items=&quot;&quot; var=&quot;&quot;&gt;:用于遍历</span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-1fb13fda59aec338.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加两条数据"></p><p>数据库命令行:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-957f27422de5d893.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5c0db96f0c601c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><p>关闭自动提交.</p><p>关闭了提交,再减100:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-2c89852209c47240.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><p>会到数据库查看:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-73c606289c50f5bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刷新了"></p><p>值没改变!</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-82ccbc226de9aca1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入提交后"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-91cc7dc17a30b137.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刷新改变"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f0484045a508ef73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开启事务"></p><p>添加改变代码:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f4b088361405d51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="先看表"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line"> </span><br><span class="line">public class TestDemo &#123; </span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testTransaction() &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">try &#123;</span><br><span class="line">    conn = JDBCUtil.getConn();</span><br><span class="line">    //查询数据</span><br><span class="line">/*String sql = &quot;select * from account&quot;;</span><br><span class="line">    ps = conn.prepareStatement(sql);*/</span><br><span class="line"></span><br><span class="line">    String sql = &quot;update account set money = money - ? where id = ?&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">    </span><br><span class="line">    // 扣钱</span><br><span class="line">ps.setInt(1, 100);</span><br><span class="line">ps.setInt(2, 1);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">/*ps.setInt(1, -100);</span><br><span class="line">ps.setInt(2, 1);</span><br><span class="line">ps.executeUpdate();*/</span><br><span class="line"></span><br><span class="line">// 查询数据 </span><br><span class="line">/*rs = ps.executeQuery();</span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getString(&quot;name&quot;)+&quot;==&quot;+rs.getInt(&quot;money&quot;));</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class JDBCUtil &#123;</span><br><span class="line"></span><br><span class="line">static String driverClass = null;</span><br><span class="line">static String url = null;</span><br><span class="line">static String name = null;</span><br><span class="line">static String password= null;</span><br><span class="line"></span><br><span class="line">static&#123;</span><br><span class="line">try &#123;</span><br><span class="line">//1. 创建一个属性配置对象</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">InputStream is = new FileInputStream(&quot;jdbc.properties&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用类加载器，去读取src底下的资源文件。 后面在servlet</span><br><span class="line">//InputStream is = JDBCUtil.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">//导入输入流。</span><br><span class="line">properties.load(is);</span><br><span class="line"></span><br><span class="line">//读取属性</span><br><span class="line">driverClass = properties.getProperty(&quot;driverClass&quot;);</span><br><span class="line">url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">name = properties.getProperty(&quot;name&quot;);</span><br><span class="line">password = properties.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取连接对象</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static Connection getConn()&#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(driverClass);</span><br><span class="line">//静态代码块 ---&gt; 类加载了，就执行。 java.sql.DriverManager.registerDriver(new Driver());</span><br><span class="line">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span><br><span class="line">//DriverManager.getConnection(&quot;jdbc:mysql://localhost/test?user=monty&amp;password=greatsqldb&quot;);</span><br><span class="line">//2. 建立连接 参数一： 协议 + 访问的数据库 ， 参数二： 用户名 ， 参数三： 密码。</span><br><span class="line">conn = DriverManager.getConnection(url, name, password);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 释放资源</span><br><span class="line"> * @param conn</span><br><span class="line"> * @param st</span><br><span class="line"> * @param rs</span><br><span class="line"> */</span><br><span class="line">public static void release(Connection conn , Statement st , ResultSet rs)&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line">public static void release(Connection conn , Statement st)&#123;</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static void closeRs(ResultSet rs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(rs != null)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">rs = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeSt(Statement st)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(st != null)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">st = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeConn(Connection conn)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(conn != null)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">conn = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ba0363848fe54936.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刷新后"></p><p>事务只针对连接.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line"> </span><br><span class="line">public class TestDemo &#123; </span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">try &#123;</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line"></span><br><span class="line">String sql = &quot;update account set money = money - ? where id = ?&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//扣钱， 扣ID为1 的100块钱</span><br><span class="line">ps.setInt(1, 100);</span><br><span class="line">ps.setInt(2, 1);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//int a = 10 /0 ;</span><br><span class="line">String s = null;</span><br><span class="line">s.length();</span><br><span class="line"></span><br><span class="line">//加钱， 给ID为2 加100块钱</span><br><span class="line">ps.setInt(1, -100);</span><br><span class="line">ps.setInt(2, 2);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testTransaction() &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">try &#123;</span><br><span class="line">    conn = JDBCUtil.getConn();</span><br><span class="line">    </span><br><span class="line">    // 连接</span><br><span class="line">    conn.setAutoCommit(false);</span><br><span class="line">    </span><br><span class="line">    //查询数据</span><br><span class="line">/*String sql = &quot;select * from account&quot;;</span><br><span class="line">    ps = conn.prepareStatement(sql);*/</span><br><span class="line"></span><br><span class="line">    String sql = &quot;update account set money = money - ? where id = ?&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">    </span><br><span class="line">    // 扣钱</span><br><span class="line">ps.setInt(1, 100);</span><br><span class="line">ps.setInt(2, 1);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">int a = 10 /0 ;</span><br><span class="line"></span><br><span class="line">ps.setInt(1, -100);</span><br><span class="line">ps.setInt(2, 2);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">// 提交事务</span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line">// 查询数据 </span><br><span class="line">/*rs = ps.executeQuery();</span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getString(&quot;name&quot;)+&quot;==&quot;+rs.getInt(&quot;money&quot;));</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">// 回滚事务</span><br><span class="line">try &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; catch (SQLException e1) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(false)来关闭自动提交的设置</span><br><span class="line">conn.commit(); 提交事务</span><br><span class="line">conn.rollback(); 回滚事务</span><br></pre></td></tr></table></figure><p>记住:<br>什么是事务,事务有什么用处,事务怎么用.</p><p>事务的特点:</p><ol><li>原子性: 指的是事务中包含的逻辑,不可以分割(事务中逻辑不可分)</li><li>一致性: 事务执行前和执行后,保持数据的完整性一致(执行前后,数据保持一致)</li><li>隔离性: 事务在执行期间不受到其他事务的影响(隔离不受影响)</li><li>持久性: 事务执行结束,提交或回滚,数据都应该持久化到数据中(数据持久化在数据中)</li></ol><p>安全问题</p><ol><li>读问题<br>脏读,不可重复读,幻读</li><li>写问题<br>丢失更新,解决丢失更新的方法,一悲观锁和乐观锁</li></ol><p>隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Read Uncommitted 读未提交</span><br><span class="line">Read Committed 读已提交</span><br><span class="line">Repeatable Read 重复读</span><br><span class="line">Serializable 可串行化</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-340d7d7c9fa17391.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="隔离级别"></p><p>脏读:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d9106d65bda58b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5ddc6d9143e31aff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>一条连接:<br><img src="https://upload-images.jianshu.io/upload_images/11158618-e64e5a5deeb0b1c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>另一条连接:<br><img src="https://upload-images.jianshu.io/upload_images/11158618-f8bbe6bf9b1edaeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use bank;</span><br><span class="line">start transaction;</span><br><span class="line">select * from account;</span><br><span class="line">select * from account;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use bank;</span><br><span class="line">start transaction;</span><br><span class="line">update account set money = money + 300 where id = 1;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>读未提交</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c450391d3938cb67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><blockquote><p>例子</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-cdb604cd503e7150.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p>这里查询,然后再看看数据库中的表:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f7bf143f903f5ea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刷新后"></p><p>命令提交:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-9b76968719b44c3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令提交"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-88e62f1497ebc2e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查询数据"></p><blockquote><p>不可重复读的问题</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-71768cebcf17d9c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><h2 id="Repeatable-Read重复读"><a href="#Repeatable-Read重复读" class="headerlink" title="Repeatable Read重复读"></a><code>Repeatable Read</code>重复读</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-36554b379444364c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-2a54bec6bdd2dc42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d0f4b3b9da1054f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a4e5431c4351fb69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><h2 id="可串化"><a href="#可串化" class="headerlink" title="可串化"></a>可串化</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-1d7f007806a44df5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-748f14ac618bd972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><blockquote><p>读未提交,引发脏读,读已提交解决脏读,引发不可重复读, 可重复读解决脏读解决了脏读,不可重复读,</p></blockquote><p>asss</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>读:<br>脏读 不可重读读 幻读</p><p>脏读:<br>一个事务读到另外一个事务还未提交的数据</p><p>不可重复读:<br>一个事务读到另外一个事务提交的数据,导致前后两次查询结果不一致</p><p>幻读:<br>一个事务读到了另外一个事务已提交的插入的数据,导致多次查询结果不一致.</p><p>读未提交,<br>会导致丢失更新</p><p>读已提交,<br>能够屏蔽 脏读的现象,但是引发不可重复读</p><h2 id="事务的安全隐患脏读"><a href="#事务的安全隐患脏读" class="headerlink" title="事务的安全隐患脏读"></a>事务的安全隐患脏读</h2><p>隔离级别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read uncommitted 读未提交</span><br><span class="line">read committed 读已提交</span><br><span class="line">repeatable read 重复读</span><br><span class="line">serializable 可串化</span><br></pre></td></tr></table></figure><p><code>mysql</code>默认的是重复读.</p><p>设置A窗口的隔离级别为 读未提交 </p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-e9a7fb886f61a2b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="a"></p><p>两个窗口都分别开启事务</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-abc1c8eabc71877b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="脏读"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ab4e57154f848904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提交后"></p><p>读未提交是一个事务可以读取到另一个事务还没有提交的数据,会引发脏读现象,读取到的是数据库内存中的数据,并不是真正的磁盘上的数据.</p><p>还未提交时,数据库内存中的数据是不会改变的,只有到commit提交后,数据库中的数据才会提交,从而读取真正在磁盘上的数据.</p><h2 id="Read-Committed读已提交"><a href="#Read-Committed读已提交" class="headerlink" title="Read Committed读已提交"></a><code>Read Committed</code>读已提交</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c7b28ae1809f056d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-cb00c0352e7e6afa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p>在a发生了变化,屏蔽了脏读,引发不可重复读,读已提交.读已提交,在a窗口设置的是读已提交,两边开启事务.在b窗口更新操作.</p><p>在a窗口查询结果不一致,一次是在b窗口提交事务之前,一次的提交之后.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ef698665a32c12f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前后"></p><p>引发了不可重复读</p><p>不可重复读,一个事务读取到了另一个事务提交的数据,导致前后两次查询结果不一致.</p><p>会造成问题是前后读取到的结果不一样,发生了不可重复读,就是不可以 重复读取, 就是不能执行多次读取, 否则会导致结果不一致, 这下好了, 读取已提交导致了 重复读取, 结果还不一致, 就出现了叫 不可重复读 现象.</p><h2 id="安全隐患-可重复读"><a href="#安全隐患-可重复读" class="headerlink" title="安全隐患_可重复读"></a>安全隐患_可重复读</h2><p><code>Repeatable Read</code>重复读, 重复读就是mysql默认的隔离级别,可以让食物在自己的会话中重复读取数据,并且不会出现结果不一致的现象, 就算其他事务提交了, 也还是会在窗口中出现以前的数据, 这就是可重复读了.</p><p>重复读, 就是让它可以重复查询, 结果还是和以前一样的效果出现.</p><h2 id="设置重复读"><a href="#设置重复读" class="headerlink" title="设置重复读"></a>设置重复读</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-e0f2d760fae4d676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重复读"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a536c4ba1f1d6304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重复读"></p><h2 id="安全隐患-可串行化"><a href="#安全隐患-可串行化" class="headerlink" title="安全隐患 _可串行化"></a>安全隐患 _可串行化</h2><p>幻读:什么是幻读呢?<br>就是一个事务读到另一个事务已提交的插入的数据,会导致多次查询结果不一致.就是幻读,是不是幻读理解为我幻想了, 事务已提交的插入数据, 导致幻想了,(幻读) 导致每次查询结果不一样.</p><p>事务已提交,多次查询结果不一致.</p><p>幻读-&gt;<code>Serializable</code>可串行化</p><p>该事务的级别是最高的事务级别,我是可串行化,是最高的.可以解决如下小弟的问题,如脏读,不可重复读,幻读,因为我是可串行化,是大佬,但作为大佬,还是会有缺点的.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-9fef7bc147a7897b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-9c3847fe44648faf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-567b038b4c0f658c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p>是的,a提交才动.现在我们让b先开启事务.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-1f69b3e6719fe3ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5439323e10ed52ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-4e07621f4afff961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提交了"></p><p>可串行化, 谁先打开事务,就谁有权利,这个隔离级别,先打开就有权利让别人等着,等先打开事务的那个家伙,提交或者回滚后,才能进行,这种级别是用得比较少的,因为容易导致性能上效率低下.</p><p>隔离级别有四个哦</p><ol><li>读未提交</li><li>读已提交</li><li>可重复读</li><li>可串行化</li></ol><p>如果按照效率划分,从高到低,排个名次如下:</p><ol><li>读未提交 -&gt; 脏读</li><li>读已提交 -&gt; 不可重复读</li><li>可重复读 -&gt; 解决重复读</li><li>可串行化 -&gt; 以上都是我小弟来着</li></ol><p>按照拦截程度来划分,从高到底,排名如下:</p><ol><li>可串行化 -&gt; 我是大哥</li><li>可重复读 -&gt; 我是二哥</li><li>读已提交 -&gt; 我是三弟</li><li>读未提交 -&gt; 我是小弟</li></ol><h2 id="事务-隔离级别小结"><a href="#事务-隔离级别小结" class="headerlink" title="事务_隔离级别小结"></a>事务_隔离级别小结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 使用事务</span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line">// 提交</span><br><span class="line">conn.commit();</span><br><span class="line">// 回滚</span><br><span class="line">conn.rollback();</span><br></pre></td></tr></table></figure><p>事务只是针对连接对象.事务是会自动提交的.</p><p>安全隐患和隔离级别</p><p>安全隐患: 读的安全隐患和写的安全隐患</p><p>读:<br>脏读,读到未提交的数据,一个事务读到了另一个事务未提交的数据;<br>不可重复读,就是一个事务读到了另一个事务已经提交的数据,导致前后两次查询的结果不一致;<br>幻读,就是一个事务读到了另一个事务添加的数据,导致前后查询结果不一致.</p><p>写: 丢失更新…</p><blockquote><p>隔离级别</p></blockquote><p>读未提交,导致脏读<br>读已提交,解决脏读,导致不可重复读<br>可重复读,解决脏读和不可重复读,导致幻读<br>可串行化,解决脏读,不可重复读,幻读</p><p>默认的mysql是可重复读,oracle默认是读已提交</p><h2 id="写的问题-丢失更新"><a href="#写的问题-丢失更新" class="headerlink" title="写的问题_丢失更新"></a>写的问题_丢失更新</h2><p>丢失更新</p><ol><li>乐观锁</li><li>悲观锁</li></ol><p>安全问题包含 读的问题和写的问题</p><blockquote><p>事务的特性是什么?<br>原子性,一致性,隔离性,持久性</p></blockquote><h2 id="写的问题-丢失更新-1"><a href="#写的问题-丢失更新-1" class="headerlink" title="写的问题_丢失更新"></a>写的问题_丢失更新</h2><p><img src="https://upload-images.jianshu.io/upload_images/11158618-28e95bc6dd2e238d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f849cba99e5c3b8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>b窗口没有提交.等待提交中:</p><p>案例控制面板,我的a:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-3dd1e1ddb5f434d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="a的"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-4535bfedba1a991d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="b的"></p><p>哭了,这是设置默认的重复读啊!</p><h2 id="丢失更新的问题"><a href="#丢失更新的问题" class="headerlink" title="丢失更新的问题"></a>丢失更新的问题</h2><blockquote><p>听说丢失更新</p></blockquote><p>a事务和b事务同时查询一个表,a开始修改并提交<code>name</code>字段的名字,然后b事务开始修改该行的<code>money</code>的字段,如果b事务提交,那么之前a事务修改的名字没有了,变回去了哦,当然b事务回滚,也同样导致a事务更新没有了哦.回滚也会把之前b事务的最初的数据还原.</p><p>这里的情况处理序列化级别外,就是可串行化级别大佬哦!</p><blockquote><p>解决丢失更新的方法</p></blockquote><ol><li>悲观锁</li><li>乐观锁</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from account;</span><br></pre></td></tr></table></figure><p>悲观锁的态度,它是悲观的态度,它是一定会丢失更新,它的想法是我一定会出错.</p><p>而乐观锁,它的态度是我一定不会丢失更新.</p><blockquote><p>悲观锁</p></blockquote><p>数据库的锁机制,排他锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from account for update;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-7d92e61a7b2a6340.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b19bc37d5e4ec399.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行"></p><blockquote><p>丢失更新的问题</p></blockquote><p>不考虑隔离性,产生写入数据导致的问题为丢失更新的问题,两个事务同时对某一条记录做修改,然后会导致丢失更新的问题.</p><p>a,b两个事务同时获取一条数据,同时做了修改,a事务修改后,提交了事务,b事务修改后,不管是提交还是回滚,都会对数据发生影响.</p><p>悲观锁记住用了这句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from account for update;</span><br><span class="line">for update;</span><br><span class="line">数据库锁机制,排他锁</span><br></pre></td></tr></table></figure><blockquote><p>乐观锁</p></blockquote><p>a事务先提交,数据库版本<code>version</code>变为1,b事务在提交的时候,比对数据库<code>version</code>和自己的<code>version</code>是不一样的,不允许提交,要先更新.</p><p>a提交的时候版本变为1,b提交的时候,发现版本不一致就无法提交,要进行更新后提交.</p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>什么是连接池,连接池的作用是什么,自定义连接池,开源的连接池?</p><p>那么什么是数据库连接池?</p><p>数据库连接池是Java程序和数据连接的中介媒介,以前一个Java程序对应一个连接,然后就可以连接到数据了,可以一旦多了呢?</p><p>就有人发明了数据库连接池,可以一下连接多个,但是是有限制的,一旦多了,就会扩容,额外增加3到5个,不会增幅太大,也有最大值的限制.</p><blockquote><p>数据库的连接对象 创建工作 比较消耗性能<br>一开始在内存中会开辟一块空间, 用于是 这个数据库连接池的空间, 可以在池子里放置很多个连接对象, 数据库连接池里有很多个连接对象, 后面需要连接的话会直接从池子里面去, 就不用自己去创建连接了, 因为数据库的连接对象创建工作是比较耗时的, 使用完, 数据库连接池中的 连接对象 ,是要进行归还的, 确保连接对象可以循环连接使用.</p></blockquote><blockquote><p>创建数据库的连接池</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 简单使用数据库连接池</span><br><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class TestPool &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testPool() &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">MyDataSource dataSource = new MyDataSource();</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into account values (null, &apos;xilali&apos;, 10)&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ps.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">// 归还连接</span><br><span class="line">dataSource.addBack(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ab552bda614279ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><blockquote><p>自定义数据库连接池</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List &lt;Connection&gt; list = new ArrayList&lt;Connection&gt;();</span><br></pre></td></tr></table></figure><p>解决自定义数据库连接池问题</p><p>因为多了一个<code>addBack</code>方法,要记住这个方法,且不能用面向接口编程.修改<code>close</code>方法,改成不是关闭而是归还连接对象.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class MyDataSource implements DataSource &#123;</span><br><span class="line"> // 创建连接池</span><br><span class="line">List&lt;Connection&gt; list = new ArrayList&lt;Connection&gt;();</span><br><span class="line"> public MyDataSource()&#123;</span><br><span class="line">  for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">   Connection conn = JDBCUtil.getConn();</span><br><span class="line">   list.add(conn);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> @Override</span><br><span class="line"> public Connection getConnection() throws SQLException &#123;</span><br><span class="line">   if(list.size() == 0)&#123;</span><br><span class="line">     for(int i=0; i&lt;5; i++) &#123;</span><br><span class="line">      Connection conn = JDBCUtil.getConn();</span><br><span class="line">       list.add(conn);</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Connection conn = list.remove(0);</span><br><span class="line">     return conn;</span><br><span class="line">  &#125;</span><br><span class="line">  // 用完后归还 </span><br><span class="line">  public void addBack(Connection conn)&#123;</span><br><span class="line">    list.add(conn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class TestPool&#123;</span><br><span class="line"> @Test</span><br><span class="line">  public void testPool()&#123;</span><br><span class="line">   Connection conn = null;</span><br><span class="line">   PreparedStatement ps = null;</span><br><span class="line">   MyDataSource dataSource = new MyDataSource();</span><br><span class="line">  try &#123;</span><br><span class="line">   conn = dataSource.getConnection();</span><br><span class="line">   String sql = &quot;insert into account values(null, &apos;dashu&apos;, 10)&quot;;</span><br><span class="line">   ps = conn.prepareStatement(sql);</span><br><span class="line">   ps.executeUpdate();</span><br><span class="line"> </span><br><span class="line">   &#125;catch(SQLException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">   &#125;finally&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">    ps.close();</span><br><span class="line">    &#125;catch(SQLException e)&#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    // 归还连接</span><br><span class="line">    dataSource.addBack(conn);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何扩展方法</p></blockquote><p>装饰者模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">public interface Waiter &#123;</span><br><span class="line">void service();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">public class Waitress implements Waiter &#123;</span><br><span class="line">@Override</span><br><span class="line">public void service() &#123;</span><br><span class="line">System.out.println(&quot;在服务...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">public class MainTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Waiter waiter = new Waitress();</span><br><span class="line">waiter.service();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者模式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">public class WaitressWrap implements Waiter &#123;</span><br><span class="line"></span><br><span class="line">Waiter watier = null;</span><br><span class="line">public WaitressWrap(Waiter watier) &#123;</span><br><span class="line">this.watier = watier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void service() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;微笑&quot;);</span><br><span class="line">watier.service();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.test;</span><br><span class="line"></span><br><span class="line">public class MainTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">/*Waiter waiter = new Waitress();</span><br><span class="line">waiter.service();*/</span><br><span class="line">WaitressWrap waitressWrap = new WaitressWrap(new Waitress());</span><br><span class="line">waitressWrap.service();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Waiter -&gt; service()</span><br><span class="line"></span><br><span class="line">Waitress -&gt; service()</span><br><span class="line"></span><br><span class="line">WaitressWrap -&gt; service()</span><br><span class="line"></span><br><span class="line">Waiter waiter;</span><br><span class="line">public Waitress Wrap(Waiter waiter)&#123;</span><br><span class="line"> this.waiter = watier;</span><br><span class="line">&#125;</span><br><span class="line">void service()&#123;</span><br><span class="line"> syso</span><br><span class="line"> waiter.service();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>装饰者模式</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-1afb55e7867fc95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-21b7e26bb44e8949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.SQLFeatureNotSupportedException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">// 这是一个数据库连接池</span><br><span class="line">// 一开始 先往连接池放入10个连接</span><br><span class="line">public class MyDataSource implements DataSource&#123;</span><br><span class="line"></span><br><span class="line">// 创建连接池</span><br><span class="line">List&lt;Connection&gt; list = new ArrayList&lt;Connection&gt;();</span><br><span class="line">public MyDataSource() &#123;</span><br><span class="line">// 10个连接</span><br><span class="line">for(int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">Connection conn = JDBCUtil.getConn();</span><br><span class="line">list.add(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 该连接池对外公布的获取连接的方法</span><br><span class="line">@Override</span><br><span class="line">public Connection getConnection() throws SQLException &#123;</span><br><span class="line">// 来拿连接的时候,看看,池子里面有没有</span><br><span class="line">if(list.size() == 0) &#123;</span><br><span class="line">for(int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">Connection  conn = JDBCUtil.getConn();</span><br><span class="line">list.add(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">// 那一个 给连接 如果有10个,0,1,2,3,-&gt;10 这样给</span><br><span class="line">// 确保给</span><br><span class="line">// 移除就给了嘛</span><br><span class="line">// remove(0) -&gt; 移除第一个</span><br><span class="line">Connection conn = list.remove(0);</span><br><span class="line">// 把对象抛出去的时候,对这个对象进行包装</span><br><span class="line"></span><br><span class="line">Connection connection = new ConnectionWrap(conn,list);</span><br><span class="line"></span><br><span class="line">return connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用完后记得归还</span><br><span class="line">public void addBack(Connection conn) &#123;</span><br><span class="line">list.add(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PrintWriter getLogWriter() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getLoginTimeout() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Logger getParentLogger() throws SQLFeatureNotSupportedException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setLogWriter(PrintWriter arg0) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setLoginTimeout(int arg0) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isWrapperFor(Class&lt;?&gt; arg0) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T unwrap(Class&lt;T&gt; arg0) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Connection getConnection(String arg0, String arg1) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c7889696705c734f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.sql.Array;</span><br><span class="line">import java.sql.Blob;</span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.Clob;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DatabaseMetaData;</span><br><span class="line">import java.sql.NClob;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLClientInfoException;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.SQLWarning;</span><br><span class="line">import java.sql.SQLXML;</span><br><span class="line">import java.sql.Savepoint;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.sql.Struct;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line">public class ConnectionWrap implements Connection&#123;</span><br><span class="line"></span><br><span class="line">Connection connection = null;</span><br><span class="line"></span><br><span class="line">List&lt;Connection&gt; list;</span><br><span class="line">public ConnectionWrap(Connection connection,List&lt;Connection&gt; list) &#123;</span><br><span class="line">super();</span><br><span class="line">this.connection = connection;</span><br><span class="line">this.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//connection.close();</span><br><span class="line">System.out.println(&quot;有人归还连接对象了,归还之前&quot;+list.size());</span><br><span class="line">list.add(connection);</span><br><span class="line">System.out.println(&quot;有人归还连接对象了,归还之后&quot;+list.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PreparedStatement prepareStatement(String sql) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return connection.prepareStatement(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isWrapperFor(Class&lt;?&gt; iface) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T unwrap(Class&lt;T&gt; iface) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void abort(Executor executor) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void clearWarnings() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void commit() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Array createArrayOf(String typeName, Object[] elements) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Blob createBlob() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Clob createClob() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public NClob createNClob() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public SQLXML createSQLXML() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Statement createStatement() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)</span><br><span class="line">throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Struct createStruct(String typeName, Object[] attributes) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean getAutoCommit() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getCatalog() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Properties getClientInfo() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getClientInfo(String name) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getHoldability() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public DatabaseMetaData getMetaData() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getNetworkTimeout() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getSchema() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getTransactionIsolation() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Map&lt;String, Class&lt;?&gt;&gt; getTypeMap() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public SQLWarning getWarnings() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isClosed() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isReadOnly() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isValid(int timeout) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String nativeSQL(String sql) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CallableStatement prepareCall(String sql) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,</span><br><span class="line">int resultSetHoldability) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)</span><br><span class="line">throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,</span><br><span class="line">int resultSetHoldability) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void releaseSavepoint(Savepoint savepoint) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void rollback() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void rollback(Savepoint savepoint) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setAutoCommit(boolean autoCommit) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setCatalog(String catalog) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setClientInfo(Properties properties) throws SQLClientInfoException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setClientInfo(String name, String value) throws SQLClientInfoException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setHoldability(int holdability) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setReadOnly(boolean readOnly) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Savepoint setSavepoint() throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Savepoint setSavepoint(String name) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setSchema(String schema) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setTransactionIsolation(int level) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setTypeMap(Map&lt;String, Class&lt;?&gt;&gt; map) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d5023746f361db32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-8078c5a665e3ccce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><blockquote><p>数据库连接池_DBCP</p></blockquote><p>DBCP开源连接池<br>C3P0,什么是C3P0,怎么用</p><p>DBCP为数据库连接池,是java数据库连接池的一种是Apache开发的,通过数据库连接池可以让程序自动管理数据库的连接.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataBase Connection Pool数据库连接池</span><br></pre></td></tr></table></figure><p>C3P0也是一种开源的连接池,实现了数据库和JNDI绑定,使用它的开源项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spring, Hibernate</span><br></pre></td></tr></table></figure><blockquote><p>怎么用DBCP</p></blockquote><ol><li>导入jar包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commons-dbcp.jar</span><br><span class="line">commons-pool.jar</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 不使用配置文件</span><br><span class="line">BasicDataSource dataSource = new BasicDataSource();</span><br><span class="line">dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">dataSource.setUrl(&quot;jdbc:mysql://loclhost/users&quot;);</span><br><span class="line">dataSource.setUsername(&quot;root&quot;);</span><br><span class="line">dataSource.setPassword(&quot;root&quot;);</span><br><span class="line"></span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">String sql = &quot;select * from user&quot;;</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure><blockquote><p>DBCP连接数据库使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbcp;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbcp.BasicDataSource;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line"></span><br><span class="line">// 这个连接池要连接数据库, 账号,密码</span><br><span class="line">public class DBCPDemo &#123;</span><br><span class="line">// ctrl + 2 f</span><br><span class="line">private Connection conn;</span><br><span class="line">private PreparedStatement ps;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testDBCP01()&#123;</span><br><span class="line">// 数据库的连接池, 作用创建和连接</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// 构建数据源对象</span><br><span class="line">BasicDataSource dataSource = new BasicDataSource();</span><br><span class="line">// 连接什么数据库,用户名和密码</span><br><span class="line">dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">dataSource.setUrl(&quot;jdbc:mysql://localhost/bank&quot;);</span><br><span class="line">dataSource.setUsername(&quot;你的账户&quot;);</span><br><span class="line">dataSource.setPassword(&quot;你的密码&quot;);</span><br><span class="line"></span><br><span class="line">// 得到连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into account values(null, ?, ?)&quot;;</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">ps.setString(1, &quot;dashucoding&quot;);</span><br><span class="line">ps.setInt(2, 10000);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是不使用配置文件的情况.</p><blockquote><p>DBCP使用配置文件方式</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5d7951abe03baa0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-36d98c1365978dae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbcp;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbcp.BasicDataSource;</span><br><span class="line">import org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line"></span><br><span class="line">public class DBCPDemo02 &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testDBCP02() &#123;</span><br><span class="line">/*BasicDataSource dataSource = new BasicDataSource();</span><br><span class="line">dataSource.setConnectionProperties(&quot;dbcpconfig.properties&quot;);*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line"></span><br><span class="line">// 数据库的连接池, 作用创建和连接</span><br><span class="line">try &#123;</span><br><span class="line">BasicDataSourceFactory factory = new BasicDataSourceFactory();</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">InputStream is = new FileInputStream(&quot;src//dbcpconfig.properties&quot;);</span><br><span class="line">properties.load(is);</span><br><span class="line">DataSource dataSource = factory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">// 得到连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into account values(null, ?, ?)&quot;;</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">ps.setString(1, &quot;liuliuliu&quot;);</span><br><span class="line">ps.setInt(2, 10000);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池-C3P0"><a href="#数据库连接池-C3P0" class="headerlink" title="数据库连接池_C3P0"></a>数据库连接池_C3P0</h2><blockquote><p>不使用配置方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">拷贝jar c3p0...jar</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Just put the jar file [lib/c3p0-0.9.1.2.jar] in your application&apos;s effective CLASSPATH</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource cpds = new ComboPooledDataSource();</span><br><span class="line">cpds.setDriverClass( &quot;org.postgresql.Driver&quot; ); //loads the jdbc driver            </span><br><span class="line">cpds.setJdbcUrl( &quot;jdbc:postgresql://localhost/testdb&quot; );</span><br><span class="line">cpds.setUser(&quot;dbuser&quot;);                                  </span><br><span class="line">cpds.setPassword(&quot;dbpassword&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-4613be7b7ae6b406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.c3p0;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbcp.BasicDataSource;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class C3P0Demo &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testC3P0() &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">try &#123;</span><br><span class="line">// 创建dataSource</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);        </span><br><span class="line">dataSource.setJdbcUrl( &quot;jdbc:mysql://localhost/bank&quot; );</span><br><span class="line">dataSource.setUser(&quot;root&quot;);                                  </span><br><span class="line">dataSource.setPassword(&quot;admin&quot;);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 得到连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into account values(null, ?, ?)&quot;;</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">ps.setString(1, &quot;aaa&quot;);</span><br><span class="line">ps.setInt(2, 10000);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>C3P0使用配置文件的方式</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-4f0bb33cbb0d382b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-d7050d50a84bb14f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f05618d59e909ffc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p><code>c3p0-config.xml file</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">  &lt;default-config&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost/bank&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;user&quot;&gt;你的账户&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot;&gt;你的密码&lt;/property&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxStatements&quot;&gt;200&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/default-config&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-be73f8e8b3fdc4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.c3p0;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.util.JDBCUtil;</span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line">// 使用配置文件</span><br><span class="line">public class C3P0Demo02 &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testC3P0() &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">try &#123;</span><br><span class="line">// 配置文件 new了一个对象</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource(); </span><br><span class="line"></span><br><span class="line">// 得到连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into account values(null, ?, ?)&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setString(1, &quot;bbb&quot;);</span><br><span class="line">ps.setInt(2, 10000);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以弄oracle:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- This app is massive! --&gt;</span><br><span class="line">  &lt;named-config name=&quot;oracle&quot;&gt; </span><br><span class="line">    &lt;property name=&quot;acquireIncrement&quot;&gt;50&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;initialPoolSize&quot;&gt;100&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;minPoolSize&quot;&gt;50&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxPoolSize&quot;&gt;1000&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- intergalactoApp adopts a different approach to configuring statement caching --&gt;</span><br><span class="line">    &lt;property name=&quot;maxStatements&quot;&gt;0&lt;/property&gt; </span><br><span class="line">    &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;5&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- he&apos;s important, but there&apos;s only one of him --&gt;</span><br><span class="line">    &lt;user-overrides user=&quot;master-of-the-universe&quot;&gt; </span><br><span class="line">      &lt;property name=&quot;acquireIncrement&quot;&gt;1&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;initialPoolSize&quot;&gt;1&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;minPoolSize&quot;&gt;1&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;maxPoolSize&quot;&gt;5&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;50&lt;/property&gt;</span><br><span class="line">    &lt;/user-overrides&gt;</span><br><span class="line">  &lt;/named-config&gt;</span><br></pre></td></tr></table></figure><p><code>oracle</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br></pre></td></tr></table></figure><h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a><code>DBUtils</code></h2><p>什么是DBUtils呢?怎么用呢?</p><p>优化数据库连接,使用C3P0:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.util;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class JDBCUtil02 &#123;</span><br><span class="line"></span><br><span class="line">static ComboPooledDataSource dataSource = null;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">dataSource = new ComboPooledDataSource();</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 获取连接对象</span><br><span class="line"> * @return</span><br><span class="line"> * @throws SQLException </span><br><span class="line"> */</span><br><span class="line">public static Connection getConn() throws SQLException&#123;</span><br><span class="line"></span><br><span class="line">return dataSource.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 释放资源</span><br><span class="line"> * @param conn</span><br><span class="line"> * @param st</span><br><span class="line"> * @param rs</span><br><span class="line"> */</span><br><span class="line">public static void release(Connection conn , Statement st , ResultSet rs)&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line">public static void release(Connection conn , Statement st)&#123;</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static void closeRs(ResultSet rs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(rs != null)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">rs = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeSt(Statement st)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(st != null)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">st = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void closeConn(Connection conn)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(conn != null)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">conn = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DBUtils优化增删改查方法</p></blockquote><p>导包,两行代码交你增删改查,6666!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">queryRunner.update(&quot;insert into account values(null, ?, ?)&quot;, &quot;bbb&quot;, 10000);</span><br></pre></td></tr></table></figure><p>两行.</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-46c9098f2b9ee519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-c8fa75e19f31660a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbutils;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class TestDBUtils &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testInsert() throws SQLException &#123;</span><br><span class="line">//ComboPooledDataSource dataSource = new ComboPooledDataSource(); </span><br><span class="line"></span><br><span class="line">// dbutils 简化了CRUD的代码</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * queryRunner.update(sql);</span><br><span class="line"> * 增删改</span><br><span class="line"> * queryRunner.query(sql, rsh);</span><br><span class="line"> * 查</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">queryRunner.update(&quot;insert into account values(null, ?, ?)&quot;, &quot;bbb&quot;, 10000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbutils;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class TestDBUtils &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testInsert() throws SQLException &#123;</span><br><span class="line">//ComboPooledDataSource dataSource = new ComboPooledDataSource(); </span><br><span class="line"></span><br><span class="line">// dbutils 简化了CRUD的代码</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * queryRunner.update(sql);</span><br><span class="line"> * 增删改</span><br><span class="line"> * queryRunner.query(sql, rsh);</span><br><span class="line"> * 查</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">queryRunner.update(&quot;insert into account values(null, ?, ?)&quot;, &quot;bbb&quot;, 10000);</span><br><span class="line">queryRunner.update(&quot;delete from account where id = ?&quot;, 8);</span><br><span class="line">queryRunner.update(&quot;update account set money = ? where id = ?&quot;, 0, 10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-7528888cd0b13a3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbutils;</span><br><span class="line"></span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.ResultSetHandler;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Account;</span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class TestDBUtils &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testInsert() throws SQLException &#123;</span><br><span class="line">//ComboPooledDataSource dataSource = new ComboPooledDataSource(); </span><br><span class="line"></span><br><span class="line">// dbutils 简化了CRUD的代码</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">// 查询的是一个Bean对象</span><br><span class="line">// new 匿名实现类-&gt;new接口的匿名实现类</span><br><span class="line"></span><br><span class="line">Account account = queryRunner.query(&quot;select * from account where id = ?&quot;, new ResultSetHandler&lt;Account&gt;() &#123;</span><br><span class="line">// 去执行查询,查询到的数据在result里面,然后调用handle方法,用户手动去封装</span><br><span class="line">@Override</span><br><span class="line">public Account handle(ResultSet rs) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Account account = new Account();</span><br><span class="line"></span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">String name = rs.getString(&quot;name&quot;);</span><br><span class="line">int money = rs.getInt(&quot;money&quot;);</span><br><span class="line">account.setName(name);</span><br><span class="line">account.setMoney(money);</span><br><span class="line">&#125;</span><br><span class="line">return account;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, 1);</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * queryRunner.update(sql);</span><br><span class="line"> * 增删改</span><br><span class="line"> * queryRunner.query(sql, rsh);</span><br><span class="line"> * 查</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">/*queryRunner.update(&quot;insert into account values(null, ?, ?)&quot;, &quot;bbb&quot;, 10000);</span><br><span class="line">queryRunner.update(&quot;delete from account where id = ?&quot;, 8);</span><br><span class="line">queryRunner.update(&quot;update account set money = ? where id = ?&quot;, 0, 10);*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询优化</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b3e7cdea9f4befed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>一个对象: BeanHandler<t></t></p><p>一个集合里面有很多对象: BeanListHandler<t></t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.domain;</span><br><span class="line"></span><br><span class="line">public class Account &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int money;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getMoney() &#123;</span><br><span class="line">return money;</span><br><span class="line">&#125;</span><br><span class="line">public void setMoney(int money) &#123;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Account [name=&quot; + name + &quot;, money=&quot; + money + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbutils;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.ResultSetHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Account;</span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class TestDBUtils &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testInsert() throws SQLException &#123;</span><br><span class="line">//ComboPooledDataSource dataSource = new ComboPooledDataSource(); </span><br><span class="line"></span><br><span class="line">// dbutils 简化了CRUD的代码</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">// 查询的是一个Bean对象</span><br><span class="line">// new 匿名实现类-&gt;new接口的匿名实现类</span><br><span class="line"></span><br><span class="line">/*Account account = queryRunner.query(&quot;select * from account where id = ?&quot;, new ResultSetHandler&lt;Account&gt;() &#123;</span><br><span class="line">// 去执行查询,查询到的数据在result里面,然后调用handle方法,用户手动去封装</span><br><span class="line">@Override</span><br><span class="line">public Account handle(ResultSet rs) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Account account = new Account();</span><br><span class="line"></span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">String name = rs.getString(&quot;name&quot;);</span><br><span class="line">int money = rs.getInt(&quot;money&quot;);</span><br><span class="line">account.setName(name);</span><br><span class="line">account.setMoney(money);</span><br><span class="line">&#125;</span><br><span class="line">return account;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, 1);</span><br><span class="line">System.out.println(account.toString());*/</span><br><span class="line"></span><br><span class="line">// 接口的实现类-&gt; ResultSetHandler的实现类</span><br><span class="line">// Ctrl + t 实现类</span><br><span class="line">//ResultSetHandler</span><br><span class="line"></span><br><span class="line">// 一个对象查询一个对象使用BeanHandler</span><br><span class="line">Account account = queryRunner.query(&quot;select * from account where id = ?&quot;, new BeanHandler&lt;Account&gt;(Account.class), 1);</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line">/*</span><br><span class="line"> * queryRunner.update(sql);</span><br><span class="line"> * 增删改</span><br><span class="line"> * queryRunner.query(sql, rsh);</span><br><span class="line"> * 查</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">/*queryRunner.update(&quot;insert into account values(null, ?, ?)&quot;, &quot;bbb&quot;, 10000);</span><br><span class="line">queryRunner.update(&quot;delete from account where id = ?&quot;, 8);</span><br><span class="line">queryRunner.update(&quot;update account set money = ? where id = ?&quot;, 0, 10);*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化成两行代码:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-716550bdcbdd7c09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="贴图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Account account = queryRunner.query(&quot;select * from account where id = ?&quot;, new BeanHandler&lt;Account&gt;(Account.class), 1);</span><br><span class="line">System.out.println(account.toString());</span><br></pre></td></tr></table></figure><blockquote><p>查询多个数据</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-5d4dfbddb425954e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查询多个对象</span><br><span class="line">List&lt;Account&gt; list = queryRunner.query(&quot;select * from account&quot;,</span><br><span class="line">new BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">for(Account account : list) &#123;</span><br><span class="line"> System.out.println(account.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.dashucoding.dbutils;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.ResultSetHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.dashucoding.domain.Account;</span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class TestDBUtils &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testInsert() throws SQLException &#123;</span><br><span class="line">//ComboPooledDataSource dataSource = new ComboPooledDataSource(); </span><br><span class="line"></span><br><span class="line">// dbutils 简化了CRUD的代码</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">// 查询的是一个Bean对象</span><br><span class="line">// new 匿名实现类-&gt;new接口的匿名实现类</span><br><span class="line"></span><br><span class="line">/*Account account = queryRunner.query(&quot;select * from account where id = ?&quot;, new ResultSetHandler&lt;Account&gt;() &#123;</span><br><span class="line">// 去执行查询,查询到的数据在result里面,然后调用handle方法,用户手动去封装</span><br><span class="line">@Override</span><br><span class="line">public Account handle(ResultSet rs) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Account account = new Account();</span><br><span class="line"></span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">String name = rs.getString(&quot;name&quot;);</span><br><span class="line">int money = rs.getInt(&quot;money&quot;);</span><br><span class="line">account.setName(name);</span><br><span class="line">account.setMoney(money);</span><br><span class="line">&#125;</span><br><span class="line">return account;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, 1);</span><br><span class="line">System.out.println(account.toString());*/</span><br><span class="line"></span><br><span class="line">// 接口的实现类-&gt; ResultSetHandler的实现类</span><br><span class="line">// Ctrl + t 实现类</span><br><span class="line">//ResultSetHandler</span><br><span class="line"></span><br><span class="line">// 一个对象查询一个对象使用BeanHandler</span><br><span class="line">/*Account account = queryRunner.query(&quot;select * from account where id = ?&quot;,</span><br><span class="line">new BeanHandler&lt;Account&gt;(Account.class), 1);</span><br><span class="line">System.out.println(account.toString());*/</span><br><span class="line"></span><br><span class="line">/*List&lt;Account&gt; account = queryRunner.query(&quot;select * from account&quot;,</span><br><span class="line">new BeanListHandler&lt;Account&gt;(Account.class));*/</span><br><span class="line">// 查询多个对象</span><br><span class="line">List&lt;Account&gt; list = queryRunner.query(&quot;select * from account&quot;,</span><br><span class="line">new BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">for(Account account : list) &#123;</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * queryRunner.update(sql);</span><br><span class="line"> * 增删改</span><br><span class="line"> * queryRunner.query(sql, rsh);</span><br><span class="line"> * 查</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">/*queryRunner.update(&quot;insert into account values(null, ?, ?)&quot;, &quot;bbb&quot;, 10000);</span><br><span class="line">queryRunner.update(&quot;delete from account where id = ?&quot;, 8);</span><br><span class="line">queryRunner.update(&quot;update account set money = ? where id = ?&quot;, 0, 10);*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 通过类的字节码,获得该类的实例:</span><br><span class="line">Account a = new Account();</span><br><span class="line"></span><br><span class="line">Account a1 = Account.class.newInstance();</span><br><span class="line"></span><br><span class="line">new BeanHandler&lt;Account&gt;(Account.class)</span><br><span class="line"></span><br><span class="line">new BeanListHandler&lt;Account&gt;(Account.class)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11158618-38c6f62adadcc132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小结"></p><h2 id="ResultSetHandler-lt-T-gt"><a href="#ResultSetHandler-lt-T-gt" class="headerlink" title="ResultSetHandler&lt;T&gt;"></a><code>ResultSetHandler&lt;T&gt;</code></h2><p>实现类:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-eaeb4582c561c67b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="贴图"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>事务,连接池,DBUtils</p></blockquote><p>查询:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-3156e9e65b334c6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="贴图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line"></span><br><span class="line">queryRunner.update();</span><br><span class="line">queryRunner.query</span><br></pre></td></tr></table></figure><ol><li>事务<br>脏读<br>不可重复读<br>幻读</li></ol><p>丢失更新 写的问题<br>悲观锁 for update<br>乐观锁 ,添加字段版本级别</p><p>4个隔离级别<br>读未提交<br>读已提交<br>可重复读<br>可串行化</p><p>读未提交,引发脏读<br>读已提交,引发不可重复读,解决了脏读</p><p>可重复读,引发了幻读,解决了脏读,不可重复读<br>可串行化(序列化),解决了脏读,不可重复读,幻读,引发效率低下问题</p><p>数据库连接池</p><ol><li>BCP -&gt; 不使用配置 使用配置</li><li>C3P0 -&gt; 不使用配置 使用配置</li><li>自定义连接池 -&gt; 饰者模式</li></ol><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>可在评论发表你的总结内容,做功课哦!</p><p>如果看了觉得不错</p><p>点赞！转发！</p><blockquote><p>达叔小生：往后余生，唯独有你<br>You and me, we are family !<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： 达叔小生<br><a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/40.jpg&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-de1eea934cb6fb28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/categories/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="带你学会Java基础课程" scheme="https://huangguangda.github.io/tags/%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%BC%9AJava%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>公众号开发笔记一</title>
    <link href="https://huangguangda.github.io/2018/10/20/1/"/>
    <id>https://huangguangda.github.io/2018/10/20/1/</id>
    <published>2018-10-20T12:06:52.000Z</published>
    <updated>2018-10-25T12:14:44.332Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/11158618-0caa03f248842845.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信公众平台开发:</p><p>微信公众平台是提供资讯和服务的平台,其中公众平台开发的接口是提供服务的基础.</p><p>在公众平台网站创建公众号,获取接口权限,然后阅读微信公众平台技术文档进行开发.</p><p>用户识别,每个公众号都有对应的一个<code>OpenID</code>.移动应用包含个人以及企业级应用,如果有多个公众号和应用,那么绑定后有多个不同的<code>OpenID</code>,但对这些同一开放平台账号下只有一个<code>UnionID</code>.</p><p>了解<code>UnionID</code>,<strong>用户管理-获取用户基本信息（<code>UnionID</code>机制）文档</strong>,微信公众号开发为这些服务: <strong>移动应用、<code>PC</code>端网站、公众号第三方平台</strong>.</p><p>在申请到认证公众号之前,可以用测试号进行接口测试,<strong>在公众平台官网-开发者中心</strong>查看接口调式的频次.所有接口的调用都需要</p><p><code>access_token</code>为接口调用凭据,<br>且<code>access_token</code>为接口调用凭据在2小时内有效.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取`access_token`有调用接口凭据的文档.</span><br><span class="line">注意:调用接口支持的端口为`80`端口.</span><br></pre></td></tr></table></figure><p>公众号最多的服务看到的是:<strong>公众号消息会话和公众号内网页</strong>,公众号消息会话有:<strong>群发消息(订阅号每天1次，服务号每月4次),被动回复消息,客服消息(微信推送消息与事件说明文档),模板消息(主动向用户发送消息)</strong>,</p><p>被动回复:</p><blockquote><p>文本消息,图片消息,语音消息,视频消息,音乐消息,图文消息</p></blockquote><p>公众号内网页:<strong>网页授权获取用户基本信息(OpenID的获取不用用户同意,获取用户的基本信息就要用户同意),微信JS-SDK(通过JavaScript使用微信原生功能)</strong>,</p><hr><p>开发者规范:</p><blockquote><p>接口的规范限制,调用频率限制,模版消息,用户数据使用规范</p></blockquote><p>用户数据的保护,要明确用户的同意,保证用户的知情权,要保护收集后的数据,不得将用户的数据用在别处,如果腾讯停止了你使用本服务,将要将其收集的数据进行删除.</p><p>公众号接口权限说明:</p><p><strong>微信认证分为<code>资质认证</code>和<code>名称认证</code></strong>,只有认证了才可以获得特有接口.</p><p><strong>订阅号:</strong></p><p>未认证订阅号:获取<code>access_token</code>,获取微信服务器IP地址,接收消息,发送消息-被动回复消息,微信JS-SDK-基础接口,分享接口,图像接口,音频接口,智能接口,设备信息,地理位置,界面操作,微信扫一扫</p><p>微信认证订阅号:获取<code>access_token</code>,获取微信服务器IP地址,接收消息,发送消息-被动回复消息,客服接口,群发接口,模板消息接口,一次性订阅消息接口,用户分组管理,设置用户备注名,获取用户基本信息,获取用户列表,界面丰富-自定义菜单,素材管理-素材管理接口,微信卡券接口-需申请,微信发票接口,微信JS-SDK-基础接口,分享接口,图像接口,音频接口,智能接口,设备信息,地理位置,界面操作,微信扫一扫,微信卡券</p><p><strong>服务号:</strong></p><p>未认证服务号:获取<code>access_token</code>,获取微信服务器IP地址,接收消息,发送消息-被动回复消息,界面丰富-自定义菜单,微信JS-SDK-基础接口,图像接口,音频接口,智能接口,设备信息,地理位置,界面操作,微信扫一扫</p><p>微信认证服务号:啥多有,有的申请就有</p><blockquote><p>全局返回码说明</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-8b4591e8e7fbaa6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-df1db604a7046b43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-2783685ee4404e77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-01559526dc7fcef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-9e72d4b3762ddbc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-2f21145231a7016c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a068c0adbb060626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-6a6e9b3636356774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-beb550c8308e5462.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9"></p><hr><p>入门指引:</p><p>开发微信公众号开发者模式,申请服务器,搭建服务,申请公众号,开发者基本配置,重要事情提前交代</p><p>实现你问我答,接受文本消息,被动回复文本消息,回复<code>success</code>问题,流程图,码代码,在线测试,真实体验</p><p>实现图尚往来,接收图片消息,被动回复图片消息,流程图,码代码</p><p><code>access token</code>,查看<code>appid</code>以及<code>appsecret</code>,获取<code>access token</code>,临时方法获取,接口获取,码代码</p><p>临时素材,新建临时素材,获取临时素材<code>MedialD</code>,下载临时素材,手工体验,接口实现</p><p>永久素材,新建永久素材的方式,手工体验,接口实现,获取永久素材<code>MedialD</code>,获取素材列表,删除永久素材</p><p>自定义菜单,创建菜单界面,完善菜单功能,流程图,码代码,体验,关于反馈问题</p><blockquote><p>开启公众号开发者模式</p></blockquote><p>wiki （多人协作的写作系统）,对接口存在的疑问,直接呼叫客服或者微信投诉.</p><h4 id="申请服务器"><a href="#申请服务器" class="headerlink" title="申请服务器:"></a>申请服务器:</h4><p><code>https://buy.cloud.tencent.com/cvm?tab=lite&amp;loginSet=SET_PASSWORD</code></p><h4 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h4><p>安装<code>python2.7</code>版本以上: <code>https://www.python.org/</code><br>安装<code>web.py</code><br>安装<code>libxml2, libxslt, lxml python</code></p><p><code>python</code>文档: <code>https://docs.python.org/2/</code></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-f1323397df9def07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10"></p><p><code>webpy.org</code>文档: <code>http://webpy.org/</code></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-16ce00c28d01cba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11"></p><h4 id="申请公众号跳过"><a href="#申请公众号跳过" class="headerlink" title="申请公众号跳过"></a>申请公众号跳过</h4><h4 id="开发者基本配置"><a href="#开发者基本配置" class="headerlink" title="开发者基本配置"></a>开发者基本配置</h4><p>找到“基本配置”菜单栏</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-b93b60605a60adf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图12"></p><p>填写配置:</p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-ba8d3cfb5bd9e8c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图13"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-6cb9a639afc74970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图14"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-dcd5bbcff58fb7b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图15"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-a3f971cf44c12bf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图16"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-07e78ff6ca13a0ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图17"></p><hr><h4 id="在线测试"><a href="#在线测试" class="headerlink" title="在线测试"></a>在线测试</h4><p>微信公众平台接口调试工具:</p><p><code>https://mp.weixin.qq.com/debug/</code></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-3c2e22df2e73cc25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图18"></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-8ff254b284d311e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图19"></p><h4 id="AccessToken"><a href="#AccessToken" class="headerlink" title="AccessToken"></a>AccessToken</h4><p>基本配置中: <strong>查看<code>appid</code>(应用<code>ID</code>)及<code>appsecret</code>(应用密钥)</strong>,获取<code>accessToken</code></p><p>微信公众平台接口调试工具: <code>https://mp.weixin.qq.com/debug/</code></p><p>手动到浏览器中查看<code>AccessToken</code>:</p><p><code>https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=###&amp;secret=###</code></p><h4 id="接口的获取需要"><a href="#接口的获取需要" class="headerlink" title="接口的获取需要"></a>接口的获取需要</h4><p>第三方需要: <code>access_token</code></p><p><img src="https://upload-images.jianshu.io/upload_images/11158618-8998074dd08548c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图20"></p><h4 id="关于反馈问题"><a href="#关于反馈问题" class="headerlink" title="关于反馈问题"></a>关于反馈问题</h4><p>请求腾讯客服,微信团队的帮助,提供<code>appid</code></p><hr><blockquote><p>接入指南 <code>https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319</code></p></blockquote><ol><li>进行填写服务器配置</li><li>验证服务器地址的有效性</li><li>根据接口文档实现业务逻辑</li></ol><p>公众平台官网开发中的<strong>基本设置页面</strong>,成为开发者,点击修改配置按钮,</p><p><strong>消息加密代码</strong>: </p><p><code>https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419318479&amp;token=&amp;lang=zh_CN</code></p><p>进行配置完信息后,微信服务器会以<code>GET</code>请求发送参数到<code>URL</code>上,有: <code>signature</code>(微信加密签名), <code>timestamp</code>(时间戳), <code>nonce</code>(随机数), <code>echostr</code>(随机字符串).</p><p>随机字符串参数返回,如果验证成功就成为开发者,随机字符串就如验证码? 加密/校验: <code>token、timestamp、nonce</code>三个参数,拼接成一个字符串,进行<code>signature</code>对比.(有PHP示例代码)</p><p>验证<code>URL</code>后,成为有效开发者.有时候<strong>移动应用、网站、公众帐号</strong>共用账号,微信开放平台（<a href="http://open.weixin.qq.com/" target="_blank" rel="noopener">open.weixin.qq.com</a>）提供了<code>UnionID</code>机制.只有被绑定到微信开发平台账号才有,<code>UnionID</code>是唯一的.</p><p><strong>微信开放平台的资源中心–&gt;移动应用开发–&gt;微信登录–&gt;授权关系接口调用指引–&gt;获取用户个人信息（UnionID机制）</strong></p><blockquote><p>接口域名说明: <code>https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1465199793_BqlKA</code></p></blockquote><blockquote><p>获取<code>access_token</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/11158618-6f94a85e3d768f2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图21"></p><h4 id="接口测试号申请-https-mp-weixin-qq-com-debug-cgi-bin-sandbox-t-sandbox-login"><a href="#接口测试号申请-https-mp-weixin-qq-com-debug-cgi-bin-sandbox-t-sandbox-login" class="headerlink" title="接口测试号申请: https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login"></a>接口测试号申请: <code>https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</code></h4><h4 id="报警排查指引-https-mp-weixin-qq-com-wiki-t-resource-res-main-amp-id-mp1433747358"><a href="#报警排查指引-https-mp-weixin-qq-com-wiki-t-resource-res-main-amp-id-mp1433747358" class="headerlink" title="报警排查指引: https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1433747358"></a>报警排查指引: <code>https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1433747358</code></h4><h4 id="常见问题论坛-https-developers-weixin-qq-com"><a href="#常见问题论坛-https-developers-weixin-qq-com" class="headerlink" title="常见问题论坛: https://developers.weixin.qq.com/"></a>常见问题论坛: <code>https://developers.weixin.qq.com/</code></h4><blockquote><p>微信开放平台文档</p></blockquote><p><code>https://open.weixin.qq.com/</code></p><blockquote><p>往后余生，唯独有你<br>简书作者：达叔小生<br>90后帅气小伙，良好的开发习惯；独立思考的能力；主动并且善于沟通<br>简书博客： <a href="https://www.jianshu.com/u/c785ece603d1" target="_blank" rel="noopener">https://www.jianshu.com/u/c785ece603d1</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>下面我将继续对 其他知识 深入讲解 ，有兴趣可以继续关注</li><li>小礼物走一走 or 点赞</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11158618-0caa03f248842845.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微信公众号开发" scheme="https://huangguangda.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信公众号开发" scheme="https://huangguangda.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>腾讯智慧校园开发平台</title>
    <link href="https://huangguangda.github.io/2018/10/19/1/"/>
    <id>https://huangguangda.github.io/2018/10/19/1/</id>
    <published>2018-10-19T01:42:25.000Z</published>
    <updated>2018-10-19T01:43:27.027Z</updated>
    
    <content type="html"><![CDATA[<p>腾讯智慧校园开发平台</p><a id="more"></a><h2 id="腾讯智慧校园开发平台"><a href="#腾讯智慧校园开发平台" class="headerlink" title="腾讯智慧校园开发平台"></a>腾讯智慧校园开发平台</h2><p><strong>优势:</strong></p><ol><li>智慧校园联合登录</li><li>身份角色同一</li><li>消息推送</li></ol><p><strong>智慧校园接入流程:</strong></p><ol><li>创建应用: 填写网站名称,简介和图标,官网地址等信息</li><li>开发应用:</li><li>提交审核:</li><li>审核通过上线:</li></ol><h2 id="第三方应用使用指引"><a href="#第三方应用使用指引" class="headerlink" title="第三方应用使用指引"></a>第三方应用使用指引</h2><p><strong>第三方应用？</strong></p><ol><li>在“应用管理”-&gt; “本校应用”中看到。</li><li>在“应用管理”-&gt; “第三方应用”-&gt;“应用市场”中找到</li></ol><p><strong>安装后如何使用第三方应用？</strong></p><p>使用其PC管理功能，及移动端功能。</p><ol><li>使用PC管理功能<br>点击图标 -&gt; 进入应用PC管理页面</li><li>使用移动端功能<br>(1) 独立应用<br>可直接进入使用<br>(2) 普通应用<br>配置方法：登录学校后台 -&gt; 左侧菜单“应用管理” -&gt; 在“本校应用”或“第三方应用”下找到应用图标 -&gt; 点击图标右上角小齿轮 -&gt; 进入“应用基本信息”页 -&gt; 找到“移动端配置”</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>OpenAPI调用相关问题</strong></p><blockquote><p>请完整的阅读每篇文档，特别注意必传字段及字段格式和说明</p></blockquote><ol><li>使用开放平台后台”API测试工具”</li><li>对照文档中的代码Demo</li></ol><p><strong>反馈时提供信息</strong></p><ol><li>完整的请求url，包括get参数。</li><li>post的数据。</li><li>返回的code与msg。</li><li>sign签名所用的密钥key。</li><li>提供bug的发生时间，至少要以小时为单位（年-月-日-小时），当然越具体越容易查明问题。</li></ol><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>应用接入指引【重要】</li><li>开放API说明【重要】</li></ul><p><strong>使用哪种方式调用API？</strong> ?–&gt;</p><p>1) 使用开发者方式<br>2) 使用应用（openAppID）方式</p><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p>1) 使用开发者方式<br>1.1) 学校或上级单位自己开发：<br>1.2) 以开发者身份，替学校/上级单位开发：<br>调用方式为devCode+devType+keyId，<br>其中keyId和密钥key需要找学校/上级单位创建者索要</p><h2 id="【开发流程】"><a href="#【开发流程】" class="headerlink" title="【开发流程】"></a>【开发流程】</h2><p>获取devCode、devType、密钥key，用于生成后续的sign签名</p><p>开发者类型:学校/上级单位/合作伙伴/开发者，通过创建应用开发</p><p>调用API时，开发者信息、sign签名密钥获取方式：<br>调用方式:</p><p>openAppID<br>开放平台后台==》应用管理==》查看详情==》AppID、AppSecret</p><h2 id="签名生成的步骤"><a href="#签名生成的步骤" class="headerlink" title="签名生成的步骤"></a>签名生成的步骤</h2><p>第一步：</p><p>设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。<br>特别注意以下重要规则：</p><p>参数名按ASCII码从小到大排序（字典序）；<br>如果参数的值为空不参与传参和签名；<br>参数名区分大小写；<br>get 和 post 参数均参与签名（注意：签名时不要对 get 和 post 的参数进行urlencode）；<br>sign 参数不参与签名；<br>根据HTTP协议要求，传递参数的值中如果存在特殊字符（如：&amp;、@等），那么该值需要做URL Encoding，这样请求接收方才能接收到正确的参数值。这种情况下，待签名数据应该是原始值而不是encoding之后的值。例如：调用某接口需要对请求参数email进行数字签名，那么待签名数据应该是<a href="mailto:email=test@msn.com" target="_blank" rel="noopener">email=test@msn.com</a>，而不是email=test%40msn.com。</p><p>第二步</p><p>在stringA最后拼接上“&amp;key=AppSecret”得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值。</p><p>第三步：</p><p>拼接sign签名，得到最终请求字符串。</p><h2 id="签名算法示例"><a href="#签名算法示例" class="headerlink" title="签名算法示例"></a>签名算法示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;openAppID&quot;:&quot;597882146416&quot;,</span><br><span class="line">    &quot;objectid&quot;:1,</span><br><span class="line">    &quot;objType&quot;:2,</span><br><span class="line">    &quot;userid&quot;:1661,</span><br><span class="line">    &quot;timestamp&quot;:1442401156,</span><br><span class="line">    &quot;data&quot;:&#123;</span><br><span class="line">        &quot;id&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对参数按照key=value的格式，并按照参数名ASCII字典序排序如下：</span><br><span class="line">$stringA=&quot;data[id]=1&amp;data[name]=张三&amp;objType=2&amp;objectid=1&amp;openAppID=597882146416&amp;timestamp=1442401156&amp;userid=YmvhAU762R0done&quot;;</span><br></pre></td></tr></table></figure></p><p>第二步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">拼接API密钥，md5加密并转成大写，生成sign：</span><br><span class="line">$stringSignTemp=&quot;stringA&amp;key=testtoken123456&quot;</span><br><span class="line">$sign = strtoupper(md5($stringSignTemp));</span><br><span class="line">即$sign为：&quot;5F9F67A5635592A132BA935D44B25D40&quot;</span><br></pre></td></tr></table></figure></p><p>第三步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对请求的数据拼接sign签名：</span><br><span class="line">$param = $stringA . &apos;&amp;sign=5F9F67A5635592A132BA935D44B25D40;</span><br></pre></td></tr></table></figure></p><p>最终请求如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://open.campus.qq.com/api/OpenApi/getUserInfo?timestamp=1442401156&amp;data[id]=1&amp;data[name]=张三&amp;objType=2&amp;objectid=1&amp;openAppID=597882146416&amp;userid=1661&amp;</span><br><span class="line">sign=5F9F67A5635592A132BA935D44B25D40</span><br></pre></td></tr></table></figure></p><p>最终请求如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://open.campus.qq.com/api/OpenApi/getUserInfo?timestamp=1442401156&amp;data[id]=1&amp;data[name]=张三&amp;objType=2&amp;objectid=1&amp;openAppID=597882146416&amp;userid=1661&amp;</span><br><span class="line">sign=5F9F67A5635592A132BA935D44B25D40</span><br></pre></td></tr></table></figure></p><blockquote><p>【注意】</p></blockquote><p>密钥key仅作加密使用，为了保证数据安全请不要在请求参数中传递，并对密钥key进行保密。</p><h2 id="校验签名正确性"><a href="#校验签名正确性" class="headerlink" title="校验签名正确性"></a>校验签名正确性</h2><p>签名校验工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=20_1</span><br></pre></td></tr></table></figure></p><p>校验方式：选择“deeplink”或“自定义参数”<br>PS.校验不通过那个提示不用管，只要对比自己代码生成的sign签名，与工具所生成的sign签名是否一致即可</p><h3 id="【开发流程】-1"><a href="#【开发流程】-1" class="headerlink" title="【开发流程】"></a>【开发流程】</h3><p>获取devCode、devType、密钥key，用于生成后续的sign签名，详见签名参数sign生成说明</p><p>==》获取objectid、objType、userid<br>测试id详见开放平台后台-&gt;测试工具-&gt;沙盒测试环境-&gt;沙盒学校objectid</p><p>正式id详见签名参数sign生成说明、应用管理后台接入、应用H5前台接入</p><p>==》查看公共参数文档，详见API公共参数说明</p><p>==》查看API接口文档</p><p>==》根据接口参数，生成和拼接sign签名，详见签名参数sign生成说明</p><p>==》调用接口</p><p>==》调试接口<br>若接口报错，请参照以下顺序排查：<br>仔细阅读接口文档，特别是必传参数及参数格式<br>使用开放平台后台“API测试工具”，进行排查<br>对照文档中的Demo代码<br>若报签名错误，对照签名参数sign生成说明文档和文档中的“签名校验工具”</p><p>2) 使用应用（需创建应用，openAppID）</p><p>【开发流程】</p><p>登录到开放平台后台（open.campus.qq.com）</p><p>==》创建应用</p><p>==》查看应用详情，获取AppID、AppSecret、H5Secret，用于生成后续的sign签名</p><p>==》获取objectid、objType、userid<br>应用上线前，只能使用测试id，获取方式为：开放平台后台-&gt;测试工具-&gt;沙盒测试环境-&gt;沙盒学校objectid</p><p>应用上线后，正式id的获取方式，详见签名参数sign生成说明、应用管理后台接入、应用H5前台接入</p><p>==》查看公共参数文档，详见API公共参数说明</p><p>==》查看API接口文档</p><p>==》根据接口参数，生成和拼接sign签名，详见签名参数sign生成说明</p><p>==》调用接口</p><p>==》调试接口</p><p>==》沙盒测试环境，测试应用</p><p>==》测试应用无误后，申请上线</p><p>==》一般情况下，腾讯智慧校园会在3个工作日内，审核应用</p><p>==》应用审核通过后，学校/上级单位在PC后台-&gt;应用管理-&gt;第三方应用中，安装应用</p><p>==》学校/上级单位，在PC或移动端使用应用时，会将objectid、objType、userid等参数，以url参数追加的形式传递到第三方应用的url中</p><h2 id="【公共参数及签名密钥相关】"><a href="#【公共参数及签名密钥相关】" class="headerlink" title="【公共参数及签名密钥相关】"></a>【公共参数及签名密钥相关】</h2><ol><li>都有哪些公共参数？</li></ol><p>详见文档：开放API调用说明==》API公共参数说明</p><ol start="2"><li>什么是objectid、objType、userid，如何获取它们？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="3"><li>什么是openAppID、AppSecret、H5Secret，如何获取它们？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="4"><li>什么是devCode、devType、授权密钥、授权密钥ID，如何获取它们？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="5"><li>如何生成和校验sign签名？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明，以及文档中的“签名校验工具”</p><h2 id="【OpenAPI调用方式相关】"><a href="#【OpenAPI调用方式相关】" class="headerlink" title="【OpenAPI调用方式相关】"></a>【OpenAPI调用方式相关】</h2><ol><li>API调用说明？</li></ol><p>详见文档：开放API调用说明==》API调用说明</p><ol start="2"><li>post请求参数demo？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="3"><li>OpenAPI调用代码demo？</li></ol><p>详见文档：开放API调用说明==》Demo下载</p><h2 id="【OpenAPI调用出错相关】"><a href="#【OpenAPI调用出错相关】" class="headerlink" title="【OpenAPI调用出错相关】"></a>【OpenAPI调用出错相关】</h2><ol><li>业务错误码及说明</li></ol><p>详见文档：开放API调用说明==》业务错误码</p><ol start="2"><li>接口返回“1018 密钥不存在“或”1010 AppID或密钥不正确”</li></ol><p>请核对devCode、devType、密钥是否匹配，获取方式详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="3"><li>接口返回“1011 参数错误，请检查必传参数及类型”</li></ol><p>请核对是否传了公共参数，并确认post格式是正确的，注意post数据为数组格式</p><p>详见文档：</p><p>开放API调用说明==》API调用说明</p><p>开放API调用说明==》签名参数sign生成说明</p><p>开放API调用说明==》API公共参数说明</p><p>开放API调用说明==》Demo下载</p><ol start="4"><li>接口返回“1002 签名错误”</li></ol><p>详见文档：</p><p>开放API调用说明==》签名参数sign生成说明，以及文档中的“签名校验工具”</p><p>请仔细对照工具中的每个步骤，看看是哪一步不一致。</p><ol start="5"><li>调用发消息接口时，接口返回“1013 该学校/上级单位尚未安装此AppID应用”</li></ol><p>只有学校/上级单位创建者，在PC后台==》应用管理==》第三方应用中，安装了开发者提供的第三方应用，才能调用发消息接口，进行发消息。</p><h2 id="应用接入流程"><a href="#应用接入流程" class="headerlink" title="应用接入流程"></a>应用接入流程</h2><ol><li>简要介绍</li></ol><p>腾讯智慧校园通过开放平台来满足学校/上级单位的定制化开发需求。 学校/上级单位/合作伙伴可在开放平台创建应用、开发调试、提交审核。应用上线后，学校/上级单位可安装使用。</p><p>第三方开发者也可通过智慧校园开放平台创建并提交第三方应用，供所有学校/上级单位使用。</p><ol start="2"><li>应用类型</li></ol><p>腾讯智慧校园开放平台期待各种富于创新、安全稳定，符合校园5大使用场景的应用，包括：</p><p>（1）校内管理类应用</p><p>（2）学生学习类应用</p><p>（3）家校互动类应用</p><p>（4）移动办公类应用</p><p>（5）校园生活类应用</p><ol start="3"><li>如何创建应用</li></ol><p>（1）学校/上级单位：已加入腾讯智慧校园的学校/上级单位，将自动为其开通开放平台权限。学校超级管理员可直接登录到开放平台，创建并申请应用上线</p><p>（2）合作伙伴：签约的合作伙伴，将自动为其开通开放平台权限。合作伙伴管理员可直接登录到开放平台，创建并申请应用上线</p><p>（3）第三方公司/组织单位：需要先申请开发者资质，资质审核通过后，可登录开放平台，创建并申请应用上线。</p><ol start="4"><li>如何开发调试</li></ol><p>（1）应用程序开发</p><p>开发者可以在本地机器上进行应用程序的开发，实现业务逻辑。同时腾讯智慧校园开放平台开放了许多API，建议开发者先阅读API文档，了解不同场景下有哪些API可以调用。</p><p>（2）测试和联调</p><p>腾讯智慧校园开放平台提供的测试工具包含：沙盒学校测试环境、OpenAPI联调工具。详细信息请登录开放平台后查看“测试工具”。</p><ol start="5"><li>如何部署应用</li></ol><p>需要将应用部署在开发者自己的服务器上，因此需要自己准备服务器、域名等，并进行应用部署和测试。腾讯智慧校园暂不为该过程提供技术支持。</p><ol start="6"><li>上线规范</li></ol><p>为确保接入腾讯智慧校园开放平台应用的质量、提高后续运营服务的稳定性，上线前，请开发者按照接入规范对应用进行仔细检查及测试，对于不符合规范项进行修改。详见应用接入规范</p><ol start="7"><li>应用审核</li></ol><p>应用提交后，腾讯智慧校园将在5个工作日内对应用进行审核。审核中无法修改应用信息。审核通过后，应用将自动上线。</p><ol start="8"><li>应用管理</li></ol><p>开发者登录到腾讯智慧校园开放平台后，可以进入到管理中心统一管理应用，管理中心功能主要：</p><p>（1）服务所有开发者；</p><p>（2）服务于应用全生命周期；</p><p>（3）提供依据用户权限的功能；</p><p>（4）具备足够的帮助指引，可以由开发者自助使用。</p><p>详见管理中心使用说明</p><ol start="9"><li>应用安装及使用</li></ol><p>应用上线后，学校/上级单位可按如下步骤安装应用：</p><p>登录学校管理后台 -&gt; 点击“应用管理”右侧的设置按钮 -&gt; 选择“全部应用” -&gt; 点击要安装的应用icon -&gt; 进入安装页面，安装指引进行安装</p><p>安装成功后，使用方式如下：</p><p>若为独立应用：安装成功后应用将自动出现在菜单栏。可在学校管理后台访问其PC管理后台页面，可在微信企业号内使用其移动端功能。<br>若为普通应用：安装成功后需手动配置其移动端地址。可在“应用管理-&gt;我的应用”中访问其PC管理后台页面，可在配置的应用菜单处使用其移动端功能。</p><h2 id="开发api说明"><a href="#开发api说明" class="headerlink" title="开发api说明"></a>开发api说明</h2><ol><li>PC管理后台、H5前台登录态打通</li></ol><p>学校在管理后台【应用市场】安装了开发者的应用后，可以在学校后台【我的应用】==》【应用管理】中，对应用进行管理。</p><p>同时，学校可以将开发者所提供的H5 url粘贴到企业号应用菜单，或应用的H5页面中。</p><p>关于“PC管理后台应用管理登录态打通方案”，请参见“应用管理后台接入”小节。</p><p>关于“H5页面登录态打通方案”，请参见“应用H5前台接入”小节。</p><ol start="2"><li>通过“API列表”中的接口，获取学校/上级单位信息</li></ol><p>在获取登录态的同时，可以获取到学校ID/上级单位ID、用户ID等信息。</p><p>当开发者获取到学校ID、用户ID后，可以调用“API接口列表”中的接口，进一步获取学校/上级单位信息。</p><p>哪些学校和用户可以使用该应用，由【应用详情】中的“使用范围”和“适用人群”决定。开发者只能获取这部分人的信息。</p><h2 id="API调用说明"><a href="#API调用说明" class="headerlink" title="API调用说明"></a>API调用说明</h2><p>1.开发者调用腾讯智慧校园API时，需使用Https协议、UTF8编码，访问域名为<a href="https://open.campus.qq.com" target="_blank" rel="noopener">https://open.campus.qq.com</a> 数据包不需要加密。<br>注：原有域名<a href="https://m.campus.qq.com" target="_blank" rel="noopener">https://m.campus.qq.com</a> 仍可正常使用，但不会再进行功能的升级和维护，并将于2018年底下线。</p><p>2.请求接口的数据为数组格式。</p><p>3.接口返回的数据为json格式。其中GET接口可以通过传入callback参数，兼容jsonp格式。</p><p>4.接口安全校验采用sign签名的方式，sign由密钥key生成（key为第三方应用AppSecret），sign参数的生成算法详见“签名参数sign生成说明”小节。</p><p>5.合作伙伴、第三方开发者通过在开放平台建立第三方应用的方式，使用openAppID（第三方应用ID）+AppSecret（第三方应用密钥）进行开发。</p><p>openAppID、AppSecret的获取方式：开放平台后台：应用管理==》应用详情，openAppID对应AppID</p><p>注意：应用AppSecret仅作加密生成sign签名使用，为了保证数据安全请不要在请求参数中传递，并对应用AppSecret进行严格保密。因自行泄漏密钥导致的数据安全问题，需要自行承担。</p><p>6.在每次调用智慧校园接口时都需要带上openAppID、objectid、objType、timestamp、sign参数。各参数具体含义及获取方式，详见“API公共参数说明”小节</p><p>7.在开发者调用API接口时，腾讯智慧校园会对签名和时间戳进行验证： 腾讯智慧校园会使用同样的sign签名算法判断接收到的sign与计算的签名是否一致，来验证请求来源的合法性；另外，接收到请求时会判断当前时间戳与接收到的timestamp参数是否在一个合理的范围，相差5分钟内才合法，以防止重放攻击。</p><h2 id="API公共参数说明"><a href="#API公共参数说明" class="headerlink" title="API公共参数说明"></a>API公共参数说明</h2><p>“API接口列表”中有一些请求参数是通用的，在此做以下统一说明：</p><p>数据id，如objectid、userid、departid等，最大长度为50位</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;腾讯智慧校园开发平台&lt;/p&gt;
    
    </summary>
    
      <category term="腾讯智慧校园开发平台" scheme="https://huangguangda.github.io/categories/%E8%85%BE%E8%AE%AF%E6%99%BA%E6%85%A7%E6%A0%A1%E5%9B%AD%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="腾讯智慧校园开发平台" scheme="https://huangguangda.github.io/tags/%E8%85%BE%E8%AE%AF%E6%99%BA%E6%85%A7%E6%A0%A1%E5%9B%AD%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发</title>
    <link href="https://huangguangda.github.io/2018/10/18/1/"/>
    <id>https://huangguangda.github.io/2018/10/18/1/</id>
    <published>2018-10-18T01:45:49.000Z</published>
    <updated>2018-10-18T01:47:06.467Z</updated>
    
    <content type="html"><![CDATA[<p>微信公众号开发</p><a id="more"></a><h1 id="微信公众号开发"><a href="#微信公众号开发" class="headerlink" title="微信公众号开发"></a>微信公众号开发</h1><hr><p>request用于网络请求,它是对原生的http request的封装.</p><p>微信的数据包装方式是xml,所以我们要借助ejs这个模板库,把数据作为变量替换到xml字符汇中</p><p>还有一些工具模板:</p><p>lodash是一些常用的方法集,做数组拆分,类型判断等等.Heredoc是一个黑科技,把函数体里面的多行的注解作为字符串提取出来主要用来降低拼接字符串的成本</p><p>raw-body用来获取一个http请求返回的可读流的内容实体.</p><p>sha1进行加密.</p><p>微信服务器返回的数据是xml格式,无法用js函数直接使用,所以要xml2js这个模块把xml数据解析为js对象,方便我们使用.</p><p>微信公众号开发:配置接入流程,加密认证环节,票据access_token.</p><p>利用nodejs开发一些网页或者爬虫工具,来对nodejs api和它的技术特点有一些基本的认知.</p><p>有一些其他的后端经验,php,java,ruby,主要弄明白一个网络http请求从开发到结束中间所经过的环节.</p><p>nodejs和javascript</p><p>进击node.js教程</p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>针对微信常用接口进行一个一个单独讲解和实现,并且有许多小案例演示.</p><p>开发电影公众号的网站项目.</p><p>了解一:本地代理环节的搭建以及最入门的加密认证.</p><p>1.域名服务器环境的配置<br>2.利用qq浏览器代理调式端口</p><p>重点:加密认证逻辑</p><h2 id="微信公众号-企业号-订阅号-服务号"><a href="#微信公众号-企业号-订阅号-服务号" class="headerlink" title="微信公众号:企业号,订阅号,服务号"></a>微信公众号:企业号,订阅号,服务号</h2><p>订阅号:个人,小团队,只要是信息的传播,管理用户以及用户的互动. 如消息定制</p><p>服务,企业和组织,提供业务服务与用户管理能力.比如支付,智能接口.</p><p>企业号,管理全学校所有学院等,各个部门上班人员的考勤,活动进程等.</p><p>服务号,管理全学校的水果商店或者打印店,可以直接支持送货上门,以及推送一些特价水果.</p><p>订阅号,管理一个班级,一个学院的信息订阅,通知和互动.</p><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p>认证和非认证</p><p>认证:一般需要你有个开户过的企业大家可以法人身份去折腾下开一个小公司.</p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>订阅号:认证和非认证账号的区别就是,认证账号别可以直接在添加好友里搜索关键词就能找到你.</p><h2 id="订阅号和服务号三点不同"><a href="#订阅号和服务号三点不同" class="headerlink" title="订阅号和服务号三点不同"></a>订阅号和服务号三点不同</h2><p>出现位置不同.<br>单月发送消息的数量,订阅号一天一篇,服务号一个月最多4篇.<br>订阅号没有9大接口和支付功能.</p><h2 id="服务号9大接口"><a href="#服务号9大接口" class="headerlink" title="服务号9大接口"></a>服务号9大接口</h2><p>1.语音识别<br>2.客服接口<br>3.OAuth 2.0网页的授权:这个授权接口,可以请求用户授权,从而拿到更多用户的信息.</p><p>4.生成带参数二维码:<br>公众号可以获取一系列携带不同参数的二维码,在用户扫描关注公众号后.<br>公众号可以根据参数分析各二维码的效果.这些参数可以自己定制,从而可以实现更多分析结果,比如用户从哪里来的.</p><p>5.获取用户的地理位置:公众号能够获得用户进入公众号会话时的地理位置.可以做微信导航.</p><p>6.获取用户基本信息:公众号可以根据加密后的用户OpenID,通过一系列的参数交互,最终拿到用户基础信息,包括头像,名称,性别,地区.</p><p>7.获取关注者的列表:通过这个接口,可以拿到所有关注者的OpenID,就知道有多少人关注你,是谁在关注你.<br>8.用户分组接口:通过分组接口,可以在后台为用户移动,创建,修改分组,比如把你们班级你们团队分成,男生一组,女生一组<br>9.上传下载多媒体文件</p><h2 id="订阅号"><a href="#订阅号" class="headerlink" title="订阅号"></a>订阅号</h2><p>1.会话界面的自定义菜单<br>2.多客服接口<br>3.获取用户地址位置<br>4.高级群发接口<br>5.用户分组接口</p><h2 id="域名-服务器以及ngrok环境"><a href="#域名-服务器以及ngrok环境" class="headerlink" title="域名,服务器以及ngrok环境"></a>域名,服务器以及ngrok环境</h2><p>微信<->服务器<->域名<->应用服务器<->微信</-></-></-></-></p><p>./ngork</p><blockquote><p><a href="http://www.tunnel.mobl" target="_blank" rel="noopener">www.tunnel.mobl</a></p></blockquote><p>使用:<br>下载配置文件ngrok.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok -config ngrok.cfg - subdomain example 8080</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">cd text</span><br><span class="line">ls</span><br><span class="line">// 写一个简单的服务器</span><br><span class="line">python m SimpleHTTPServer 3100</span><br><span class="line">python -m SimpleHTTPServer 3100</span><br><span class="line">-config ngrok.cfg subdomain imooc-wechat 3100</span><br></pre></td></tr></table></figure><p>子域名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://imooc-wechat.tunnel.mobi</span><br></pre></td></tr></table></figure><p>使用nodejs的localtunnel服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g localtunnel</span><br><span class="line">lt --port 3100</span><br></pre></td></tr></table></figure><blockquote><p>PageKite 花生壳</p></blockquote><h2 id="配置-接入微信公众号"><a href="#配置-接入微信公众号" class="headerlink" title="配置,接入微信公众号"></a>配置,接入微信公众号</h2><p>点击开发者工具:接口测试申请</p><p>获取:<br>url<br>token</p><p>接入公众号:</p><p>一:配置微信公众号后台<br>二:验证公众号</p><p>配置服务器的url</p><h2 id="验证公众号"><a href="#验证公众号" class="headerlink" title="验证公众号"></a>验证公众号</h2><p>token,timestamp,nonce<br>字典排序,sha1加密<br>r===signature</p><p>一:将token,timestamp,nonce三个参数进行字典序排序<br>二:将三个参数字符串拼接成一个字符串进行sha1加密.<br>三:将加密后的字符串与signature对比,如果相同,表示这个请求来源于微信,我们直接原因返回echostr参数内容,接入验证就成功了.</p><h2 id="实现加密认证逻辑"><a href="#实现加密认证逻辑" class="headerlink" title="实现加密认证逻辑"></a>实现加密认证逻辑</h2><blockquote><p>使用koa,不用express</p></blockquote><p>使用Koa框架,代码可以更加精简,更加易懂,对于反反复复的异步交互更适合用这个框架实现.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scott/wechat &gt;&gt;</span><br><span class="line"></span><br><span class="line">npm install koa sha1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">node --harmony app.js</span><br><span class="line"></span><br><span class="line">&gt;&gt; ./ngrok -config ngrok.cfg -subdomain scott_wechat 1234</span><br><span class="line"></span><br><span class="line">ls --port 1234</span><br><span class="line">// 把生成的地址配置到接口配置信息中url里面去</span><br><span class="line"></span><br><span class="line">node --harmony app</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1433401084</span><br></pre></td></tr></table></figure><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol><li>填写服务器配置</li><li>验证服务器地址的有效性</li><li>根据接口文档实现业务逻辑</li></ol><p>我们在手机上给微信公众号发送一个消息，这就相当于一个request请求，然后这个request到达微信服务器，紧接着微信服务器对这个request做出解析，然后开始响应一个response给你，这样你就收到了相应的回复。</p><p>当我们进行微信公众号的开发之后，用户的请求就不再有微信服务器去做处理了，而是由我们自己的服务做处理，然后把消息传给微信服务器，微信服务器再将消息返回给我们的用户。</p><p>在这个过程中，微信服务器起了一个中间商的作用，所以经过这样的分析，微信公众号开发要把握的一点就是，你只要返回给微信服务器正确的数据，微信服务器就能帮你做正确的事情。</p><p>所以作为微信公众号开发的第一步就是接入，你需要将自己的服务器和微信服务器做接通，只有接通之后，用户发送的请求到达微信服务器之后，微信服务器才知道该将这个请求转发给哪个服务器来处理。</p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>这个url是用来接收微信服务器发送过来的请求的，要对请求做处理？想一想，request？处理？该怎么做呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class OneServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">       super.doGet(req, resp);</span><br><span class="line">   &#125;</span><br><span class="line">   @Override</span><br><span class="line"></span><br><span class="line">   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">       super.doPost(req, resp);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="需要"><a href="#需要" class="headerlink" title="需要"></a>需要</h2><p>服务器<br>公众号</p><p>申请测试号<br>这里是申请地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</span><br></pre></td></tr></table></figure><p>appID 和appsecret </p><p>通过他们我们能得到很重要的一个数值就access_token<br>access_token是公众号的全局唯一接口调用凭据</p><p>公众号调用各接口时都需使用access_token</p><h2 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access_token"></a>获取access_token</h2><p>官方技术文档中已经说了，公众号调用接口都需要使用到access_token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// https请求方式: GET</span><br><span class="line">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant_type是获取access_token填写client_credential</span><br><span class="line">appid是第三方用户唯一凭证</span><br><span class="line">secret是第三方用户唯一凭证密钥，即appsecret</span><br></pre></td></tr></table></figure><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>这个接口正确调用会返回什么数据呢？</p><p>正常情况下会返回下述JSON数据包给公众号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200&#125;</span><br></pre></td></tr></table></figure><p>那么这里又包含如下参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_token获取到的凭证</span><br><span class="line">expires_in凭证有效时间，单位：秒</span><br></pre></td></tr></table></figure></p><p>使用Postman这个工具简单演示一下发起get请求获取access_token 。</p><p>然后把响应的参数填写即可，这里的grant_type 就写默认的即可，剩下的appid和secret就填写你公众号的appID 和appsecret。</p><p>这个时候你就会发现，一个完整的get请求就拼接好了，接下来点击send即可，然后就会看到返回的数据</p><p>这样就得到我们需要的access_token 。</p><p>微信服务器会往我们填写的这个URL上面发送一个get请求，通过这个get请求能够得到微信服务器发送过来的一些消息，然后对消息做响应的处理来与微信服务器对接。</p><p>很显然，这个URL需要填写一个servlet，微信服务区器将消息发送过来之后需要对这个请求做处理，所以这里选择使用servlet对请求做处理。</p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>关于如何验证，文档中给了一个PHP的例子，那么Java中该如何验证呢？</p><p>首先创建一个maven项目，然后创建一个CoreServlet用来接收微信服务器发送过来的请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class CoreServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        super.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        super.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完成servlet之后就需要将这个servlet进行注册了，这个是在web.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line">           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">           xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee</span><br><span class="line">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span><br><span class="line">           version=&quot;3.0&quot;&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;coreServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;</span><br><span class="line">            com.ithuanqging.wechat.CoreServlet</span><br><span class="line">        &lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;!-- url-pattern中配置的/coreServlet用于指定该Servlet的访问路径 --&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;coreServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/coreservlet&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>填写服务器地址（URL）、Token和EncodingAESKey，其中URL是开发者用来接收微信消息和事件的接口URL。Token可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。EncodingAESKey由开发者手动填写或随机生成，将用作消息体加解密密钥。</p><p>开发者可选择消息加解密方式：明文模式、兼容模式和安全模式。</p><h2 id="第二步：验证消息的确来自微信服务器"><a href="#第二步：验证消息的确来自微信服务器" class="headerlink" title="第二步：验证消息的确来自微信服务器"></a>第二步：验证消息的确来自微信服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">signature微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</span><br><span class="line">timestamp时间戳</span><br><span class="line">nonce随机数</span><br><span class="line">echostr随机字符串</span><br></pre></td></tr></table></figure><p>1）将token、timestamp、nonce三个参数进行字典序排序 2）将三个参数字符串拼接成一个字符串进行sha1加密 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p><p>检验signature的PHP示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private function checkSignature()</span><br><span class="line">&#123;</span><br><span class="line">    _GET[&quot;signature&quot;];</span><br><span class="line">    _GET[&quot;timestamp&quot;];</span><br><span class="line">    _GET[&quot;nonce&quot;];</span><br><span class="line"></span><br><span class="line">tmpArr = array(timestamp, $nonce);</span><br><span class="line">sort($tmpArr, SORT_STRING);</span><br><span class="line">$tmpStr = implode( $tmpArr );</span><br><span class="line">$tmpStr = sha1( $tmpStr );</span><br><span class="line"></span><br><span class="line">if( signature )&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">      // 微信加密签名</span><br><span class="line">      String signature = req.getParameter(&quot;signature&quot;);</span><br><span class="line">      // 时间戳</span><br><span class="line">      String timestamp = req.getParameter(&quot;timestamp&quot;);</span><br><span class="line">      // 随机数</span><br><span class="line">      String nonce = req.getParameter(&quot;nonce&quot;);</span><br><span class="line">      // 随机字符串</span><br><span class="line">      String echostr = req.getParameter(&quot;echostr&quot;);</span><br><span class="line"></span><br><span class="line">      PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">      // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败</span><br><span class="line">      if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">          out.print(echostr);</span><br><span class="line">      &#125;</span><br><span class="line">      out.close();</span><br><span class="line">      out = null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>##<br>微信测试公众号基本配置URL和Token的验证-JAVA</p><p>我们填写的URL和Token，微信那边会根据你填的来验证是否正确，URL必须有域名的，Token自己定义的。</p><p>微信调用我们服务器，会通过GET请求，请求带有signature、timestamp、nonce、echostr参数。服务端返回echostr参数，则表示token验证成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">       @GET</span><br><span class="line">@Path(&quot;/tokenVarify&quot;)</span><br><span class="line">@Produces(MediaType.APPLICATION_JSON)</span><br><span class="line">@Consumes(MediaType.APPLICATION_JSON)</span><br><span class="line">@ApiOperation(value = &quot;Vatify wc token&quot;, position = 1)</span><br><span class="line">public void tokenVarify(@Context HttpServletRequest request,</span><br><span class="line">@Context HttpServletResponse response) &#123;</span><br><span class="line">boolean isGet = request.getMethod().toLowerCase().equals(&quot;get&quot;);</span><br><span class="line">PrintWriter print;</span><br><span class="line">if (isGet) &#123;</span><br><span class="line">           // 微信加密签名</span><br><span class="line">           String signature = request.getParameter(&quot;signature&quot;);</span><br><span class="line">           // 时间戳</span><br><span class="line">           String timestamp = request.getParameter(&quot;timestamp&quot;);</span><br><span class="line">           // 随机数</span><br><span class="line">           String nonce = request.getParameter(&quot;nonce&quot;);</span><br><span class="line">           // 随机字符串</span><br><span class="line">           String echostr = request.getParameter(&quot;echostr&quot;);</span><br><span class="line">           // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败</span><br><span class="line">           if (signature != null &amp;&amp; CheckoutUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   print = response.getWriter();</span><br><span class="line">                   print.write(echostr);</span><br><span class="line">                   print.flush();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CheckoutUtil.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import java.security.MessageDigest;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line"> </span><br><span class="line">public class CheckoutUtil &#123;</span><br><span class="line">// 与接口配置信息中的Token要一致</span><br><span class="line">    private static String token = &quot;bryant.zhang.test&quot;;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 验证签名</span><br><span class="line">     * </span><br><span class="line">     * @param signature</span><br><span class="line">     * @param timestamp</span><br><span class="line">     * @param nonce</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean checkSignature(String signature, String timestamp, String nonce) &#123;</span><br><span class="line">        String[] arr = new String[] &#123; token, timestamp, nonce &#125;;</span><br><span class="line">        // 将token、timestamp、nonce三个参数进行字典序排序</span><br><span class="line">        // Arrays.sort(arr);</span><br><span class="line">        sort(arr);</span><br><span class="line">        StringBuilder content = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            content.append(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        MessageDigest md = null;</span><br><span class="line">        String tmpStr = null;</span><br><span class="line"> </span><br><span class="line">        try &#123;</span><br><span class="line">            md = MessageDigest.getInstance(&quot;SHA-1&quot;);</span><br><span class="line">            // 将三个参数字符串拼接成一个字符串进行sha1加密</span><br><span class="line">            byte[] digest = md.digest(content.toString().getBytes());</span><br><span class="line">            tmpStr = byteToStr(digest);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        content = null;</span><br><span class="line">        // 将sha1加密后的字符串可与signature对比，标识该请求来源于微信</span><br><span class="line">        return tmpStr != null ? tmpStr.equals(signature.toUpperCase()) : false;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 将字节数组转换为十六进制字符串</span><br><span class="line">     * </span><br><span class="line">     * @param byteArray</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String byteToStr(byte[] byteArray) &#123;</span><br><span class="line">        String strDigest = &quot;&quot;;</span><br><span class="line">        for (int i = 0; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            strDigest += byteToHexStr(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return strDigest;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 将字节转换为十六进制字符串</span><br><span class="line">     * </span><br><span class="line">     * @param mByte</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String byteToHexStr(byte mByte) &#123;</span><br><span class="line">        char[] Digit = &#123; &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos; &#125;;</span><br><span class="line">        char[] tempArr = new char[2];</span><br><span class="line">        tempArr[0] = Digit[(mByte &gt;&gt;&gt; 4) &amp; 0X0F];</span><br><span class="line">        tempArr[1] = Digit[mByte &amp; 0X0F];</span><br><span class="line">        String s = new String(tempArr);</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void sort(String a[]) &#123;</span><br><span class="line">        for (int i = 0; i &lt; a.length - 1; i++) &#123;</span><br><span class="line">            for (int j = i + 1; j &lt; a.length; j++) &#123;</span><br><span class="line">                if (a[j].compareTo(a[i]) &lt; 0) &#123;</span><br><span class="line">                    String temp = a[i];</span><br><span class="line">                    a[i] = a[j];</span><br><span class="line">                    a[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="qi文档中说的真的很清楚了，包括如何验证等表述的都很清楚，下面我们直接编码"><a href="#qi文档中说的真的很清楚了，包括如何验证等表述的都很清楚，下面我们直接编码" class="headerlink" title="qi文档中说的真的很清楚了，包括如何验证等表述的都很清楚，下面我们直接编码"></a>qi文档中说的真的很清楚了，包括如何验证等表述的都很清楚，下面我们直接编码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">      // 微信加密签名</span><br><span class="line">      String signature = req.getParameter(&quot;signature&quot;);</span><br><span class="line">      // 时间戳</span><br><span class="line">      String timestamp = req.getParameter(&quot;timestamp&quot;);</span><br><span class="line">      // 随机数</span><br><span class="line">      String nonce = req.getParameter(&quot;nonce&quot;);</span><br><span class="line">      // 随机字符串</span><br><span class="line">      String echostr = req.getParameter(&quot;echostr&quot;);</span><br><span class="line"></span><br><span class="line">      PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">      // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败</span><br><span class="line">      if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">          out.print(echostr);</span><br><span class="line">      &#125;</span><br><span class="line">      out.close();</span><br><span class="line">      out = null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上是从request请求中拿到传过来的参数，接下来就是需要创建一个工具类按照文档中说的方法去进行验证了，这里我已经写好了这个工具类SignUtil</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class SignUtil &#123;</span><br><span class="line">    // 与接口配置信息中的Token要一致</span><br><span class="line">    private static String token = &quot;mytoken&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证签名</span><br><span class="line">     */</span><br><span class="line">    public static boolean checkSignature(String signature, String timestamp,String nonce) &#123;</span><br><span class="line">        // 1.将token、timestamp、nonce三个参数进行字典序排序</span><br><span class="line">        String[] arr = new String[] &#123; token, timestamp, nonce &#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        // 2. 将三个参数字符串拼接成一个字符串进行sha1加密</span><br><span class="line">        StringBuilder content = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            content.append(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        MessageDigest md = null;</span><br><span class="line">        String tmpStr = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            md = MessageDigest.getInstance(&quot;SHA-1&quot;);</span><br><span class="line">            // 将三个参数字符串拼接成一个字符串进行sha1加密</span><br><span class="line">            byte[] digest = md.digest(content.toString().getBytes());</span><br><span class="line">            tmpStr = byteToStr(digest);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        content = null;</span><br><span class="line">        // 3.将sha1加密后的字符串可与signature对比，标识该请求来源于微信</span><br><span class="line">        return tmpStr != null ? tmpStr.equals(signature.toUpperCase()) : false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将字节数组转换为十六进制字符串</span><br><span class="line">     */</span><br><span class="line">    private static String byteToStr(byte[] byteArray) &#123;</span><br><span class="line">        String strDigest = &quot;&quot;;</span><br><span class="line">        for (int i = 0; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            strDigest += byteToHexStr(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return strDigest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将字节转换为十六进制字符串</span><br><span class="line">     */</span><br><span class="line">    private static String byteToHexStr(byte mByte) &#123;</span><br><span class="line">        char[] Digit = &#123; &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;A&apos;,&apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos; &#125;;</span><br><span class="line">        char[] tempArr = new char[2];</span><br><span class="line">        tempArr[0] = Digit[(mByte &gt;&gt;&gt; 4) &amp; 0X0F];</span><br><span class="line">        tempArr[1] = Digit[mByte &amp; 0X0F];</span><br><span class="line">        String s = new String(tempArr);</span><br><span class="line">        return s;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>以上这个工具类你可以直接拿来使用。</p><p>这个时候就要回到我们的测试公众号后台了，去填写我们的配置，也就是接口配置信息，但是现在你写的程序还在本地，微信即使发送请求也发不到你这啊，所以这个时候需要将的项目打包传到你的服务器上</p><p>首先将你的项目通过maven打包成war</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G:\JavaCodeDemo\wechattest:mvn package</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wechattest &gt; target &gt;</span><br><span class="line">classes</span><br><span class="line">generated-sources</span><br><span class="line">maven-archiver</span><br><span class="line">maven-status</span><br><span class="line">wechattest</span><br><span class="line">wechattest.war</span><br></pre></td></tr></table></figure><p>接下来将这个war包上传到你的服务器上，我这里使用的是FileZilla这个工具</p><p>找到刚才生成的war包，远程站点必须是tomcat下的webapps目录下。</p><p>服务器配置的知识涉及到在服务器中安装JDK和tomcat！</p><p>现在只要告诉微信服务器你的这个项目中的CoreServlet的正确路径，就能接收微信服务器发动的消息了，现在回到测试公众号的后台。</p><p>接口配置信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务器公网IP地址</span><br><span class="line">coreservlet的路径</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://139.199.98.152/wechattest/coreservlet</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信公众号开发&lt;/p&gt;
    
    </summary>
    
      <category term="微信公众号开发" scheme="https://huangguangda.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信公众号开发" scheme="https://huangguangda.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>腾讯智慧校园开发平台1</title>
    <link href="https://huangguangda.github.io/2018/05/18/1/"/>
    <id>https://huangguangda.github.io/2018/05/18/1/</id>
    <published>2018-05-18T07:12:23.000Z</published>
    <updated>2018-10-19T07:27:44.490Z</updated>
    
    <content type="html"><![CDATA[<p>腾讯智慧校园开发平台1</p><a id="more"></a><p>OpenAPI参数：</p><p>openAppID（或devCode、devType、keyId）、<br>timestamp、sign、objectid、objType</p><p>openAppID（第三方应用ID）+AppSecret（第三方应用密钥）</p><p>openAppID、AppSecret的获取方式：开放平台后台：应用管理==》应用详情，openAppID对应AppID</p><p>请求接口的数据为数组格式</p><p>接口返回的数据为json格式。其中GET接口可以通过传入callback参数，兼容jsonp格式</p><p>接口安全校验采用sign签名的方式，sign由密钥key生成（key为第三方应用AppSecret），sign参数的生成算法详见“签名参数sign生成说明”小节。</p><p>每次调用智慧校园接口时都需要带上openAppID、objectid、objType、timestamp、sign参数。</p><p>openAppID第三方应用的AppID，请从开发者后台获取。<br>objType    object类型（1：上级单位，2：学校）<br>objectid 学校id。有2种获取方式：1.由学校提供。路径：学校/上级单位后台==》开发==》接口授权==》objectid（仅创建者可见）；2.已创建第三方应用，且学校已安装和使用该应用时，可由腾讯智慧校园在url中返回。详见应用管理后台接入和应用H5前台接入<br>sign 接口签名。sign是由应用“开发者密钥或学校授权码”和未经URL-encode的请求字符串计算获取，sign的生成规则参考签名参数sign生成说明小节<br>timestamp 10位/13位时间戳，请确保服务器时间与北京时间一致。否则会导致接口校验失败，报“时间戳错误”。</p><p>通过“API列表”中的接口，获取学校/上级单位信息</p><p>在获取登录态的同时，可以获取到学校ID/上级单位ID、用户ID等信息。</p><p>当开发者获取到学校ID、用户ID后，可以调用“API接口列表”中的接口，进一步获取学校/上级单位信息。</p><p>哪些学校和用户可以使用该应用，由【应用详情】中的“使用范围”和“适用人群”决定。开发者只能获取这部分人的信息。</p><p>请求示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.campus.qq.com/api/open/sendMsg?timestamp=TIMESTAMP&amp;sign=SIGN&amp;openAppID=OPENAPPID&amp;objectid=OBJECTID&amp;objType=OBJTYPE</span><br></pre></td></tr></table></figure></p><p>wxuserid 接收消息的用户微信ID列表<br>wxdepartid 接收消息的部门微信ID列表</p><h2 id="OpenAPI调用相关问题"><a href="#OpenAPI调用相关问题" class="headerlink" title="OpenAPI调用相关问题"></a>OpenAPI调用相关问题</h2><p>【公共参数及签名密钥相关】</p><ol><li>都有哪些公共参数？</li></ol><p>详见文档：开放API调用说明==》API公共参数说明</p><ol start="2"><li>什么是objectid、objType、userid，如何获取它们？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="3"><li>什么是openAppID、AppSecret、H5Secret，如何获取它们？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="4"><li>什么是devCode、devType、授权密钥、授权密钥ID，如何获取它们？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="5"><li>如何生成和校验sign签名？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明，以及文档中的“签名校验工具”</p><p>【OpenAPI调用方式相关】</p><ol><li>API调用说明？</li></ol><p>详见文档：开放API调用说明==》API调用说明</p><ol start="2"><li>post请求参数demo？</li></ol><p>详见文档：开放API调用说明==》签名参数sign生成说明</p><ol start="3"><li>OpenAPI调用代码demo？</li></ol><p>详见文档：开放API调用说明==》Demo下载</p><p>调用API时，开发者信息、sign签名密钥获取方式：<br>开放平台后台==》应用管理==》查看详情==》AppID、AppSecret</p><p>objectid获取方式：<br>学校/上级单位后台==》基本信息==》objectid（仅创建者可见）</p><p>userid有以下几种获取方式：<br>1.通过开放API获取，详见文档 API接口列表==》获取/搜索用户列表<br>2.在学校/上级单位/教师工作台后台，应用管理的iframe url参数中返回，详见文档 应用接入指引==》应用管理后台接入。前提是此应用提供了管理后台url/教师工作台url，并且此应用已被学校/上级单位安装。<br>3.当用户在手机上使用第三方应用时，在H5 url参数中返回，详见文档 应用接入指引==》应用H5前台接入。前提是此应用提供了移动端url，并且此应用已被学校/上级单位安装。</p><h2 id="微信登录插件"><a href="#微信登录插件" class="headerlink" title="微信登录插件"></a>微信登录插件</h2><p>第三方应用接入智慧校园微信登录插件后，学校用户可使用智慧校园绑定的微信号登录第三方应用，登录后将向第三方返回用户的智慧校园userid，可通过userid查询用户的其他信息。</p><p>智慧校园提供H5和PC端的微信登录插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AppID：</span><br><span class="line">AppSecret：</span><br><span class="line">H5Secret：</span><br></pre></td></tr></table></figure><p>通过openAppID+AppSecret方式请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.campus.qq.com/api/open/getObjectInfo?timestamp=TIMESTAMP&amp;objectid=OBJECTID&amp;objType=OBJTYPE&amp;openAppID=OPENAPPID&amp;sign=SIGN</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.campus.qq.com/api/open/getObjectInfo?openAppID=521430153974</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;腾讯智慧校园开发平台1&lt;/p&gt;
    
    </summary>
    
      <category term="腾讯智慧校园开发平台" scheme="https://huangguangda.github.io/categories/%E8%85%BE%E8%AE%AF%E6%99%BA%E6%85%A7%E6%A0%A1%E5%9B%AD%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="腾讯智慧校园开发平台" scheme="https://huangguangda.github.io/tags/%E8%85%BE%E8%AE%AF%E6%99%BA%E6%85%A7%E6%A0%A1%E5%9B%AD%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>HTML入门教材</title>
    <link href="https://huangguangda.github.io/2018/05/17/1/"/>
    <id>https://huangguangda.github.io/2018/05/17/1/</id>
    <published>2018-05-17T03:48:02.000Z</published>
    <updated>2018-10-19T12:04:26.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><h2 id="HTML-基本结构及实体"><a href="#HTML-基本结构及实体" class="headerlink" title="HTML 基本结构及实体"></a>HTML 基本结构及实体</h2><ul><li>了解 HTML 文档的基本结构</li><li>掌握 HTML 结构标签<html><head><title><body></body></title></head></html></li><li>掌握 HTML 字符实体</li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h4 id="HTML-文件是什么？"><a href="#HTML-文件是什么？" class="headerlink" title="HTML 文件是什么？"></a>HTML 文件是什么？</h4><p>HTML 表示超文本标记语言（Hyper Text Markup Language）。<br>HTML 文件是一个包含标记的文本文件。<br>这些标记保证浏览器怎样显示这个页面。<br>HTML 文件必须有 htm 或者 html 扩展名。<br>HTML 文件可以用一个简单的文本编辑器创建。</p><h4 id="想不想尝试一下？"><a href="#想不想尝试一下？" class="headerlink" title="想不想尝试一下？"></a>想不想尝试一下？</h4><p>假如你运行的是 windows 系统，打开记事本，在其中输入以下文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title of page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">This is my first homepage.</span><br><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将此文件保存为“mypage.htm”。</p><h4 id="例子解释"><a href="#例子解释" class="headerlink" title="例子解释:"></a>例子解释:</h4><p>HTML 文档中，第一个标签是<html>。</html></p><p>这个标签告诉浏览器这是 HTML 文档的开始。</p><p>HTML</p><p>文档的最后一个标签是，这个标签告诉浏览器这是 HTML 文档的终止。</p><p>在<head>和</head>标签之间文本的是头信息。</p><p>在浏览器窗口中，头信息是不被显示的 。</p><p>在<title>和</title>标签之间的文本是文档标题，它被显示在浏览器窗口的标题栏 。</p><p>在<body>和</body>标签之间的文本是正文，会被显示在浏览器中。</p><p>在<b>和</b>标签之间的文本会以加粗字体显示。</p><h4 id="关于-HTML-编辑器："><a href="#关于-HTML-编辑器：" class="headerlink" title="关于 HTML 编辑器："></a>关于 HTML 编辑器：</h4><p>用一些所见即所得的编辑器，比如 frontpage，dreamwaver，你可以很容易创建一个<br>页面，而不需要在纯文本中编写代码。</p><p>但是假如你想成为一名熟练的网络开发者，我们强烈推荐你用纯文本编辑器编写代码 ，<br>这有助于学习 HTML 基础。</p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题:"></a>常见问题:</h4><p>问：我编写完了 HTML 文件，但是不能在浏览器中看见结果，为什么？</p><p>答 ： 请确 认 你 保 存了 文 件 ， 并且 使 用 了 正确 的 文 件 名和 扩 展 名 ，例 如 ：<br>“c:\mypage.htm”，并且确认你用浏览器打开时使用同样的文件名。</p><p>问：我编辑了 HTML 文件，但是修改结果并没有在浏览器中显示，为什么？</p><p>答：浏览器缓存了你的页面，所以它不需要两次读取同样的页面。你修改了这个页面 ，<br>浏览器并不知道。请使用“刷新/重载”按钮来强迫浏览器读取编辑过的页面。</p><h4 id="HTML-元素："><a href="#HTML-元素：" class="headerlink" title="HTML 元素："></a>HTML 元素：</h4><p>HTML 文档是由 HTML 元素组成的文本文件。</p><p>HTML 元素是预定义的正在使用的 HTML 标签。</p><h5 id="HTML-标签："><a href="#HTML-标签：" class="headerlink" title="HTML 标签："></a>HTML 标签：</h5><p>HTML 标签用来组成 HTML 元素。</p><p>HTML 标签两端有两个包括字符：“&lt;”和“&gt;”,这两个包括字符被称为角括号。</p><p>HTML 标签通常成对出现，比如<b>和</b>。</p><p>一对标签的前面一个是开始标签，第二个是结束标签,在开始和结束标签之间的文本是元素内容。</p><p>HTML 标签是大小写无关的，<b>跟<b>表示的意思是一样的。</b></b></p><h5 id="HTML-元素：-1"><a href="#HTML-元素：-1" class="headerlink" title="HTML 元素："></a>HTML 元素：</h5><p>回忆一下上面的 HTML 例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title of page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">This is my first homepage.</span><br><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>下面是一个 HTML 元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br></pre></td></tr></table></figure></p><p>此 HTML 元素以开始标签<b>起始， 内容是：This text is bold，以结束标签</b>中止 。</p><p><b>标签的目的是定义一个需要被显示成粗体的 HTML 元素。</b></p><p>下面也是一个 HTML 元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">This is my first homepage.</span><br><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>此 HTML 标签以开始标签<body>起始，终止于结束标签<script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"live2d-widget-model-hibiki"},"display":{"position":"right","width":75,"height":150},"mobile":{"show":false},"log":false});</script></body>。</p><p><body>标签的目的</body></p><p>是定义一个 HTML 元素，使其包含 HTML 文档的主体。</p><p>为什么使用小写标签？</p><p>我们刚说过，HTML 标签是大小写无关的：</p><p><b>跟<b>含义相同。</b></b></p><p>当你上网的时候，你会注意到多数教程在示例中使用大写的 HTML 标签，我们总是使用小写标签。</p><p>为什么？</p><p>假如你想投入到下一代 HTML 中，你应该开始使用小写标签。</p><p>W3C 在他们的 HTML4建议中提倡使用小写标签，XHTML（下一代 HTML）也需要小写标签。</p><h5 id="标签属性："><a href="#标签属性：" class="headerlink" title="标签属性："></a>标签属性：</h5><p>标签可以拥有属性。</p><p>属性能够为页面上的 HTML 元素提供附加信息。</p><p>标签<body>定义了 HTML 页面的主体元素。</body></p><p>使用一个附加的 bgcolor 属性，你可以告诉浏览器：你页面的背景色是红色的，就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body bgcolor=&quot;red&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>标签<table>定义了一个 HTML 表格。</table></p><p>使用一个附加的 border 属性，你可以告诉浏览器：这个表格是没有边框的，代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;0&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>属性通常由属性名和值成对出现，就像这样：name=”value”。</p><p>属性通常是附加给 HTML元素的开始标签的。</p><h4 id="引号样式："><a href="#引号样式：" class="headerlink" title="引号样式："></a>引号样式：</h4><p>属性值应该被包含在引号中。<br>双引号是最常用的，但是单引号也可以使用。</p><p>在很少情况下，比如说属性值本身包含引号，使用单引号就很必要了。</p><blockquote><p>比如：name=’John “ShotGun” Nelson’。</p></blockquote><p>注意：中文引号跟英文引号是不一样的。<br>上面所指的引号都是英文状态下的引号。</p><h4 id="HTML-实体"><a href="#HTML-实体" class="headerlink" title="HTML  实体"></a>HTML  实体</h4><p>有些字符，比如说“&lt;”字符，在 HTML 中有特殊的含义，因此不能在文本中使用。<br>想要在 HTML 中显示一个小于号“&lt;”，需要用到字符实体。</p><h5 id="字符实体："><a href="#字符实体：" class="headerlink" title="字符实体："></a>字符实体：</h5><p>在 HTML 中，有些字符拥有特殊含义，比如小于号“&lt;”定义为一个 HTML 标签的开始 。</p><p>假如我们想要浏览器显示这些字符的话，必须在 HTML 代码中插入字符实体。</p><p>一个字符实体拥有三个部分：<br>一个 and 符号（&amp;），<br>一个实体名或者一个实体号，<br>最后是一个分号（;）</p><p>想要在 HTML 文档中显示一个小于号，我们必须这样写：&lt;或者&#60;</p><p>使用名字相对于使用数字的优点是容易记忆，缺点是并非所有的浏览器都支持最新的实体名，但是几乎所有的浏览器都能很好地支持实体号。</p><p>注意：实体名是大小写敏感的。</p><p>下面这个例子能够让你针对 HTML 实体实践一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;This is a character entity: &amp;#123;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4 id="不可拆分的空格"><a href="#不可拆分的空格" class="headerlink" title="不可拆分的空格"></a>不可拆分的空格</h4><p>在 HTML 中，最常见的字符实体就是不可拆分空格。</p><p>通常，HTML 会合并你文档中的空格。<br>假如在你的 HTML 文本中连续写了 10 个空格 ，其中 9 个会被去掉。<br>想要在 HTML 中插入空格，可以使用实体：&nbsp;</p><h2 id="HTML-基本元素的运用"><a href="#HTML-基本元素的运用" class="headerlink" title="HTML  基本元素的运用"></a>HTML  基本元素的运用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">段落相关标签&lt;p&gt;&lt;br&gt;&lt;hr&gt;</span><br><span class="line">格式化相关标签&lt;small&gt;&lt;sub&gt;&lt;sup&gt;&lt;pre&gt;</span><br><span class="line">列表相关标签&lt;ol&gt;&lt;ul&gt;&lt;li&gt;</span><br><span class="line">图片相关标签&lt;img&gt;</span><br><span class="line">超链相关标签&lt;a&gt;</span><br></pre></td></tr></table></figure><h3 id="段落-相关-标签"><a href="#段落-相关-标签" class="headerlink" title="段落 相关 标签"></a>段落 相关 标签</h3><p>标题元素：<br>标题元素由标签</p><h1>到<h6>定义。<h1>定义了最大的标题元素，<h6>定义了最小的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;This is a heading&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;This is a heading&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;This is a heading&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;This is a heading&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;This is a heading&lt;/h6&gt;</span><br></pre></td></tr></table></figure></h6></h1></h6></h1><p></p><blockquote><p>HTML 自动在一个标题元素前后各添加一个空行。</p></blockquote><h4 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h4><p>段落是用</p><p>标签定义的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is another paragraph&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>HTML 自动在一个段落前后各添加一个空行。</p></blockquote><h4 id="换行："><a href="#换行：" class="headerlink" title="换行："></a>换行：</h4><p>当需要结束一行，并且不想开始新段落时，使用<br>标签。<br>标签不管放在什么位置，都能够强制换行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This &lt;br&gt; is a para&lt;br&gt;graph with line breaks&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p><br>标签是一个空标签，它没有结束标记。</p></blockquote><h4 id="格式化-相关-标签"><a href="#格式化-相关-标签" class="headerlink" title="格式化 相关 标签"></a>格式化 相关 标签</h4><p>格式化文字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;strong&gt;</span><br><span class="line">This text is strong</span><br><span class="line">&lt;/strong&gt;&lt;br&gt;</span><br><span class="line">&lt;big&gt;</span><br><span class="line">This text is big</span><br><span class="line">&lt;/big&gt;&lt;br&gt;</span><br><span class="line">&lt;em&gt;</span><br><span class="line">This text is emphasized</span><br><span class="line">&lt;/em&gt;&lt;br&gt;</span><br><span class="line">&lt;i&gt;</span><br><span class="line">This text is italic</span><br><span class="line">&lt;/i&gt;&lt;br&gt;</span><br><span class="line">&lt;small&gt;</span><br><span class="line">This text is small</span><br><span class="line">&lt;/small&gt;&lt;br&gt;</span><br><span class="line">This text contains</span><br><span class="line">&lt;sub&gt;</span><br><span class="line">subscript</span><br><span class="line">&lt;/sub&gt;&lt;br&gt;</span><br><span class="line">This text contains</span><br><span class="line">&lt;sup&gt;</span><br><span class="line">superscript</span><br><span class="line">&lt;/sup&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="列表相关标签"><a href="#列表相关标签" class="headerlink" title="列表相关标签"></a>列表相关标签</h3><h4 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h4><p>无序列表是一个项目的序列。各项目前加有标记（通常是黑色的实心小圆圈）。</p><p>无序列表以<ul>标签开始。每个列表项目以<li>开始。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Coffee&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Milk&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul></p><p>无序列表的项目中可以加入段落、换行、图像，链接，其他的列表等等。</p><h4 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h4><p>有序列表也是一个项目的序列。各项目前加有数字作标记。</p><p>有序列表以<ol>标签开始。每个列表项目以<li>开始。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">Web程序开发基础</span><br><span class="line">12</span><br><span class="line">&lt;li&gt;Coffee&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Milk&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li></ol></p><h2 id="不同类型："><a href="#不同类型：" class="headerlink" title="不同类型："></a>不同类型：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type=&quot;A&quot;&gt;</span><br><span class="line">&lt;ol type=&quot;a&quot;&gt;</span><br><span class="line">&lt;ol type=&quot;I&quot;&gt;</span><br><span class="line">&lt;ol type=&quot;i&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul type=&quot;disc&quot;&gt;</span><br><span class="line">&lt;ul type=&quot;circle&quot;&gt;</span><br><span class="line">&lt;ul type=&quot;square&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="图片相关标签"><a href="#图片相关标签" class="headerlink" title="图片相关标签"></a>图片相关标签</h2><h4 id="Img-标签和-src属性："><a href="#Img-标签和-src属性：" class="headerlink" title="Img 标签和 src属性："></a>Img 标签和 src属性：</h4><p>在 HTML 里面，图像是由<img>标签定义的。</p><p><img>是空标签，意思是说，它只拥有属性，而没有结束标签。</p><p>想要在页面上显示一个图像，需要使用 src属性。<br>“src”表示“源”的意思。“src”属性的值是所要显示图像的 URL。</p><h5 id="插入图像的语法："><a href="#插入图像的语法：" class="headerlink" title="插入图像的语法："></a>插入图像的语法：</h5><p>URL 指向图像存储的地址。</p><p>alt 属性：</p><p>alt 属性用来给图像显示一个“交互文本”。<br>alt 属性的值是由用户定义的。</p><p>“alt”属性在浏览器装载图像失败的时候告诉用户所丢失的信息，此时，浏览器显示这个“交互文本”来代替图像。给页面上的图像都加上 alt 属性是一个好习惯，它有助于更好地显示信息，而且，对纯文本浏览器很有用。</p><h5 id="基本注意点——有用的技巧"><a href="#基本注意点——有用的技巧" class="headerlink" title="基本注意点——有用的技巧:"></a>基本注意点——有用的技巧:</h5><p>如果一个 HTML 文档包含 10 个图像，那么为了正确显示这个页面，需要加载 11 个文件 。<br>加载图像是需要时间的，所以请谨慎使用图像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;./images/hackanm.gif&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body background=&quot;./images/background.jpg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;back.htm&quot;&gt;</span><br><span class="line">&lt;img border=&quot;0&quot; src=&quot;./images/next.gif&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="超链相关标签"><a href="#超链相关标签" class="headerlink" title="超链相关标签"></a>超链相关标签</h2><h3 id="锚标签和-href-属性："><a href="#锚标签和-href-属性：" class="headerlink" title="锚标签和 href 属性："></a>锚标签和 href 属性：</h3><p>HTML 使用锚标签（<a>）来创建一个连接到其他文件的链接。<br>锚可以指向网络上的任何资源：HTML 页面，图像，声音，影片等等。</a></p><p>标签<a>被用来创建一个链接指向的锚，href 属性用来指定连接到的地址，在锚的起始标签<a>和结束标签</a>中间的部分将被显示为超级链接。</a></p><h4 id="target-属性："><a href="#target-属性：" class="headerlink" title="target 属性："></a>target 属性：</h4><p>使用 target 属性，你可以定义从什么地方打开链接地址。</p><h4 id="锚标签和-name-属性"><a href="#锚标签和-name-属性" class="headerlink" title="锚标签和 name 属性"></a>锚标签和 name 属性</h4><p>name 属性用来创建一个命名的锚。使用命名锚以后，可以让链接直接跳转到一个页面的某一章节，而不用用户打开那一页，再从上到下慢慢找。</p><p>下面是命名锚的语法：</p><p>你可以为锚随意指定名字，只要你愿意。</p><h4 id="基本注意点——有用的技巧："><a href="#基本注意点——有用的技巧：" class="headerlink" title="基本注意点——有用的技巧："></a>基本注意点——有用的技巧：</h4><p>命名锚通常用来在大型文档的开头创建章节表。这个页面的每个章节被加上一个命名锚，到这些锚的链接被放在页面的顶端。</p><p>如果浏览器无法找到指定的命名锚，它将转到这个页面的顶部，而不显示任何错误提示。</p><h4 id="更多示例："><a href="#更多示例：" class="headerlink" title="更多示例："></a>更多示例：</h4><p>在新浏览器窗口中打开链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;lastpage.htm&quot; target=&quot;_blank&quot;&gt;Last Page&lt;/a&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">If you set the target attribute of a link to &quot;_blank&quot;,</span><br><span class="line">the link will open in a new window.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="用-HTML-创建表格"><a href="#用-HTML-创建表格" class="headerlink" title="用 HTML  创建表格"></a>用 HTML  创建表格</h2><ul><li><p>了解掌握表格的基本结构<table><tr><th></th><td></td></tr></table></p></li><li><p>掌握跨行、跨列属性 colspan rowspan</p></li><li><p>掌 握 表 格 相 关 修 饰 属 性 border width height bgcolor</p></li><li><p>background height cellpadding cellspacing</p></li></ul><h2 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML  表格"></a>HTML  表格</h2><p>表格 :</p><p>表格是用<table>标签定义的。</table></p><p>表格被划分为行（使用<tr>标签），每行又被划分为数据单</tr></p><p>元格（使用<td>标签）。td 表示“表格数据”（ Table Data），即数据单元格的内容。</td></p><h4 id="数据单元格可以包含文本，图像，列表，段落，表单，水平线，表格等等。想不想尝试一下？"><a href="#数据单元格可以包含文本，图像，列表，段落，表单，水平线，表格等等。想不想尝试一下？" class="headerlink" title="数据单元格可以包含文本，图像，列表，段落，表单，水平线，表格等等。想不想尝试一下？"></a>数据单元格可以包含文本，图像，列表，段落，表单，水平线，表格等等。想不想尝试一下？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">  &lt;td&gt;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;caption&gt;table title and/or explanatory text&lt;/caption&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;header&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;data&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=&quot;1&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">  &lt;th colspan=&quot;&quot; rowspan=&quot;&quot; headers=&quot;&quot; scope=&quot;&quot;&gt;&lt;/th&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">  &lt;td&gt;&lt;/td&gt;</span><br><span class="line"> &lt;/td&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">  &lt;td&gt;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">  &lt;td&gt;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h2 id="基本注意点——有用的技巧-1"><a href="#基本注意点——有用的技巧-1" class="headerlink" title="基本注意点——有用的技巧"></a>基本注意点——有用的技巧</h2><p>通常很少使用<thead>，<tbody>，<tfoot>标签，因为浏览器对它们的支持不好。希望这<br>个在 XHTML 的未来版本中得到改变。</tfoot></tbody></thead></p><blockquote><p>cellpadding 属性在表格内容和边框之间留出更多空白<br>cellspacing 属性来增加单元格间距<br>使用“align”属性来设置单元格的对齐方式</p></blockquote><h2 id="HTML-表单页面的运用"><a href="#HTML-表单页面的运用" class="headerlink" title="HTML  表单页面的运用"></a>HTML  表单页面的运用</h2><p>掌握表单基本结构<form><br>掌握各种表单元素<br>能理解 post 和 get 两种提交方式的区别</form></p><h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML  表单"></a>HTML  表单</h2><p>表单：<br>表单是一个能够包含表单元素的区域。</p><p>表单元素是能够让用户在表单中输入信息的元素（比如文本框，密码框，下拉菜单，单<br>选框，复选框等等）。</p><h2 id="Input："><a href="#Input：" class="headerlink" title="Input："></a>Input：</h2><p>最常用的表单标签是<input>标签。Input 的类型用 type属性指定。最常用的 input 类型解释如下：</p><p>文本框：在表单中，文本框用来让用户输入字母、数字等等。</p><p>表单的 action 属性和提交按钮：<br>当用户点击提交按钮的时候，表单的内容会被提交到其他文件。</p><p>表单的 action 属性定义了所要提交到的目的文件，该目的文件收到信息后通常进行相关的处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=&quot;input&quot; action=&quot;xxxx&quot; method=&quot;get&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;&quot; name=&quot;&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>简单的下拉列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;select name=&quot;cars&quot;&gt;</span><br><span class="line">&lt;option value=&quot;volvo&quot;&gt;Volvo</span><br><span class="line">&lt;option value=&quot;saab&quot;&gt;Saab</span><br><span class="line">&lt;option value=&quot;fiat&quot;&gt;Fiat</span><br><span class="line">&lt;option value=&quot;audi&quot;&gt;Audi</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>创建一个含有预先选定元素的下拉列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">文本域：</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line"> This example demonstrates a text-area.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;textarea rows=&quot;10&quot; cols=&quot;30&quot;&gt;</span><br><span class="line"> The cat was playing in the garden.</span><br><span class="line">&lt;/textarea&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;Hello world!&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">&lt;legend&gt;</span><br><span class="line"> Health information:</span><br><span class="line">&lt;/legend&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">     Height&lt;input type=&quot;text&quot; size=&quot;3&quot;&gt;</span><br><span class="line"> Weight&lt;input type=&quot;text&quot; size=&quot;3&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line"> If there is no border around the input form, your browser is too old.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;x&quot; method=&quot;post&quot;</span><br><span class="line">enctype=&quot;text/plain&quot;&gt;</span><br><span class="line">&lt;h3&gt;xxxxxxxxxxx&lt;/h3&gt;</span><br><span class="line"> Name:&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;yourname&quot; size=&quot;20&quot;&gt;</span><br><span class="line"> &lt;br&gt;</span><br><span class="line"> Mail:&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;mail&quot; value=&quot;yourmail&quot; size=&quot;20&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Comment:&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;comment&quot; value=&quot;yourcomment&quot; size=&quot;40&quot;&gt;</span><br><span class="line"> &lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Send&quot;&gt;</span><br><span class="line">&lt;input type=&quot;reset&quot; value=&quot;Reset&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="使用样式表美化页面-1-1"><a href="#使用样式表美化页面-1-1" class="headerlink" title="使用样式表美化页面 1 1"></a>使用样式表美化页面 1 1</h2><p>掌握在网页中使用 CSS 的方法<br>熟悉 CSS 的不同选择器的使用方法<br>熟悉字体属性：font-family，font-size，font-style，<br>font-weight<br>熟悉文本属性：text-align，text-indent，text-decoration，<br>text-transform，vertical-align，word-spacing，<br>letter-spacing</p><h2 id="CSS-的工作原理"><a href="#CSS-的工作原理" class="headerlink" title="CSS  的工作原理"></a>CSS  的工作原理</h2><p>在这一节，你将学习如何制作自己的第一个样式表。</p><p>你将了解基本的 CSS 模型，以及在HTML 文档里使用 CSS 所必需的代码。</p><p>级联样式表（CSS）里用到的许多 CSS 属性都与 HTML 属性相似，所以，假如你熟悉<br>采用 HTML 进行布局的话，那么这里的许多代码你都不会感到陌生。我们先来看一个具<br>体的例子。</p><h2 id="基本的-CSS-语法："><a href="#基本的-CSS-语法：" class="headerlink" title="基本的 CSS 语法："></a>基本的 CSS 语法：</h2><p>比方说，我们要用红色作为网页的背景色：<br>用  L HTML 的话，我们可以这样：<br>用  CSS的话，我们可以这样获得同样的效果：</p><h4 id="为一个-HTML-文档应用-CSS："><a href="#为一个-HTML-文档应用-CSS：" class="headerlink" title="为一个 HTML 文档应用 CSS："></a>为一个 HTML 文档应用 CSS：</h4><p>为 HTML 文档应用 CSS，有三种方法可供选择。</p><p>下面对这三种方法进行了概括。我们建议你对第三种方法（即外部样式表）予以关注。</p><p>方法 1：行内样式表（style 属性）</p><p>方法 2：内部样式表（style 元素）</p><p>方法 3：外部样式表（引用一个样式表文件）</p><h2 id="元素的分类与标识（-class-和-和-id-）"><a href="#元素的分类与标识（-class-和-和-id-）" class="headerlink" title="元素的分类与标识（ class  和 和  id ）"></a>元素的分类与标识（ class  和 和  id ）</h2><p>有时，你希望对特定元素或者特定一组元素应用特殊的样式。<br>在这一节，我们将深入学习如何利用 class 和 id 来为所选元素指定属性。</p><p>如何实现为网站上许多标题中的某一个单独应用颜色？<br>如何实现把网站上的链接分为不同的类，并对各类链接分别应用不同的样式？<br>这只是本节将解决的诸多问题中的最具代表性的两个问题。</p><h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><p>这一节，你将学习字体以及如何用 CSS 来设置字体。我们还会考虑如何解决“网站所选<br>的字体仅当访问者的 PC 上安装有该字体时才会被显示”这一难题。本节将对下列 CSS<br>属性进行讲解：</p><p>• font-family<br>• font-style<br>• font-variant<br>• font-weight<br>• font-size<br>• font</p><h4 id="字体族-font-family-："><a href="#字体族-font-family-：" class="headerlink" title="字体族[font-family]："></a>字体族[font-family]：</h4><p>CSS 属性 font-family 的作用是设置一组按优先级排序的字体列表，如果该列表中的<br>第一个字体未在访问者计算机上安装，那么就尝试列表中的下一个字体，依此类推，直<br>到列表中的某个字体是已安装的。</p><p>有两种类型的名称可用于分类字体：字体族名称（family-name）和族类名称（generic<br>family）。下面来解释这两个术语。</p><p>字体族名称（family-name）：</p><p>字体族名称（就是我们通常所说的“字体”）的例子包括<br>“Arial”、“Times New Roman” 、“宋体”、“黑体”等等。</p><p>字体样式[font-style]：<br>CSS 属性 font-style 定义所选字体的显示样式： normal （正常）、 c italic （斜体）或  oblique<br>（倾斜）。</p><p>字体变化[font-variant]：<br>CSS 属性 font-variant 的值可以是： normal（正常）或  s small-caps（小体大写字母） 。<br>small-caps 字体是一种以小尺寸显示的大写字母来代替小写字母的字体。</p><p>字体浓淡[font-weight]：<br>CSS 属性 font-weight 指定字体显示的浓淡程度。其值可以是  l normal（正常）或  bold<br>（加粗）。</p><p>字体大小[font-size]：<br>字体的大小用 CSS 属性 font-size 来设置。字体大小可通过多种不同单位（比如像素或百分比等）来设置。</p><h2 id="文本-属性"><a href="#文本-属性" class="headerlink" title="文本 属性"></a>文本 属性</h2><p>文本的显示格式与式样对于网页设计师来说是一个重要问题。<br>这一节将向你介绍 CSS 在文本布局方面令人激动的特性。本节将对下列 CSS 属性进行讲解：</p><p>• text-indent<br>• text-align<br>• text-decoration<br>• letter-spacing<br>• text-transform</p><p>文本缩进[text-indent]：<br>CSS 属性 text-indent 用于为段落设置首行缩进，以令其具有美观的格式。</p><p>文本对齐[text-align]：<br>CSS 属性 text-align 与 HTML 属性 align 的功能相同。该属性的值可以是：<br>left（左对齐）、 right（右对齐）或者  center（居中）。</p><p>文本装饰[text-decoration]：<br>CSS 属性 text-decoration 令我们可以为文本增添不同的“装饰”或“效果”。</p><p>字符间距[letter-spacing]：<br>CSS 属性 letter-spacing 用于设置文本的水平字间距。</p><p>文本转换[text-transform]：<br>CSS 属性 text-transform 用于控制文本的大小写。<br>无论字母本来的大小写，你可以通过该属性令它<br>首字母大写（capitalize）、全部大写（uppercase）或者全部小写（lowercase）。</p><h2 id="使用样式表美化页面"><a href="#使用样式表美化页面" class="headerlink" title="使用样式表美化页面"></a>使用样式表美化页面</h2><p>熟悉显示属性：display<br>熟悉边框属性：Border , border-style 等<br>熟悉定位属性：top , Width , Height , Left</p><h4 id="显示-属性"><a href="#显示-属性" class="headerlink" title="显示 属性"></a>显示 属性</h4><p>显示属性允许使用四个值中的一个来定义一个元素：<br>block ：在元素的前和后都会有换行<br>inline ：在元素的前和后都不会有换行<br>list-item ：与 block 相同，但增加了目录项标记<br>none ：没有显示</p><h2 id="边框-属性"><a href="#边框-属性" class="headerlink" title="边框 属性"></a>边框 属性</h2><p>边框（border）可以有多种用途，比如作为装饰元素或者作为划分两物的分界线。在设<br>置边框方面，CSS 为你提供了无尽选择。</p><p>• border-width<br>• border-color<br>• border-style</p><h2 id="边框宽度-border-width-："><a href="#边框宽度-border-width-：" class="headerlink" title="边框宽度[border-width]："></a>边框宽度[border-width]：</h2><p>边框宽度由 CSS 属性 border-width 定义，其值可以是“thin”（薄）、“medium”（普通 ）<br>或“thick”（厚）等，也可以是像素值。</p><h2 id="边框颜色-border-color-："><a href="#边框颜色-border-color-：" class="headerlink" title="边框颜色[border-color]："></a>边框颜色[border-color]：</h2><p>CSS 属性 border-color 用于定义边框的颜色。其值就是正常的颜色值，例如：“#123456”、<br>“rgb(123,123,123)”、“yellow”等。</p><h2 id="边框样式-border-style-："><a href="#边框样式-border-style-：" class="headerlink" title="边框样式[border-style]："></a>边框样式[border-style]：</h2><p>边框样式有多种可供选择。</p><h2 id="缩写-border-："><a href="#缩写-border-：" class="headerlink" title="缩写[border]："></a>缩写[border]：</h2><p>跟许多其他属性一样，你也可以将有关边框的 CSS 属性缩写为一个 border 属性。</p><h2 id="相对定位："><a href="#相对定位：" class="headerlink" title="相对定位："></a>相对定位：</h2><p>要对元素进行相对定位，应将 position 属性的值设为relative。<br>绝对定位与相对定位的区别在于计算位置的方式。</p><p>采用相对定位的元素，其位置是相对于它在文档中的原始位置计算而来的。<br>这意味着 ，相对定位是通过将元素从原来的位置向右、向左、向上或向下移动来定位的。<br>采用相对定位的元素会获得相应的空间。</p><h2 id="HTML-中框架、层的运用"><a href="#HTML-中框架、层的运用" class="headerlink" title="HTML  中框架、层的运用"></a>HTML  中框架、层的运用</h2><p>掌握框架结构<frameset><frame><iframe><br>掌握组织元素：span 和 div</iframe></frameset></p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>使用框架，可以在一个浏览器窗口中显示不止一个 HTML 文档。<br>这样的 HTML 文档被称为框架页面，它们是相互独立的。：</p><p>使用框架的不利因素有：</p><p>• 网站开发者需要关心更多 HTML 文档的情况。<br>• 打印整个页面变得困难。</p><p>frameset 标签：</p><p>• <frameset>标签定义了如何将窗口拆分成框架。<br>• 每个 frameset 标签定义了一组行和列。<br>• 行/列的值指明了每个行/列在屏幕上所占的大小</frameset></p><p>frame标签：</p><p>• <frame>标签定义了每个框架中放入什么文件。</p><p>基本注意点——有用的技巧：</p><p>假如一个框架有可见边框，用户可以拖动边框来改变它的大小。<br>如果不想让用户改变大小，可以在<frame>标签中加入：noresize=”noresize”。<br>给不支持框架的浏览器写上<noframes>标签。</noframes></p><h2 id="内联框架："><a href="#内联框架：" class="headerlink" title="内联框架："></a>内联框架：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;iframe src=&quot;intro.htm&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;p&gt;Some older browsers don&apos;t support iframes.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;If they don&apos;t, the iframe will not be visible.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="组织元素-：-span-和-和-div"><a href="#组织元素-：-span-和-和-div" class="headerlink" title="组织元素 ： span  和 和  div"></a>组织元素 ： span  和 和  div</h2><p>span 和 div 元素用于组织和结构化文档，并经常联合 class 和 id 属性一起使用。</p><p>用 span 组织元素：</p><p>span 元素可以说是一种中性元素，因为它不对文档本身添加任何东西。<br>但是与 CSS 结合使用的话，span 可以对文档中的部分文本增添视觉效果。</p><h2 id="XML-基本知识"><a href="#XML-基本知识" class="headerlink" title="XML  基本知识"></a>XML  基本知识</h2><p>XML  的应用范围<br>人类一直在不断地尝试改进自己的发明，其中也包括人类最伟大的发明——文字的构成。<br>第一个文本处理系统是用纸笔记录文字。现在，计算机文本处理器已经取代了手工处理，它不仅包含原始文档，还负责设置格式、出版和管理。在这些方便的功能整合到字处理之前，是由排字工人遵循书面标记说明来完成所有格式编排的。<br>正是利益于这种实践，人们将“标记”这个词加入到 HTML 和 XML。顾名思义，标记是指加上记号。<br>文本处理环境（如 XML）中使用了相同的标记过程。</p><p>使用脚本语言或 DHTML 能够以各种方式显示信息。<br>这就要求必须为相同的输出编写不同的代码以供不同的浏览器使用，因为这些语言不能跨浏览器兼容。</p><p>XML（eXtensible Markup Language，可扩展标记语言）克服了这些缺点。<br>顾名思义，XM L是可扩展的，即开发人员可以定义自己的一组标签，并使其他的人或程序能够理解这些标签。</p><p>HTML 是单标记语言，为特定应用设计，而 XML 则是一系列的标记语言。<br>因此 ，XML 比 HTML 灵活得多。</p><p>实际上，由于 XML 标签表示了数据的逻辑结构，不同的应用可以通过不同的方式来解释和使用这些标签。<br>Web 上的数据大多是继承的，XML 继承了 SGML 和 HTML 的优点。<br>也就是说，它不仅继承了 SGML 的特色，还结合了 HTM L的特色。</p><p>它采用了 SGML 的主要框架，有时，人们也将 XML 称为 SGML 的子集。<br>因此 ，HTML 是 SGML 的应用，而 XML 是 SGML 的子集。</p><p>使用标签对文档进行标记以提供有关内容的信息，不仅能加快搜索速度，而且还能降低网络流量。<br>XML 是由 SGML 修整并改造而来，它是一种元语言，用于描述其他语言。</p><p>我们可以使用 XML 为特定目的创建自己的标记语言（如化学标记语言）。</p><p>XML 是基于文本的格式，允许开发人员描述结构化数据并在各种应用之间发送和交换这些数据，这样客户端就可以显示并自定义数据。</p><p>XML 还有助于在服务器之间传输结构化数据。</p><p>有许多信息是分布在不同的和不匹配的数据库中。</p><p>如有必要，XML 允许通过使用自定义格式来标识、交换和处理这些数据库可以理解的数据。</p><p>XML 和 HTML 有许多相同点和不同点。XML描述数据，如城市名称、温度和气压；HTML定义描述数据显示方式的标签，如使用项目符号列表或表格。</p><p>但 XML 允许开发人员定义任意数量的标签集，使用开发人员有很大的灵活性来决定要使用哪些数据，并确定数据的适用标准或自定义标签。</p><h2 id="L-XML-的-文档-结构"><a href="#L-XML-的-文档-结构" class="headerlink" title="L XML  的 文档 结构"></a>L XML  的 文档 结构</h2><p>XML 文档是由一组使用唯一名称标识的实体组成。</p><p>所有文档都以根或文档实体开始，而且所有实体都是可选的。</p><p>实体可以被视为更复杂功能的别名。单个实体名称可以代替许多文本。</p><p>在别名方案中，每当需要引用某个文本时，只需要使用别名，处理器会展开别名的内容。</p><p>XML 文档也有一种逻辑结构。</p><p>ok,完</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://huangguangda.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://huangguangda.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>必背面试题</title>
    <link href="https://huangguangda.github.io/2018/05/16/1/"/>
    <id>https://huangguangda.github.io/2018/05/16/1/</id>
    <published>2018-05-16T00:57:24.000Z</published>
    <updated>2018-07-23T18:37:59.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>1 抽象类和接口的区别?</p><p>抽象类：</p><p>1）抽象方法，只有行为的概念，没有具体的行为实现。使用abstract关键字修饰，没有方法体。子类必须重写这些抽象方法。<br>2）包含抽象方法的类，一定是抽象类。<br>3）抽象类只能被继承，一个类只能继承一个抽象类。</p><p>接口：</p><p>1）全部的方法都是抽象方法，属型都是常量<br>2）不能实例化，可以定义变量。<br>3）接口变量可以引用具体实现类的实例<br>4）接口只能被实现，一个具体类实现接口，必须实现全部的抽象方法<br>5）接口之间可以多实现<br>6）一个具体类可以实现多个接口，实现多继承现象</p><h2 id="列举你所知道的线程同步的方法"><a href="#列举你所知道的线程同步的方法" class="headerlink" title="列举你所知道的线程同步的方法"></a>列举你所知道的线程同步的方法</h2><p>wait():让线程等待。将线程存储到一个线程池中。</p><p>notify()：唤醒被等待的线程。通常都唤醒线程池中的第一个。让被唤醒的线程处于临时阻塞状态。</p><p>notifyAll(): 唤醒所有的等待线程。将线程池中的所有线程都唤醒。</p><h2 id="简述String和StringBuffer、ArrayList和LinkedList、HashMap和HashTable的特点及区别。"><a href="#简述String和StringBuffer、ArrayList和LinkedList、HashMap和HashTable的特点及区别。" class="headerlink" title="简述String和StringBuffer、ArrayList和LinkedList、HashMap和HashTable的特点及区别。"></a>简述String和StringBuffer、ArrayList和LinkedList、HashMap和HashTable的特点及区别。</h2><p>答:</p><p>String 对象的长度一旦定义就固定就不可以改变，</p><p>对于已经存在的String对象的修改都是创建一个新的对象，</p><p>然后把新的值存进去,</p><p>String类不能被继承。</p><p>StringBuffer是一个可变对象，</p><p>当对它进行修改的时候不会像String那样重新建立对象。</p><p>它只能通过构造函数来建立对象。</p><p>另外StringBuffer还是一个线程安全的类。</p><p>ArrayList是实现了基于动态数组的数据结构用于，LinkedList基于连表的数据结构，</p><p>二者都可以存储对象的引用。</p><p>对于随机访问get和set，ArrayList优于LinkedList，</p><p>因为LinkedList要移动指针。</p><p>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p>HashMap是Hashtable的轻量级实现（非线程安全的实现），</p><p>他们都完成了Map接口，</p><p>主要区别在于HashMap允许空（null）键值（key）,</p><p>由于非线程安全，在只有一个线程访问的情况下，效率要高于Hashtable。</p><p>HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</p><p>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。</p><p>因为contains方法容易让人引起误解。</p><p>Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。</p><p>最大的不同是，</p><p>Hashtable的方法是Synchronize的，而HashMap不是，</p><p>在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。</p><p>Hashtable和HashMap</p><p>采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。</p><p>就HashMap与HashTable主要从三方面来说。</p><p>一. 历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现<br>二. 同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的<br>三. 值：只有HashMap可以让你将空值作为一个表的条目的key或value</p><h2 id="什么是java序列化，如何事件java序列化"><a href="#什么是java序列化，如何事件java序列化" class="headerlink" title="什么是java序列化，如何事件java序列化"></a>什么是java序列化，如何事件java序列化</h2><p>序列化就是一种用来处理对象流的机制，<br>所谓对象流也就是将对象的内容进行流化。</p><p>可以对流化后的对象进行读写操作，<br>也可将流化后的对象传输于网络之间。</p><p>序列化是为了解决在对对象流进行读写操作时所引发的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Cat implements Serializable ｛｝</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line">Try&#123;</span><br><span class="line">   FileOutputStream fos = new FileOutputStream(&quot;catDemo.out&quot;);</span><br><span class="line">   ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line">   System.out.println(&quot; 1&gt; &quot; + cat.getName());</span><br><span class="line">   cat.setName(&quot;My Cat&quot;);                        </span><br><span class="line">   oos.writeObject(cat);</span><br><span class="line">   oos.close();        </span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="多线程有几种实现方式，同步有几种实现方式，stop-和suspend-方法为什么不推荐使用"><a href="#多线程有几种实现方式，同步有几种实现方式，stop-和suspend-方法为什么不推荐使用" class="headerlink" title="多线程有几种实现方式，同步有几种实现方式，stop()和suspend()方法为什么不推荐使用"></a>多线程有几种实现方式，同步有几种实现方式，stop()和suspend()方法为什么不推荐使用</h2><p>多线程有两种实现方法，分别是继承Thread类与实现Runnable接口 </p><p>同步的实现方面有两种，分别是synchronized,wait与notify”</p><p>反对使用stop()，是因为它不安全。</p><p>它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。</p><p>结果很难检查出真正的问题所在。</p><p>suspend()方法容易发生死锁。 </p><p>调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。</p><p>此时，其他任何线程都不能访问锁定的资源，除非被”挂起”的线程恢复运行。</p><p>对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。</p><p>所以不应该使用suspend()，而应在自己的 Thread类中置入一个标志，</p><h2 id="简述你对java反射机制的理解"><a href="#简述你对java反射机制的理解" class="headerlink" title="简述你对java反射机制的理解"></a>简述你对java反射机制的理解</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p><p>对于任意一个对象，都能够调用它的任意一个方法和属性</p><h2 id="写下你对多线程的理解，怎么创建一个线程以及线程同步的方法。"><a href="#写下你对多线程的理解，怎么创建一个线程以及线程同步的方法。" class="headerlink" title="写下你对多线程的理解，怎么创建一个线程以及线程同步的方法。"></a>写下你对多线程的理解，怎么创建一个线程以及线程同步的方法。</h2><p>1.多线程是操作系统的重要部分，可以提高应用程序的效率，将耗时操作放进工作线程，可以有效提高用户体验。</p><p>2.new Thread().start，在方法中重写run方法；新建类实现Runable接口，重写其抽象方法</p><p>3.public static synchronized void test() {  }<br>  public void test2() { synchronized(lock){  }}</p><h2 id="从操作系统角度请阐述一下线程与进程的区别"><a href="#从操作系统角度请阐述一下线程与进程的区别" class="headerlink" title="从操作系统角度请阐述一下线程与进程的区别"></a>从操作系统角度请阐述一下线程与进程的区别</h2><p>答：</p><p>进程是系统进行资源分配和调度的一个独立单位，线程是CPU调度和分派的基本单位</p><p>进程和线程的关系：</p><p>（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p><p>（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。</p><p>（3）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p><p>（5）线程是指进程内的一个执行单元，也是进程内的可调度实体。</p><p>线程与进程的区别：</p><p>（1）调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。</p><p>（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可以并发执行。</p><p>（3）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</p><p>（4）系统开销：在创建或撤销进程的时候，由于系统都要为之分配和回收资源，导致系统的明显大于创建或撤销线程时的开销。但进程有独立的地址空间，进程崩溃后，在保护模式下不会对其他的进程产生影响，而线程只是一个进程中的不同的执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但是在进程切换时，耗费的资源较大，效率要差些。</p><h2 id="Android系统的架构，采用了分层的架构，从高层到底层分别是："><a href="#Android系统的架构，采用了分层的架构，从高层到底层分别是：" class="headerlink" title="Android系统的架构，采用了分层的架构，从高层到底层分别是："></a>Android系统的架构，采用了分层的架构，从高层到底层分别是：</h2><p>1.Android系统架构之应用程序</p><p>Android会同一系列核心应用程序包一起发布，该应用程序包包括email客户端，SMS短消息程序，日历，地图，浏览器，联系人管理程序等。所有的应用程序都是使用JAVA语言编写的。</p><p>2.Android系统架构之应用程序框架</p><p>开发人员可以完全访问核心应用程序所使用的API框架（android.jar）。该应用程序的架构设计简化了组件的重用;任何一个应用程序都可以发布它的功能块并且任何其它的应用程序都可以使用其所发布的功能块。</p><p>3.Android系统架构之系统运行库</p><p>1)程序库<br>Android 包含一些C/C++库，这些库能被Android系统中不同的组件使用。它们通过 Android 应用程序框架为开发者提供服务。</p><p>4.Android系统架构之Linux 内核</p><p>Android 的核心系统服务依赖于 Linux 2.6 内核，如安全性，内存管理，进程管理， 网络协议栈和驱动模型。 Linux 内核也同时作为硬件和软件栈之间的抽象层。</p><h2 id="消息推送的方式有哪几种，每种方式的优缺点是什么？"><a href="#消息推送的方式有哪几种，每种方式的优缺点是什么？" class="headerlink" title="消息推送的方式有哪几种，每种方式的优缺点是什么？"></a>消息推送的方式有哪几种，每种方式的优缺点是什么？</h2><p>前Android上主要的推送实现方案有以下几种：</p><p>方案1、使用极光和友盟推送。</p><p>方案2、使用XMPP协议（Openfire + Spark + Smack）</p><p>简介：基于XML协议的通讯协议，前身是Jabber，目前已由IETF国际标准化组织完成了标准化工作。</p><p>优点：协议成熟、强大、可扩展性强、目前主要应用于许多聊天系统中，且已有开源的Java版的开发实例androidpn。</p><p>缺点：协议较复杂、冗余（基于XML）、费流量、费电，部署硬件成本高。</p><p>方案3、使用MQTT协议（更多信息见：<a href="http://mqtt.org/）" target="_blank" rel="noopener">http://mqtt.org/）</a></p><p>简介：轻量级的、基于代理的“发布/订阅”模式的消息传输协议。</p><p>优点：协议简洁、小巧、可扩展性强、省流量、省电，目前已经应用到企业领域（参考：<a href="http://mqtt.org/software），且已有C++版的服务端组件rsmb。" target="_blank" rel="noopener">http://mqtt.org/software），且已有C++版的服务端组件rsmb。</a></p><p>缺点：不够成熟、实现较复杂、服务端组件rsmb不开源，部署硬件成本较高。</p><p>方案4、使用HTTP轮循方式</p><p>简介：定时向HTTP服务端接口（Web Service API）获取最新消息。</p><p>优点：实现简单、可控性强，部署硬件成本低。</p><p>缺点：实时性差。</p><h2 id="android的数据存储的方式"><a href="#android的数据存储的方式" class="headerlink" title="android的数据存储的方式?"></a>android的数据存储的方式?</h2><p>答：</p><p>Android提供了5种方式存储数据：</p><p>（1）使用SharedPreferences存储数据；</p><p>它是Android提供的用来存储一些简单配置信息的一种机制，采用了XML格式将数据存储到设备中。只能在同一个包内使用，不能在不同的包之间使用。</p><p>（2）文件存储数据；</p><p>文件存储方式是一种较常用的方法，在Android中读取/写入文件的方法，与Java中实现I/O的程序是完全一样的，提供了openFileInput()和openFileOutput()方法来读取设备上的文件。</p><p>（3）SQLite数据库存储数据；</p><p>SQLite是Android所带的一个标准的数据库，它支持SQL语句，它是一个轻量级的嵌入式数据库。</p><p>（4）使用ContentProvider存储数据；</p><p>主要用于应用程序之间进行数据交换，从而能够让其他的应用保存或读取此Content Provider的各种数据类型。</p><p>（5）网络存储数据；</p><p>通过网络上提供给我们的存储空间来上传(存储)和下载(获取)我们存储在网络空间中的数据信息。</p><h2 id="横竖屏切换时候activity的生命周期"><a href="#横竖屏切换时候activity的生命周期" class="headerlink" title="横竖屏切换时候activity的生命周期?"></a>横竖屏切换时候activity的生命周期?</h2><p>不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会重新 调用各个生命周期，只会执行onConfigurationChanged方法</p><h2 id="Android中动画分为哪几类-他们的特点和区分有那些"><a href="#Android中动画分为哪几类-他们的特点和区分有那些" class="headerlink" title="Android中动画分为哪几类?他们的特点和区分有那些?"></a>Android中动画分为哪几类?他们的特点和区分有那些?</h2><p>一种是tweened animation(补间动画) </p><p>一种是frame by frame(逐帧动画) </p><p>特点：</p><p>补间动画是通过改变view的大小、旋转的角度、透明度、位置来产生动画，可以控制动画的播放快慢以及加速度。</p><p>逐帧动画是用一组图片轮流绘制，产生动画的感觉。类似于gif图片。</p><p>区别：</p><p>补间动画的所有操作是通过矩阵变换对同一个物体（绘制的一个view或者图片）进行操作产生动画。</p><p>而逐帧动画是多个物体（多张图片）进行绘制，可以说这多张图片是不相关的（从播放的角度来看只能说是内容相关）。</p><h2 id="请解释下在单线程模式中Message-Handler-MessageQueue-Looper之间的关系解释下"><a href="#请解释下在单线程模式中Message-Handler-MessageQueue-Looper之间的关系解释下" class="headerlink" title="请解释下在单线程模式中Message,Handler,MessageQueue,Looper之间的关系解释下."></a>请解释下在单线程模式中Message,Handler,MessageQueue,Looper之间的关系解释下.</h2><p>Handler获取当前线程中的looper对象，looper用来从存放Message的MessageQueue中取出Message，再有Handler进行Message的分发和处理. </p><p>Message Queue(消息队列)：用来存放通过Handler发布的消息，通常附属于某一个创建它的线程，可以通过Looper.myQueue()得到当前线程的消息队列. </p><p>Handler：可以发布或者处理一个消息或者操作一个Runnable，通过Handler发布消息，消息将只会发送到与它关联的消息队列，然也只能处理该消息队列中的消息. </p><p>Looper：是Handler和消息队列之间通讯桥梁，程序组件首先通过Handler把消息传递给Looper，Looper把消息放入队列。 </p><p>Looper也把消息队列里的消息广播给所有的Handler：Handler接受到消息后调用handleMessage进行处理.</p><h2 id="说说mvc模式的原理-它在android中的运用"><a href="#说说mvc模式的原理-它在android中的运用" class="headerlink" title="说说mvc模式的原理,它在android中的运用"></a>说说mvc模式的原理,它在android中的运用</h2><p>答：</p><p>android的官方建议应用程序的开发采用mvc模式。何谓mvc？</p><p>mvc是model,view,controller的缩写，mvc包含三个部分：</p><p>l模型（model）对象：是应用程序的主体部分，所有的业务逻辑都应该写在该层。</p><p>2视图（view）对象：是应用程序中负责生成用户界面的部分。也是在整个mvc架构中用户唯一可以看到的一层，接收用户的输入，显示处理结果。</p><p>3控制器（control）对象：是根据用户的输入，控制用户界面数据显示及更新model对象状态的部分，控制器更重要的一种导航功能，想用用户出发的相关事件，交给m哦得了处理。</p><p>在android中mvc的具体体现如下：</p><p>  1)视图层（view）：</p><p>一般采用xml文件进行界面的描述，</p><p>使用的时候可以非常方便的引入，当然，如何你对android了解的比较的多了话，就一定 可以想到在android中也可以使用javascript+html等的方式作为view层，当然这里需要进行java和javascript之间的通 信，幸运的是，android提供了它们之间非常方便的通信实现。</p><p>　2)控制层（controller）：</p><p>android的控制层的重 任通常落在了众多的acitvity的肩上，这句话也就暗含了不要在acitivity中写代码，要通过activity交割model业务逻辑层处理， 这样做的另外一个原因是android中的acitivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉。</p><p>　3)模型层（model）：</p><p>对数据库的操作、对网络等的操作都应该在model里面处理，当然对业务计算等操作也是必须放在的该层的。</p><h2 id="请描述下Activity的生命周期"><a href="#请描述下Activity的生命周期" class="headerlink" title="请描述下Activity的生命周期."></a>请描述下Activity的生命周期.</h2><p>onCreate(Bundle savedInstanceState)：创建activity时调用。</p><p>设置在该方法中，还以Bundle的形式提供对以前储存的任何状态的访问！</p><p>onStart()：activity变为在屏幕上对用户可见时调用。</p><p>onResume()：activity开始与用户交互时调用（无论是启动还是重新启动一个活动，该方法总是被调用的）。 </p><p>onPause()：activity被暂停或收回cpu和其他资源时调用，该方法用于保存活动状态的，也是保护现场，压栈吧！</p><p>onStop()：activity被停止并转为不可见阶段及后续的生命周期事件时调用。</p><p>onRestart()：重新启动activity时调用。该活动仍在栈中，而不是启动新的活动。</p><p>OnDestroy()：activity被完全从系统内存中移除时调用该方法</p><h2 id="Android中4大组件有哪些-他们的作用是什么"><a href="#Android中4大组件有哪些-他们的作用是什么" class="headerlink" title="Android中4大组件有哪些?他们的作用是什么?"></a>Android中4大组件有哪些?他们的作用是什么?</h2><p>Activity：</p><p>Activity是Android程序与用户交互的窗口，是Android构造块中最基本的一种，它需要为保持各界面的状态，做很多持久化的事情，妥善管理生命周期以及一些跳转逻辑。 </p><p>service：</p><p>后台服务于Activity，封装有一个完整的功能逻辑实现，接受上层指令，完成相关的事务，定义好需要接受的Intent提供同步和异步的接口。 </p><p>Content Provider：</p><p>是Android提供的第三方应用数据的访问方案，可以派生Content Provider类，对外提供数据，可以像数据库一样进行选择排序，屏蔽内部数据的存储细节，向外提供统一的接口模型，大大简化上层应用，对数据的整合提 供了更方便的途径。 </p><p>BroadCast Receiver：</p><p>接受一种或者多种Intent作触发事件，接受相关消息，做一些简单处理，转换成一条Notification，统一了Android的事件广播模型。 </p><h2 id="Activity有哪4种启动模式-有哪些特点"><a href="#Activity有哪4种启动模式-有哪些特点" class="headerlink" title="Activity有哪4种启动模式?有哪些特点?"></a>Activity有哪4种启动模式?有哪些特点?</h2><p>standard 默认模式 ——— 来了intent，每次都创建新的实例。</p><p>singleTop ——– 来了intent, 每次都创建新的实例，仅一个例外：当栈顶的activity恰恰就是该activity的实例（即需要创建的实例)时，不再创建新实例。</p><p>这解决了栈顶复用问题，想一想，你按两次back键，退出的都是同一个activity，这感觉肯定不爽。</p><p>singleTask ———- 来了intent后，检查栈中是否存在该activity的实例，如果存在就把intent发送给它，否则就创建一个新的该activity的实例，栈中只能有它一个该activity实例，但允许其他activity加入该栈。解决了在一 个task中共享一个activity。</p><p>singleInstance ———– 肯定位于一个task的栈底,并且是该栈唯一的activity。解决了多个task共享一个activity。</p><h2 id="注册广播有几种方式-这些方式有何特点"><a href="#注册广播有几种方式-这些方式有何特点" class="headerlink" title="注册广播有几种方式,这些方式有何特点?"></a>注册广播有几种方式,这些方式有何特点?</h2><p>1)动态代码注册不是常驻型广播，也就是说广播跟随程序的生命周期。</p><p>2)清单文件注册是常驻型，也就是说当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行。</p><h2 id="谈谈对android内存优化的方法-方案-规则及对内存泄漏如何避免"><a href="#谈谈对android内存优化的方法-方案-规则及对内存泄漏如何避免" class="headerlink" title="谈谈对android内存优化的方法,方案,规则及对内存泄漏如何避免"></a>谈谈对android内存优化的方法,方案,规则及对内存泄漏如何避免</h2><p>OOM即Out Of Memory,一般是由程序编写者对内存使用不当，如对该释放的内存资源没有释放，导致其一直不能被再次使用而使内存被耗尽的现象。根本的解决办法是对代码进行优化:在内存引用上做些处理，使用软引用、虚引用、和弱引用；在内存中加载图片时直接在内存中做处理，如边界压缩等；建立动态回收内存机制；优化Dalvik虚拟机的堆内存分配；自定义堆内存大小等。</p><p>一般而言，android中常见的原因主要有以下几个：</p><p>1.数据库的cursor没有关闭。<br>2.构造adapter没有使用缓存contentview。<br>3.调用registerReceiver()后未调用unregisterReceiver().<br>4.未关闭InputStream/OutputStream。<br>5.Bitmap使用后未调用recycle()。<br>6.Context泄漏。<br>7.static关键字等。</p><h2 id="启动service有几种方式，说出他们之间的主要区别"><a href="#启动service有几种方式，说出他们之间的主要区别" class="headerlink" title="启动service有几种方式，说出他们之间的主要区别"></a>启动service有几种方式，说出他们之间的主要区别</h2><p>答：</p><p>调用startService()：通过此种方法启动的service会一直运行在后台直到stopService()或stopSelf()方法被调用。</p><p>调用bindService()：通过此种方法启动的service会与调用者绑定，如果这个service还没有被启动，那么service启动时将不会调用onStart()，只调用onCreate()和onBind()，调用者被销毁时，service也被销毁</p><h2 id="intent-putExtra时，如果传递的不是基本类型，而是一个”Object”，那么对这个对象有什么要求？还是说任何对象都可以进行传递？"><a href="#intent-putExtra时，如果传递的不是基本类型，而是一个”Object”，那么对这个对象有什么要求？还是说任何对象都可以进行传递？" class="headerlink" title="intent.putExtra时，如果传递的不是基本类型，而是一个”Object”，那么对这个对象有什么要求？还是说任何对象都可以进行传递？"></a>intent.putExtra时，如果传递的不是基本类型，而是一个”Object”，那么对这个对象有什么要求？还是说任何对象都可以进行传递？</h2><p>答：</p><p>必须实现Serializable接口，或者实现Parcelable接口的对象才可以进行传递。  </p><h2 id="当调用startActivityForResult时，如何获取并处理返回的结构"><a href="#当调用startActivityForResult时，如何获取并处理返回的结构" class="headerlink" title="当调用startActivityForResult时，如何获取并处理返回的结构"></a>当调用startActivityForResult时，如何获取并处理返回的结构</h2><p>答：</p><p>通过onActivityResult(int requestCode, int resultCode, Intent data)处理返回的数据<br>requestCode：调用startActivityForResult(Intent intent, int requestCode)时传递过去的请求码。</p><p>resultCode：被调用的Activity执行setResult(int resultCode, Intent intent)时传递的结果码，一般有RESULT_CANCELED，RESULT_OK等，用于区分被调用的Activity传回的不同结果</p><p>data：被调用的Activity传回来的数据，可以用data.getExtras()得到数据，用Bundle类型的变量来接收，调用get…(String key)来获取对应的值</p><h2 id="使用startService（）和bindService（）启一个Service，这个Sercice的生命周期会有哪里不同？"><a href="#使用startService（）和bindService（）启一个Service，这个Sercice的生命周期会有哪里不同？" class="headerlink" title="使用startService（）和bindService（）启一个Service，这个Sercice的生命周期会有哪里不同？"></a>使用startService（）和bindService（）启一个Service，这个Sercice的生命周期会有哪里不同？</h2><p>  答:</p><p>   1.Context.startService()方式的生命周期： </p><p>   启动时，startService –&gt; onCreate() –&gt; onStart()停止时，stopService –&gt; onDestroy()</p><p>   如果调用者直接退出而没有停止Service，则Service 会一直在后台运行</p><p>   Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，</p><p>   接着调用onStart()方法。</p><p>   如果调用startService()方法前服务已经被创建，</p><p>   多次调用startService()方法并不会导致多次创建服务，</p><p>   但会导致多次调用onStart()方法。</p><p>   采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法附代码</p><p>2.Context.bindService()方式启动：</p><p>①Context.bindService()方式的生命周期： </p><p>绑定时,bindService -&gt; onCreate() –&gt; onBind()调用者退出了，</p><p>即解绑定时,Srevice就会unbindService –&gt;onUnbind() –&gt; onDestory()</p><p>Context.bindService()方式启动 </p><p>Service的方法：</p><p>绑定Service需要三个参数：bindService(intent, conn, Service.BIND_AUTO_CREATE);</p><p>第一个：Intent对象</p><p>第二个：ServiceConnection对象，</p><p>创建该对象要实现它的onServiceConnected()和 onServiceDisconnected()来判断连接成功或者是断开连接</p><p>第三个：如何创建Service，一般指定绑定的时候自动创建。</p><h2 id="Android中什么是ANR-如何应对或者如何避免它？"><a href="#Android中什么是ANR-如何应对或者如何避免它？" class="headerlink" title="Android中什么是ANR,如何应对或者如何避免它？"></a>Android中什么是ANR,如何应对或者如何避免它？</h2><p>答:  ANR 就是application not responding<br>    在android中Activity的最长执行时间是5秒.</p><p>BroadcastReceiver的最长执行时间则是10秒.</p><p>超出执行时间就会产生ANR.</p><p>解决方法: </p><ol><li>运行在主线程里的任何方法都尽可能少做事情。</li></ol><p>特别是，Activity应该在它的关键生命周期方法 （如onCreate()和onResume()）里尽可能少的去做创建操作。<br>（可以采用重新开启子线程的方式，然后使用Handler+Message 的方式做一些操作，比如更新主线程中的ui等）</p><ol start="2"><li>应用程序应该避免在BroadcastReceiver里做耗时的操作或计算。</li></ol><p>但不再是在子线程里做这些任务（因为 BroadcastReceiver的生命周期短），替代的是，如果响应Intent广播需要执行一个耗时的动作的话，应用程序应该启动一个 Service。</p><h2 id="AIDL-的全称是什么？如何工作？能处理哪些类型的数据？"><a href="#AIDL-的全称是什么？如何工作？能处理哪些类型的数据？" class="headerlink" title="AIDL 的全称是什么？如何工作？能处理哪些类型的数据？"></a>AIDL 的全称是什么？如何工作？能处理哪些类型的数据？</h2><p> 答:  AIDL: (Android Interface Definition Language)跨进程通信传输语言</p><p>   如何工作:AIDL文件由自己定义,在被绑定的Service中和绑定的客户端中都要部署</p><p>1.创建AIDL文件, 在这个文件里面定义接口, 该接口定义了可供客户端访问的方法和属性。<br>2、编译AIDL文件, 用Ant的话, 可能需要手动, 使用Eclipse plugin的话,可以根据adil文件自动生产java文件并编译, 不需要人为介入.<br>3、在Java文件中, 实现 AIDL中定义的接口. 编译器会根据AIDL接口, 产生一个JAVA接口。这个接口有一个名为Stub的内部抽象类，它继承扩展  了接口并实现了远程调 用需要的几个方法(是Binder的子类)。</p><p>接下来就需   要自己去实现自定义的几个接口了.</p><p>4.第一个程序的Service:因为跨进程传递时利用Binder对象来实现的,所以我们要在Service端构建Binder对象,又因为我们定义的接口AIDL文件在编译转成.java时的内部类Sub实现了Binder,所以我们构建Binder对象时构建实例内部类直接继承Sub内部类,在类中我们可以调用Service中的方法,此类的对象也就是Binder对象.</p><p>5.第二个程序的Activity:在Activity中我们利用bindService方法启动一个绑定的Service的同时需要传入连接对象,所以我们先在Activity中构建Service的连接对象,在该对象的匿名内部类中重写获得Binder对象的方法,参数含有Binder对象,将此对象强制转换成我们在Service中继承Sub的类的对象,强转后我们可以利用该对象调用Service中的方法,从而实现跨进程通信,控制Service.</p><h2 id="请简单介绍一下NDK。"><a href="#请简单介绍一下NDK。" class="headerlink" title="请简单介绍一下NDK。"></a>请简单介绍一下NDK。</h2><p>NDK全称：Native Development Kit。</p><p>1、NDK是一系列工具的集合。</p><ul><li>NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这些工具对开发者的帮助是巨大的。</li></ul><h2 id="你后台的Activity被系统回收怎么办："><a href="#你后台的Activity被系统回收怎么办：" class="headerlink" title="你后台的Activity被系统回收怎么办："></a>你后台的Activity被系统回收怎么办：</h2><p>当你的程序中某一个Activity A 在运行时中，主动或被动地运行另一个新的Activity B 这个时候A会执行<br>Java代码</p><p>public<br>void onSaveInstanceState(Bundle outState) {<br>super.onSaveInstanceState(outState);<br>outState.putLong(“id”, 1234567890);<br>}<br>public void<br>onSaveInstanceState(Bundle outState) {</p><p>B 完成以后又会来找A, 这个时候就有两种情况，一种是A被回收，一种是没有被回收，被回 收的A就要重新调用onCreate()方法，不同于直接启动的是这回 onCreate()里是带上参数 savedInstanceState，没被收回的就还是onResume就好了。</p><p>savedInstanceState是一个Bundle对象，你基本上可以把他理解为系统帮你维护的一个Map对象。在onCreate()里你可能会用到它，如果正常启动onCreate就不会有它，所以用的时候要判断一下是否为空。</p><p>Java代码<br>if(savedInstanceState !=null){<br>long id =savedInstanceState.getLong(“id”);<br>}<br>if(savedInstanceState !=null){<br>就像官方的Notepad教程里的情况，你正在编辑某一个note，突然被中断，那么就把这个note的id记住，再起来的时候就可以根据这个id去把那个note取出来。</p><h2 id="怎么优化listview"><a href="#怎么优化listview" class="headerlink" title="怎么优化listview"></a>怎么优化listview</h2><p>1、如果自定义适配器，那么在getView方法中要考虑方法传进来的参数contentView是否为null，如果为null就创建contentView并返回，如果不为null则直接使用。在这个方法中尽可能少创建view。<br>2、给contentView设置tag（setTag（）），传入一个viewHolder对象，用于缓存要显示的数据，可以达到图像数据异步加载的效果。<br>3、如果listview需要显示的item很多，就要考虑分页加载。比如一共要显示100条或者更多的时候，我们可以考虑先加载20条，等用户拉到列表底部的时候再去加载接下来的20条。<br>4、设置listview的监听器，如果listview是飞快滑动状态则不更新view</p><h2 id="根据自己的理解描述下Android数字签名。"><a href="#根据自己的理解描述下Android数字签名。" class="headerlink" title="根据自己的理解描述下Android数字签名。"></a>根据自己的理解描述下Android数字签名。</h2><p>(1)所有的应用程序都必须有数字证书，Android系统不会安装一个没有数字证书的应用程序</p><p>(2)Android程序包使用的数字证书可以是自签名的，不需要一个权威的数字证书机构签名认证</p><p>(3)如果要正式发布一个Android ，必须使用一个合适的私钥生成的数字证书来给程序签名。</p><p>(4)数字证书都是有有效期的，Android只是在应用程序安装的时候才会检查证书的有效期。如果程序已经安装在系统中，即使证书过期也不会影响程序的正常功能。</p><h2 id="简述Android-root机制"><a href="#简述Android-root机制" class="headerlink" title="简述Android root机制"></a>简述Android root机制</h2><p>答:</p><p>root指的是你有权限可以再系统上对所有档案有 “读” “写” “执行”的权力。root机器不是真正能让你的应用程序具有root权限。它原理就跟linux下的像sudo这样的命令。在系统的bin目录下放个su程序并属主是root并有suid权限。则通过su执行的命令都具有Android root权限。当然使用临时用户权限想把su拷贝的/system/bin目录并改属性并不是一件容易的事情。这里用到2个工具跟2个命令。把busybox拷贝到你有权限访问的目录然后给他赋予4755权限，你就可以用它做很多事了。</p><h2 id="进程间通信机制，传统IPC-和-Binder"><a href="#进程间通信机制，传统IPC-和-Binder" class="headerlink" title="进程间通信机制，传统IPC 和 Binder"></a>进程间通信机制，传统IPC 和 Binder</h2><p>答:</p><p>传统的进程间通信机制IPC 有管道（Pipe）、信号（Signal）和跟踪（Trace），这三项通信手段只能用于父进程和子进程之间，或者兄弟进程之间；后来又增加了命令管道（Named Pipe）,使得进程间通信不再局限于父子进程或兄弟进程之间。后来又出现了报文队列（Message）、共享内存（Share Memeory）和信号量（Semaphore）。Android系统没有采用上述提到的各种进程间通信机制，而是采用Binder机制，它是基于OpenBinder来实现的。<br>它提供了远程过程调用（RPC）功能，在Android系统的Binder机制中，有一系列组件组成包括 Client、Server、ServiceManager和Binder驱动程序。</p><h2 id="Serializable和Parcelable的特点及比较"><a href="#Serializable和Parcelable的特点及比较" class="headerlink" title="Serializable和Parcelable的特点及比较"></a>Serializable和Parcelable的特点及比较</h2><p>答:</p><p>Serializable和Parcelable二者都是实现序列化的接口。Parcelable,定义了将数据写入Parcel，和从Parcel中读出的接口。一个实体（用类来表示），如果需要封装到消息中去，就必须实现这一接口，实现了这一接口，该实体就成为“可打包的”了。</p><p>一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。</p><p>因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。Serializable的实现，只需要implements Serializable即可，这只是给对象打了一个标记，系统会自动将其序列化。</p><p>Parcelable的实现，需要在类中添加一个静态成员变量CREATOR，这个变量需要继承Parcelable.Creator接口。</p><p>比较:</p><p>Serializable是Java.io中的，不可被activity中的内部类被继承，否则出错；Parcelable是Android特有的，比Serializable节省内存，可以传递Bundle对象，当我们有boolean型的变量可以现存在Bundle中。</p><h2 id="View、surfaceView、GLSurfaceView有什么区别"><a href="#View、surfaceView、GLSurfaceView有什么区别" class="headerlink" title="View、surfaceView、GLSurfaceView有什么区别"></a>View、surfaceView、GLSurfaceView有什么区别</h2><p>View：</p><p>显示视图，<br>内置画布，<br>提供图形绘制函数、<br>触屏事件、<br>按键事件函数等，<br>必须在UI主线程内更新画面，速度较慢</p><p>SurfaceView：</p><p>基于view视图进行拓展的视图类，<br>更适合2D游戏的开发，<br>是view的子类，<br>类似使用双缓机制，<br>在新的线程中更新画面所以刷新界面速度比view快</p><p>GLSurfaceView：</p><p>基于SurfaceView视图再次进行拓展的视图类，<br>专用于3D游戏开发的视图，<br>是surfaceView的子类，<br>openGL专用</p><h2 id="你曾经用到的android手机访问服务端的方式有哪些？"><a href="#你曾经用到的android手机访问服务端的方式有哪些？" class="headerlink" title="你曾经用到的android手机访问服务端的方式有哪些？"></a>你曾经用到的android手机访问服务端的方式有哪些？</h2><p>Android手机访问服务端的方式有两种，分别是：通过socket访问和通过Http协议发送Post和Get请求。</p><p>   Socket是长连接，服务端和客户端之间通过Socket建立连接，首先ServerSocket将在服务端监听某个端口，当发现客户端有Socket来试图连接它时，它会接受该Socket的连接请求，同时在服务端建立一个对应的Socket与之进行通信。这样就有两个Socket了，客户端和服务端各一个。</p><p>   发送get和post协议，通过HTTP协议建立短连接。客户端发送请求（Request），服务器端收到后根据请求的类型返回相应的响应（response）。</p><h2 id="什么是TCP和IP，它们位于网络模型的哪层？"><a href="#什么是TCP和IP，它们位于网络模型的哪层？" class="headerlink" title="什么是TCP和IP，它们位于网络模型的哪层？"></a>什么是TCP和IP，它们位于网络模型的哪层？</h2><p>TCP是传输控制协议，<br>IP是internet协议，</p><p>TCP在网络模型中与UDP一样同属于第二层(传输层)，</p><p>IP属于三层(网络层)，</p><p>IP用于确定主机在网络中的位置，而TCP与UDP用于标示不同的服务，即应用程序。</p><h2 id="Xml和json的区别"><a href="#Xml和json的区别" class="headerlink" title="Xml和json的区别"></a>Xml和json的区别</h2><p>1．可读性　　<br>JSON和XML的可读性可谓不相上下，一边是建议的语法，一边是规范的标签形式，很难分出胜负。</p><p>2可扩展性　　<br>XML天生有很好的扩展性，JSON当然也有，没有什么是XML能扩展，JSON不能的。</p><p>3.编码难度　　<br>XML有丰富的编码工具，比如Dom4j、JDom等，JSON也有json.org提供的工具，但是JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了。</p><p>4．解码难度　　<br>XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0。这一点XML输的真是没话说。</p><p>5.流行度　　<br>XML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。</p><h2 id="SAX-、DOM4J-、PULL解析的区别"><a href="#SAX-、DOM4J-、PULL解析的区别" class="headerlink" title="SAX 、DOM4J  、PULL解析的区别"></a>SAX 、DOM4J  、PULL解析的区别</h2><p>Sax特点</p><pre><code>1. 解析效率高，占用内存少2.可以随时停止解析3.不能载入整个文档到内存4.不能写入xml5.SAX解析xml文件采用的是事件驱动</code></pre><p>pull与sax的不同之处</p><pre><code>1.pull读取xml文件后触发相应的事件调用方法返回的是数字。2.pull可以在程序中控制，想解析到哪里就可以停止到哪里</code></pre><p>3.Android中更推荐使用pull解析</p><p>DOM的特点<br>         &gt;优点<br>                  1.整个文档树在内存中，便于操作；支持删除、修改、重新排列等多种功能<br>                  2.通过树形结构存取xml文档<br>                  3.可以在树的某个节点上向前或向后移动<br>         &gt;缺点<br>                  1.将整个文档调入内存（包括无用的节点），浪费时间和空间<br>         &gt;适用场合<br>                  一旦解析了文档还需多次访问这些数据；硬件资源充足（内存，cpu）</p><p>ok</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/categories/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/tags/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android面试题总结</title>
    <link href="https://huangguangda.github.io/2018/05/15/1/"/>
    <id>https://huangguangda.github.io/2018/05/15/1/</id>
    <published>2018-05-15T00:42:00.000Z</published>
    <updated>2018-07-04T00:51:54.435Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>Android面试题总结</p><p>1.简述Activity的生命周期？</p><p>1）Activity的生命周期通过7个生命周期方法<br>onCreate(),<br>onRestart(),<br>onStart(),<br>onResume(),<br>onPause(),<br>onStop(),<br>onDestroy()<br>来体现。</p><p>2）其中6个生命周期方法是<br>成对对应起来的,<br>哪里创建的对象，一般应该在其对应的方法中销毁。</p><p>onCreate() – onDestroy()<br>onStart() – onStop()<br>onResume() – onPause()</p><p>3）当程序启动之后，<br>第一个Activity经过的生命周期方法是：<br>onCreate() →onStart() → onResume()方法,</p><p>当第一个Activity<br>A启动第二个Activity B的时候</p><p>(备注:第二个Activity完全遮盖住第一个Activity，并且这个过程中没有出现点击Home键，或者第一个Activity被杀死等异常情况，并且两个Activity的启动模式是标准模式)，</p><p>这两个Activity经历的生命周期方法是：</p><p>A onPause() → B onCreate() → B onStart() → B onResume() → A onStop() → (此时Activity A已经在回退栈的最低端， Activity B已经在Activity A的上面，在回退栈的最顶端)</p><p>当通过点击后退键退出Activity B的时候：</p><p>(此时Activity B 弹出回退栈) → B onPause() → A onRestart() → A onStart() → A onResume() → B onStop() → B onDestroy() 此时B<br>被销毁</p><p>简述Service的生命周期？</p><p>1).如果在Activity中通过调用</p><p>startService()</p><p>方法启动一个Service的话，<br>那么生命周期是：</p><p>onCreate() → onStartCommand() → 运行中 → (如果自己或者客户端(如Activity)调用了stop Service的方法的话) → onDestroy()</p><p>2).如果在Activity中通过调用</p><p>bindService()</p><p>方法启动一个Service的话，<br>那么生命周期是：</p><p>onCreate() → onBind() → 运行中 → (如果有客户端(Activity)调用了unBindService()方法与Service解除绑定时) → onUnbind() → onDestroy()</p><p>有几种控件布局的方式？</p><p>1）RelativeLayout:相对布局，<br>可以根据相对位置来调整控件的位置。推荐使用相对布局，更利于屏幕的自适应。</p><p>2）LinearLayout:线性布局，<br>控件之间的水平排列或者垂直排列。但是如果要想构建复杂布局，要进行多层的LinearLayout布局嵌套，但是这样会运行布局载入效率。</p><p>3）FrameLayout:帧布局，<br>控件与控件之间处于上下叠加的状态。</p><p>备注：还有两个已经不怎么用的布局：<br>TableLayout：表格布局 AbsoluteLayout 绝对布局。</p><p>布局实现方式有两种：xml文件静态实现，代码动态实现。</p><p>一般xml文件中可以实现布局控制的话，就不建议放在代码中实现布局控制，因为在xml文件中实现布局控制，可以做到布局与代码分离。</p><p>4.有几种数据存储方式，分别是什么？</p><p>1）SQLite数据库存储结构化数据。</p><p>2）文件存储：分为内部存储和外部存储(SD卡)两种存储方式。</p><p>3）SharedPreferences共享参数，键值对形式存储。</p><p>4）网络存储。</p><p>5.IntentService与Service有什么区别？</p><p>IntentService是Service的子类</p><p>1）Service如果要处理异步请求(如耗时操作)的话，</p><p>需要自己启动一个worker thread,</p><p>如果启动多个worker thread来处理相关事务的话，各线程之间无法很好的控制。</p><p>而IntentService可以将多个异步请求的Intent放入队列中，封装了一个开启worker thread的onHandleIntent()方法，来依次处理放入队列中的Intent，只有一个worker thread在运行，同一时刻只有一个Intent被处理，当一个Intent处理完了之后才会处理另外一个Intent。</p><p>2）Service可以通过startService()或者bindService()方法来启动，</p><p>而IntentService则是通过startService()方法来启动。</p><p>3）Service适合多线程处理异步请求。</p><p>而IntentService则适合处理需要排队的请求。</p><p>6.StartService与bindService之间的区别？</p><p>1）StartService启动了Service之后无法与Activity之间进行通信，与现有的Activity分离，即使Activity被杀掉了之后，Service还可以运行，同时通过设置Service的粘性，还可以让Service被杀掉之后，可以自启动。而bindService启动Service之后，与绑定的Activity之间有关系，可以依据Server/Client模式来进行通信(binder客户端主动请求模式，或者通过信使)，但是无法设置Serrvice的粘性。</p><p>2) StartService启动的Service,Activity中可以调用stopService()方法来结束一个Service，或者通过Service自己调用stopSelf()方法来结束Service。而bindService只能通过Activity()来调用unbindService()方法来结束Service，Service会调用onUnBind()方法，以及onDestroy()方法。</p><p>7.ArrayAdapter BaseAdapter CursorAdapter的区别？</p><p>ArrayAdpter CursorAdapter都是BaseAdapter的子类。<br>都是用来填充那些含有item的控件。</p><p>1）主要区别是数据来源不同。</p><p>ArrayAdapter数据来源是Object数组，<br>CursorAdapter数据来源是数据库的Cursor,<br>而BaseAdapter适合创建复杂自定义的item内容，</p><p>通过继承BaseAdapter类，重写相关方法来实现。</p><p>8.Handler与Looper之间的关系?</p><p>1) Handler和Looper的关系就好比，坐地铁过安检时候：每一个人可以理解为一个Handler，一个人的一个或者多个东西看做Message而循环滚动的检查台装置可以看做是Looper，而要检查的东西排成队列可以理解为MessageQueue消息队列。</p><p>2)Looper是Handler和MessageQuene之间的桥梁，Looper将Handler发送过的消息放入MessageQueue,同时Looper也将MessageQueue中的Message发送给Handler来处理。</p><p>9.res文件夹与assets文件夹有什么区别?</p><p>1)res文件夹中的资源在会在R.java文件中生成ID，<br>代码中可以直接通过R.id的形式来访问。</p><p>而assets文件夹中的资源不会在R.java文件中生成ID,</p><p>需要通过AssetsManager通过IO流的方式来访问。</p><p>2)res文件夹中的文件会被压缩，</p><p>而assets文件中的文件不会被压缩。</p><p>3)Res不能自定义目录名，不支持多层目录。</p><p>而assets支持自定义目录名，支持多层目录。</p><p>10.广播接收器有几种注册方式，分别是什么？</p><p>1)动态注册：在代码中注册，创建一个IntentFilter(意图过滤器)对象，设置想要就收的广播，在onCreate()方法中通过调用registerReceiver()方法来注册广播接收器，在onDestroy()方法中通过调用unregisterReceiver()方法来注销广播接收器。</p><p>2)静态注册：在AndroidManifest.xml文件中注册，<receiver>标签注册类，通过<intentfilter>标签中的<action>来过滤意图。静态注册的好处是，当程序关闭或者没有打开的时候，同样可以接收相关的广播。比如实现开机启动。</action></intentfilter></receiver></p><p>ok</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/categories/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/tags/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Java就业面试题大全</title>
    <link href="https://huangguangda.github.io/2018/05/14/1/"/>
    <id>https://huangguangda.github.io/2018/05/14/1/</id>
    <published>2018-05-14T13:40:52.000Z</published>
    <updated>2018-07-02T15:41:26.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>仅供学习</p><p>1、一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？<br>可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。</p><p>2、Java有没有goto?<br>java中的保留字，现在没有在java中使用。</p><p>3、说说&amp;和&amp;&amp;的区别。<br>&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。</p><p>&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式</p><p>4、在JAVA中如何跳出当前的多重嵌套循环？ </p><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。</p><p>5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上? </p><p>由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long和String类型都不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。 </p><p>6、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错? </p><p>对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。<br>对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。 </p><p>对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。<br>对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。</p><p>7、char型变量中能不能存贮一个中文汉字?为什么? </p><p>char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</p><p>8、用最有效率的方法算出2乘以8等於几? </p><p>2 &lt;&lt; 3，<br>因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，2乘以8等於几的最效率的方法是2 &lt;&lt; 3。</p><p>使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？ </p><p>使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对于如下语句：</span><br><span class="line"> final StringBuffer a=new StringBuffer(&quot;immutable&quot;);</span><br><span class="line">执行如下语句将报告编译期错误：</span><br><span class="line">a=new StringBuffer(&quot;&quot;);</span><br><span class="line">但是，执行如下语句则可以通过编译：</span><br><span class="line">a.append(&quot; broken!&quot;);</span><br></pre></td></tr></table></figure></p><p>有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void method(final  StringBuffer  param)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上，这是办不到的，在该方法内部仍然可以增加如下代码来修改参数对象：<br>        param.append(“a”);</p><p>“==”和equals方法究竟有什么区别？<br>==操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。</p><p>equals方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的两个对象是独立的。</p><p>静态变量和实例变量的区别？<br>在语法定义上的区别：静态变量前要加static关键字，而实例变量前则不加。</p><p>在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</p><p>是否可以从一个static方法内部发出对非static方法的调用？ </p><p>不可以。因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。</p><p>Integer与int的区别</p><p>int是java提供的8种原始数据类型之一。Java为每个原始类型提供了封装类，Integer是java为int提供的封装类。int的默认值为0，而Integer的默认值为null，即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况，例如，要想表达出没有参加考试和考试成绩为0的区别，则只能使用Integer。在JSP开发中，Integer的默认为null，所以用el表达式在文本框中显示时，值为空白字符串，而int默认的默认值为0，所以用el表达式在文本框中显示时，结果为0，所以，int不适合作为web层的表单数据的类型。</p><p>下面的代码有什么不妥之处?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. if(username.equals(“zxx”)&#123;&#125;</span><br><span class="line">2.int  x = 1;</span><br><span class="line">return x==1?true:false;</span><br></pre></td></tr></table></figure></p><p>abstract class和interface有什么区别? </p><p>含有abstract修饰符的class即为抽象类，abstract 类不能创建的实例对象。含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。abstract class类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。</p><p>接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。</p><p>下面比较一下两者的语法区别：<br>1.抽象类可以有构造方法，接口中不能有构造方法。<br>2.抽象类中可以有普通成员变量，接口中没有普通成员变量<br>3.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。</p><ol start="4"><li>抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然<br>eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。</li><li>抽象类中可以包含静态方法，接口中不能包含静态方法</li><li>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。</li><li>一个类可以实现多个接口，但只能继承一个抽象类。</li></ol><p>什么是内部类？Static Nested Class 和 Inner Class的不同。</p><p>内部类就是在一个类的内部定义的类，内部类中不能定义静态成员（静态成员不是对象的特性，只是为了找一个容身之处，所以需要放到一个类中而已，这么一点小事，你还要把它放到类内部的一个类中，过分了啊！提供内部类，不是为让你干这种事情，无聊，不让你干。我想可能是既然静态成员类似c语言的全局变量，而内部类通常是用于创建内部对象用的，所以，把“全局变量”放在内部类中就是毫无意义的事情，既然是毫无意义的事情，就应该被禁止），内部类可以直接访问外部类中的成员变量，内部类可以定义在外部类的方法外面，也可以定义在外部类的方法体中.</p><p>jdk中哪些类是不能继承的？<br>不能继承的是类是那些用final关键字修饰的类。一般比较基本的类型或防止扩展类无意间破坏原来方法的实现的类型都应该是final的，在jdk中System,String,StringBuffer等都是基本类型。</p><p>String是最基本的数据类型吗?<br>基本数据类型包括byte、int、char、long、float、double、boolean和short。<br>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类 </p><p>是否可以继承String类?<br>String类是final类故不可以继承。 </p><p>String 和StringBuffer的区别</p><p>JAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。String类表示内容不可改变的字符串。而StringBuffer类表示内容可以被修改的字符串。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用StringBuffers来动态构造字符数据。另外，String实现了equals方法，new String(“abc”).equals(new String(“abc”)的结果为true,而StringBuffer没有实现equals方法，所以，new StringBuffer(“abc”).equals(new StringBuffer(“abc”)的结果为false。</p><p>StringBuffer与StringBuilder的区别</p><p>StringBuffer和StringBuilder类都表示内容可以被修改的字符串，StringBuilder是线程不安全的，运行效率高，如果一个字符串变量是在方法里面定义，这种情况只可能有一个线程访问它，不存在不安全的因素了，则用StringBuilder。如果要在类里面定义成员变量，并且这个类的实例对象会在多线程环境下使用，那么最好用StringBuffer。</p><p>如何把一段逗号分割的字符串转换成一个数组?<br>如果不查jdk api，我很难写出来！我可以说说我的思路：<br>1.用正则表达式，代码大概为：String [] result = orgStr.split(“,”);<br>2.用 StingTokenizer ,代码为：StringTokenizer  tokener = StringTokenizer(orgStr,”,”);<br>String [] result = new String[tokener .countTokens()];<br>Int i=0;<br>while(tokener.hasNext(){result[i++]=toker.nextToken();}</p><p>数组有没有length()这个方法? String有没有length()这个方法？<br>数组没有length()这个方法，有length的属性。String有有length()这个方法。</p><p>final, finally, finalize的区别。<br>　　final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。<br>内部类要访问局部变量，局部变量必须定义成final类型，例如，一段代码……</p><p>finally是异常处理语句结构的一部分，表示总是执行。</p><p>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM不保证此方法总被调用</p><p>运行时异常与一般异常有何异同？<br>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。</p><p>error和exception有什么区别?<br>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。 exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。 </p><p>java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？ </p><p>java5以前，有如下两种：</p><p>第一种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Thread()&#123;&#125;.start();这表示调用Thread子类对象的run方法，new Thread()&#123;&#125;表示一个Thread的匿名子类的实例对象，子类加上run方法后的代码如下：</span><br><span class="line">new Thread()&#123;</span><br><span class="line">public void run()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第二种：</span><br><span class="line">new Thread(new Runnable()&#123;&#125;).start();这表示调用Thread对象接受的Runnable对象的run方法，new Runnable()&#123;&#125;表示一个Runnable的匿名子类的实例对象,runnable的子类加上run方法后的代码如下：</span><br><span class="line">new Thread(new Runnable()&#123;</span><br><span class="line">public void run()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><p>sleep() 和 wait() 有什么区别? </p><p>（网上的答案：sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。） </p><p>sleep就是正在执行的线程主动让出cpu，cpu去执行其他线程，在sleep指定的时间过后，cpu才会回到这个线程上继续往下执行，如果当前线程进入了同步锁，sleep方法并不会释放锁，即使当前线程使用sleep方法让出了cpu，但其他被同步锁挡住了的线程也无法得到执行。wait是指在一个已经进入了同步锁的线程内，让自己暂时让出同步锁，以便其他正在等待此锁的线程可以得到同步锁并运行，只有其他线程调用了notify方法（notify并不释放锁，只是告诉调用过wait方法的线程可以去参与获得锁的竞争了，但不是马上得到锁，因为锁还在别人手里，别人还没释放。如果notify方法后面的代码还有很多，需要这些代码执行完后才会释放锁，可以在notfiy方法后增加一个等待和一些代码，看看效果），调用wait方法的线程就会解除wait状态和程序可以再次得到锁后继续向下运行。对于wait的讲解一定要配合例子代码来说明，才显得自己真明白。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">public class MultiThread &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">new Thread(new Thread1()).start();</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(10);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">new Thread(new Thread2()).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static class Thread1 implements Runnable</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line"></span><br><span class="line">//由于这里的Thread1和下面的Thread2内部run方法要用同一对象作为监视器，我们这里不能用this，因为在Thread2里面的this和这个Thread1的this不是同一个对象。我们用MultiThread.class这个字节码对象，当前虚拟机里引用这个变量时，指向的都是同一个对象。</span><br><span class="line"></span><br><span class="line">synchronized (MultiThread.class) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;enter thread1...&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;thread1 is waiting&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">//释放锁有两种方式，第一种方式是程序自然离开监视器的范围，也就是离开了synchronized关键字管辖的代码范围，另一种方式就是在synchronized关键字管辖的代码内部调用监视器对象的wait方法。这里，使用wait方法释放锁。</span><br><span class="line"></span><br><span class="line">MultiThread.class.wait();</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;thread1 is going on...&quot;);</span><br><span class="line">System.out.println(&quot;thread1 is being over!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static class Thread2 implements Runnable</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line"></span><br><span class="line">synchronized (MultiThread.class) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;enter thread2...&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;thread2 notify other thread can release wait status..&quot;);</span><br><span class="line">//由于notify方法并不释放锁， 即使thread2调用下面的sleep方法休息了10毫秒，但thread1仍然不会执行，因为thread2没有释放锁，所以Thread1无法得不到锁。</span><br><span class="line"></span><br><span class="line">MultiThread.class.notify();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;thread2 is sleeping ten millisecond...&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(10);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;thread2 is going on...&quot;);</span><br><span class="line">System.out.println(&quot;thread2 is being over!&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步和异步有何异同，在什么情况下分别使用他们？举例说明。 </p><p>如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。<br>当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。 </p><p>多线程有几种实现方法?同步有几种实现方法? </p><p>多线程有两种实现方法，分别是继承Thread类与实现Runnable接口<br>同步的实现方面有两种，分别是synchronized,wait与notify<br>wait():使一个线程处于等待状态，并且释放所持有的对象的lock。<br>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。<br>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。<br>Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</p><p>启动一个线程是用run()还是start()?<br>启动一个线程是调用start()方法，使线程就绪状态，以后可以被调度为运行状态，一个线程必须关联一些具体的执行代码，run()方法是该线程所关联的执行代码。 </p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>MVC的各个部分都有那些技术来实现?如何实现? </p><p>答:MVC是Model－View－Controller的简写。Model 代表的是应用的业务逻辑（通过JavaBean，EJB组件实现）， View 是应用的表示面（由JSP页面产生），Controller 是提供应用的处理过程控制（一般是一个Servlet），通过这种设计模型把应用逻辑，处理过程和显示逻辑分成不同的组件实现。这些组件可以进行交互和重用。 </p><p>数据库部分<br>1、用两种方式根据部门号从高到低，工资从低到高列出每个员工的信息。<br>employee:<br>     eid,ename,salary,deptid;<br> select * from employee order by deptid desc,salary</p><p>j2ee常用的设计模式？说明工厂模式。<br>总共23种，分为三大类：创建型，结构型，行为型<br>我只记得其中常用的6、7种，分别是：<br>创建型（工厂、工厂方法、抽象工厂、单例）<br>结构型（包装、适配器，组合，代理）<br>行为（观察者，模版，策略）<br>然后再针对你熟悉的模式谈谈你的理解即可。  </p><p>Java中的23种设计模式：<br>Factory（工厂模式），      Builder（建造模式），       Factory Method（工厂方法模式），<br>Prototype（原始模型模式），Singleton（单例模式），    Facade（门面模式），<br>Adapter（适配器模式），    Bridge（桥梁模式），        Composite（合成模式），<br>Decorator（装饰模式），    Flyweight（享元模式），     Proxy（代理模式），<br>Command（命令模式），      Interpreter（解释器模式）， Visitor（访问者模式），<br>Iterator（迭代子模式），   Mediator（调停者模式），    Memento（备忘录模式），<br>Observer（观察者模式），   State（状态模式），         Strategy（策略模式），<br>Template Method（模板方法模式）， Chain Of Responsibleity（责任链模式） </p><p>J2EE是什么？<br>答:Je22是Sun公司提出的多层(multi-diered),分布式(distributed),基于组件(component-base)的企业级应用模型(enterpriese application model).在这样的一个应用系统中，可按照功能划分为不同的组件，这些组件又可在不同计算机上，并且处于相应的层次(tier)中。所属层次包括客户层(clietn tier)组件,web层和组件,Business层和组件,企业信息系统(EIS)层。</p><p>一个另类的回答：j2ee就是增删改查。 </p><p>J2EE是技术还是平台还是框架？ 什么是J2EE<br>   J2EE本身是一个标准，一个为企业分布式应用的开发提供的标准平台。<br>   J2EE也是一个框架，包括JDBC、JNDI、RMI、JMS、EJB、JTA等技术。</p><p>ok</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/categories/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/tags/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>四级考试听力场景词汇大全</title>
    <link href="https://huangguangda.github.io/2018/05/13/1/"/>
    <id>https://huangguangda.github.io/2018/05/13/1/</id>
    <published>2018-05-13T05:34:14.000Z</published>
    <updated>2018-07-01T06:10:34.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>仅供学习</p><p>你永远也无法找到一个比这个更全更准的听力复习资料</p><p>一、机场、飞机上、客轮</p><p>常考思路：<br>　　1) 票已售完<br>　　2) 接人(飞机)晚点<br>　　3) 送人伤感 see somebody off<br>　　常见线索词：<br>　　departure 离港<br>　　sect belt 安全带<br>　　arrival 进港<br>　　pick up 接机<br>airplane, flight 航班, direct flight直航，transfer转机，<br>first class头等舱， economy class经济舱，<br>circle 盘旋<br>　　wing: a.建筑物的附属楼 b.飞机的翅膀 c.鸡翅<br>　　terminal: a.终端(机房里面 Should I use this terminal?)<br>　　b. =final station公交站最后一站<br>　　c.候机大厅<br>　　domestic terminal国内候机大厅，international terminal国际候机大厅</p><p>1.机场地点­<br>    Terminal (航站楼)­  Check-in counter (换票柜台)　　Customs (海关)­</p><ol start="2"><li>机场人物­<br>　　Airhostess/stewardess (空姐)　 steward (空哥、空少)　 flight attendant (飞机乘务员)­</li><li>飞机动作­<br>　　Take off/land (起飞、降落)　　 ascend/descend(上升、下降)­<br>wait for further notice等候进一步通知<br> minor mechanical errors轻微的机械故障 terminal候机大厅<br> clear up天晴起来 　　　　　　swing不稳定,极端<br> weather forecast天气预报 　   freezing非常冷 　<br>coupled with strong wind伴有强风</li></ol><p>二、餐厅　<br>　　1)cafeteria学校饭堂：meal card/ticket饭卡/饭票，helping一人份<br>　　2)restaurant: fancy高档的, menu菜谱, order, manager经理, waiter<br>　　book/reserve预订 ，make a reservation预定<br>　　上菜顺序：soup汤——&gt; main course主菜——&gt; salad沙拉(chef salad招牌沙拉)——&gt; dessert甜点 (pudding布丁, cheese , fruit)</p><p>赞美人家做菜好吃：<br>　　1) Even my mother’s can’t match this.即使我妈妈做的也比不上这个好吃。<br>　　2) I took the last one and it was out of the world.(太好吃了以至于)我把最后一块也吃掉了。<br>　　3) You wouldn’t have to force me to help another one. 你不用叫我吃，我自己也会拿来吃的。<br>1.点菜：­ French Fries (薯条)­</p><ol start="2"><li>买单：­Check the bill please!(买单！) Treat (请客)　 split the bill (分开付)­</li></ol><p>三、图书馆　<br>　　1.书籍：journal 学术类刊物　(08-6)­<br>　　volume 卷　 current/back issue 现/过刊　 periodical　 期刊­<br>2.人物：librarian 图书管理员­</p><p>四、Campus life　校园生活­</p><ol><li>课程分类<br>　　Optional course 选修课<br>　　Required course 必修课<br>Literature 文学<br>09-12出现的一些新课程名称：­<br>advanced physics (高级物理)<br>data processing (数据处理)­<br>　　computer programming (计算机程序)­<br>be through with sth　结束，完成(两次考到)­<br>　due　到期<br>　have sb’s hands full with sth　忙于做某事(07-12)­<br>apply for申请<br>business degree商学院学位<br>pay your own way自己支付各种费用</li></ol><p>2.　课程形式词汇：­<br>　　Seminar(06-6、07年6月词汇，研讨会)　　<br>　　presentation (展示或演示课，多次考到)­<br>biology生物学<br>    class permit听课证<br>informative信息量大</p><p>senior(大四)(05年考点)­<br>graduate(毕业生)<br>undergraduate (在校生，本科生)<br>postgraduate (研究生)­<br>tutor(导师)<br>graduate school　(研究生院)­<br>Position/post　(职位。多次考到)　　<br>recruit (招聘。连续考到)<br>　　resign　(退休，多次考到)­<br>benefit (package)　(福利，两次考到)<br>paid vacation　 (带薪假期)­<br>social security (美国的社会保险)<br>phased retirement (08-12 阶段性退休)<br>be laid off (解雇 09-12考点)­<br>hotel consultant (08-6 酒店咨询)<br>sales manager(08-12 销售经理)­<br>　　Administrative work (08-12 行政工作)­<br>　　promotion(升职，09-6/12连续考到)­</p><p>4.抱怨的作业：<br>　　1)paper a.论文 b.=newspaper 报纸 c. document文件 d.纸张<br>　　写论文的步骤：<br>　　a. choose a topic选题<br>　　area: The area is too board for me. 题目的范围太广了<br>　　narrow the topic down 把题目范围缩小<br>　　b. do some research 做调查 (去图书馆library 做调查)<br>　　c. type it out打印<br>　　typewriter打字机，computer, lap top手提电脑， printer打印机， laser printer激光打印机， ribbon色带<br>　　2) presentation口头演讲——oral form = speech = report = address<br>　　a.时间性 20分钟，一般演讲18-19分钟，留下几分钟时间别人发问<br>　　b.正式着装——formal clothes<br>　　change(穿的衣服不合适就要换)<br>　　You can’t go like that. You need a change.你这样穿不行，要换一套衣服。<br>　　c.内心感受——nervous (演讲前心里很害怕)<br>　　3) Reading assignment / list 阅读作业/清单<br>　　Do you think the reading list is enormous? 你觉不觉要读的书太多了?<br>　　4) Research<br>　　Financial Aid经济资助<br>　　a. Tuition wavier学费减免<br>　　b. RA——Researching Assistant助研<br>　　TA——Teaching Assistant 助教<br>　　Fellowship奖学金<br>5.缺课<br>　　缺课原因：<br>　　1) get ill 由于生病而缺课<br>　　2) oversleep睡过头了<br>　　3)traffic jam交通堵塞/ (car)break down车抛锚</p><p>.考试<br>middle exam 期中考试<br>　　make up 补考<br>　　test测验<br>　　pop test 事先没有说好的测验<br>　　quiz 测验<br>　　oral test 口试<br>be through with结束，完成<br>release发布（分数）</p><p>　　考试临近<br>　　draw on 、 in sight of 、 draw nearly<br>　　<br>考试延期或取消<br>　 defer / hold up / postpone / put off / suspend</p><p>酒店、宾馆与约会　　</p><p> make a reservation 预订房间<br>　　confirm a reservation 确认预订<br>　　cancel a reservation 取消预订<br>　　fully booked / full up / full 客满<br>　　porter 行旅员<br>　　reception 前台<br>　　check in 登记入住<br>　　single room 单人房<br>　　suite 套房<br>　　room service 客房服务 (四级听力中的客房服务一般只有考一种——送餐)<br>　　lobby 大堂<br>salon 美容厅<br>　　night club 夜总会<br>　　check out 退房<br>　　饭店<br>    hotel clerk (07年6月词汇，等于receptionist)<br>eat out 出去吃<br>　　take away 外带<br>appetizer 开胃菜<br>　　main course 主食<br>　　dessert 餐后甜点<br>　　keep the change 不用找零了<br>move on to继续<br>　　the next item下一议题个<br>    come in one’s place代表某人来<br>on behalf of代表</p><p>罚款 fine<br>　　校内：library里面，书过期<br>　　校外： break the traffic rules违反交通规则，go speeding超速<br>　　各种费用：<br>　　fare交通费(车费，船费)， fee杂费， tuition学费， tuition and fee学杂费，rent 房租， utilities水电费，rate 按比例收取的费用， post rate=postage邮资</p><p>1．交通<br>　　常考思路：<br>　　1) 交通堵塞 traffic jam<br>　　back up: a.作业堆积如山 b. 车辆很多 c. back somebody up支持某人<br>　　2) 交通违章——&gt;fine罚款<br>　　break the traffic rule违反交通规则, go speeding超速<br>　　3) 晚点 behind schedule<br>　　parking lot停车场 　　　　maintain保养<br>    break down抛锚 　　　　　garage修车场<br>    scratches刮蹭 　　　　　　highway高速公路<br>    single lane单行道 　　　　 No-parking sign禁止停车标志<br>   sleeper卧铺 　　　be supposed to应该</p><p>打电话<br>　　常考思路：<br>　　1) 约人约不到<br>　　2) 约会去不了<br>　　sth comes up/ I’d like to reschedule/ Could you fit me in (the doctor’s schedule)?<br>　　3) 电话打不通(包括打错电话)<br>　　线索词：<br>　　run out of coins(在公共电话亭里)没钱了<br>   cut off被迫断线，hang up主动挂断电话，<br>   receiver听筒，slot 电话上的小投币口　</p><p>   九、医院<br>　　常考思路：<br>　　1) 医生难找<br>　　2) 病情如何(getting better/worse)<br>　　3) 有病耽误课miss the class<br>　　线索词：<br>　　treat治疗(表过程)， cure治疗,治愈(表结果)<br>　　infirmary / students’ help center学校的医院<br>prescribe开药方，prescription处方<br>　　Send him to Ward Three. 把他送去3号病房。 Send him toward three.把他送到东方去。(因为时钟三点指向东(上北下南左西右东) )<br>　　fill the prescription按方抓药， refill the prescription继续按方抓药，<br>dizzy头晕<br>    a fever发烧<br>    have the ankle twisted扭到脚踝<br>    blood vessel血管</p><p>(四)买东西<br>　　<br>1．采购衣服<br>size型号 　　　come in all sizes号全<br>2．采购电器<br>model款<br>latest technology最新的科技 </p><ol start="3"><li>1) supermarket超级市场: supplies生活用品，price tag价格签，<br>special offer/ on sale打折，cart手推车，vender售货员，cashier收银员<br>2)  appliance家用电器, costume服装, floor 层,<br>men’s 男装区,<br>for sale 热卖中,待售中,<br>70% off 三折, </li></ol><p>十一、 阅读与写作　<br>intensively精细地<br>reading assignment阅读任务 　　　　selectively有选择地<br>chapter by chapter一章一章地 　　　theory理论<br>read through从头到尾地读 　　　　　cover a few chapters涉及了几个章节<br>revise修订<br>quality paper好纸 　　　　　       get it published出版<br>proofread[pru:fri:d]校对 　　</p><p>十二、.求职与工作　　<br>常考思路:<br>　　1) 找到工作高兴<br>　　2) 失去工作伤心 a.被解雇 b.离开旧工作<br>　　3) 拒绝工作令人感到奇怪<br>　　线索词<br>　　找工作的过程:<br>　　1) 信息<br>　　a. classified ads分类广告<br>　　help and wanted section供求关系栏<br>　　b. bulletin board公告栏<br>　　c. flyer传单<br>　　2) make a phone call<br>　　Is the position still available? 工作职位还仍然空缺吗?<br>　　3) resume个人简历<br>　　certification 学历证, ID身份证,<br>qualification资历,<br>　　recommendation letter推荐信<br>　　fill out= fill in = fill up填表格</p><p>interview面试<br>　　 interview　面试　　　　　　finance金融<br>    suit西装 　　　　　　　　 accounting会计<br>    tie领带 　　　　　　　　　brush up on温习，复习<br>    travel出差                annual vacation年假<br>job vacancy 有空缺职位<br>　　academic background 教育背景<br>　　offer 聘用信<br>　　ask for a raise 加钱<br>　　salary 日薪<br>　　bonus奖金<br>　　allowance 津贴<br>　　promotion 升职　　</p><p>十三. 租房子<br>　　常考思路<br>　　live on campus 住校<br>　　live off campus 住校外<br>　　for sale 可销售的房子<br>　　for rent / lease 可出租的房子<br>　　to let 同上<br>　　utilities 公用事业费<br>　　suburb / downtown 市郊 / 市中心<br>　　leaking 漏水<br>　　blackout 断电<br>　　transportation 交通<br>　　land lord 房东<br>　　land lady 房东太太<br>　　tenant 房客<br>　　roommate 室友<br>　　好的室友：neat 整洁的 considerate 体贴的，细心的<br>　　不好的室友：messy / untidy 脏乱的 noisy 吵闹的<br>　　apartment 公寓<br>　　dorm/dormitory 寝室<br>    for rent房子出租，rest-room厕所　</p><p>十四、 理发<br>　　线索词<br>　　cut大剪，trim小修剪，bang男生刘海儿，fringe女生刘海儿，parting分头(I want parting to the left.我想要左分头。)<br>　　plait 辫子　　</p><p>十五、医院场景<br>　　send for a doctor 让医生出诊<br>　　health center / clinic 卫生所 / 门诊部<br>　　physician 内科医生<br>　　surgeon 外科医生<br>　　make an appointment 预约<br>　　liquid 喝药水<br>　　injection =&gt; shot 注射<br>　　medical result 诊断结果</p><p>8.宾馆和约会场景<br>　　　　<br>　十六、邮局场景<br>　　rate 费率<br>　　overweight 超重<br>　　postage 邮资<br>　　forward the mail to把邮件转发给<br>　　cc(carbon copy) 抄送<br>　　bcc(blind carbon copy)秘密抄送<br>　　attach 附件</p><p>   log in登录</p><p>   log off登出<br>　　<br>十七、其他场景<br>　　be mad with对某人生气<br>　　干杯cheers<br>    the last man 最不愿意见的人<br>　　sell off 低价处理库存商品<br>　　selling machine 自动售货机<br>　　count for little 无足轻重<br>　　count for much 举足轻重<br>　　count down 倒计时<br>　　count up 相加<br>健忘 forgetful, absent-minded, slip one’s mind</p><p>　　count up to 共计</p><p>短对话考前嘱咐<br>　　1. 学习——基于学生的角度，一定是抱怨学习<br>　　2. 生活——poor,很穷。<br>　　Student ID 学生证 用于discount 打折， bargain 讨价还价<br>　　3. 学习vs 生活——忙，忙于学习</p><p>长对话十大类标志词<br>　　据研究有90%以上的考点都是由标志词引导活提示的，因此在语段听力中听到下列标志词时要引起高度的重视，集中注意力听清标志词前后的句子。<br>　　1.最高级标志词<br>　　形容词、副词最高级、most / chief / primary / main / leading / ……<br>　　2.唯一级标志輯div&gt; 　　only / unique / prefer / every / one / of all / perfect / ……<br>　　3.因果项标志词<br>　　cause / lead to / contribute to / thanks to / owing to / question / answer / why / reason / 其他形式的问句 / ……<br>　　4.转则项关键词<br>　　despite / in spite of / instead / while / from ~ to ~ / although ~ (yet)~ / not only ~ but also ~ / ……<br>　　5.序数项标志词<br>　　所有的序数词(first , second)/ another / the other / next / last / in addition / on the other hand / ……<br>　　6.时间项标志词<br>　　when / how / today / as / before / after / since / then / until / ……<br>　　7.解释项标志词<br>　　or / namely / in other words / that is / that is to say / ……<br>　　8.目的项标志词<br>　　to / for / ……<br>　　9.总结项标志词<br>　　all in all / in brief / to conclude / at last / in summary / in short / ……<br>　　10.强调项标志词<br>　　副词：especially / particularly / almost / always / usually / ……<br>　　动词：show / remember / note / notice / say / pronounce / ……</p><p>ok</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="英语" scheme="https://huangguangda.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="英语" scheme="https://huangguangda.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Android面试常考题目</title>
    <link href="https://huangguangda.github.io/2018/05/12/1/"/>
    <id>https://huangguangda.github.io/2018/05/12/1/</id>
    <published>2018-05-12T04:04:50.000Z</published>
    <updated>2018-06-22T05:24:53.056Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>来源网络资料</p><p>1、 Android的四大组件是哪些，它们的作用？</p><p>答：</p><p>Activity：Activity是Android程序与用户交互的窗口，是Android构造块中最基本的一种，它需要为保持各界面的状态，做很多持久化的事情，妥善管理生命周期以及一些跳转逻辑，Activity：不可见，只是一种容器，view组件（UI控件，容器控件的基类）用来显示可以看到的东西。</p><p>service：后台服务于Activity，封装有一个完整的功能逻辑实现，接受上层指令，完成相关的事物，定义好需要接受的Intent提供同步和异步的接口</p><p>Content Provider：是Android提供的第三方应用数据的访问方案，可以派生Content Provider类，对外提供数据，可以像数据库一样进行选择排序，屏蔽内部数据的存储细节，向外提供统一的接口模型，大大简化上层应用，对数据的整合提供了更方便的途径</p><p>BroadCast Receiver：接受一种或者多种Intent作触发事件，接受相关消息，做一些简单处理，转换成一条Notification，统一了Android的事件广播模型</p><p>2、 请介绍下Android中常用的五种布局。</p><p>常用五种布局方式，<br>分别是：<br>FrameLayout（框架布局），<br>LinearLayout （线性布局），<br>AbsoluteLayout（绝对布局），<br>RelativeLayout（相对布局），<br>TableLayout（表格布局）。</p><p>一、FrameLayout：所有东西依次都放在左上角，会重叠，这个布局比较简单，也只能放一点比较简单的东西。</p><p>二、LinearLayout：线性布局，<br>每一个LinearLayout里面又可分为垂直布局（android:orientation=”vertical”）和水平布局（android:orientation=”horizontal” ）。</p><p>当垂直布局时，每一行就只有一个元素，多个元素依次垂直往下；水平布局时，只有一行，每一个元素依次向右排列。</p><p>三、AbsoluteLayout：绝对布局用X,Y坐标来指定元素的位置，</p><p>这种布局方式也比较简单，但是在屏幕旋转时，往往会出问题，而且多个元素的时候，计算比较麻烦。</p><p>四、RelativeLayout：相对布局可以理解为某一个元素为参照物，来定位的布局方式。</p><p>主要属性有：<br>相对于某一个元素<br>android:layout_below、 android:layout_toLeftOf<br>相对于父元素的地方<br>android:layout_alignParentLeft、android:layout_alignParentRigh；</p><p>五、TableLayout：表格布局，<br>每一个TableLayout里面有表格行TableRow，<br>TableRow里面可以具体定义每一个元素。<br>每一个布局都有自己适合的方式，这五个布局元素可以相互嵌套应用，做出美观的界面。</p><p>3、 android中的动画有哪几类，它们的特点和区别是什么</p><p>答：两种，一种是Tween动画、还有一种是Frame动画。Tween动画，这种实现方式可以使视图组件移动、放大、缩小以及产生透明度的变化;另一种Frame动画，传统的动画方法，通过顺序的播放排列好的图片来实现，类似电影。</p><p>4、 android 中有哪几种解析xml的类？官方推荐哪种？以及它们的原理和区别。</p><p>答：XML解析主要有三种方式，SAX、DOM、PULL。常规在PC上开发我们使用Dom相对轻松些，但一些性能敏感的数据库或手机上还是主要采用SAX方式，SAX读取是单向的，优点:不占内存空间、解析属性方便，但缺点就是对于套嵌多个分支来说处理不是很方便。而DOM方式会把整个XML文件加载到内存中去，这里Android开发网提醒大家该方法在查找方面可以和XPath很好的结合如果数据量不是很大推荐使用，而PULL常常用在J2ME对于节点处理比较好，类似SAX方式，同样很节省内存，在J2ME中我们经常使用的KXML库来解析。</p><p>5、 ListView的优化方案</p><p>答：</p><p>1、如果自定义适配器，那么在getView方法中要考虑方法传进来的参数contentView是否为null，如果为null就创建contentView并返回，如果不为null则直接使用。在这个方法中尽可能少创建view。</p><p>2、给contentView设置tag（setTag（）），传入一个viewHolder对象，用于缓存要显示的数据，可以达到图像数据异步加载的效果。</p><p>3、如果listview需要显示的item很多，就要考虑分页加载。比如一共要显示100条或者更多的时候，我们可以考虑先加载20条，等用户拉到列表底部的时候再去加载接下来的20条。</p><p>6、 请介绍下Android的数据存储方式。</p><p>答：</p><p>使用SharedPreferences存储数据；文件存储数据；SQLite数据库存储数据；使用ContentProvider存储数据；网络存储数据；</p><p>Preference，File， DataBase这三种方式分别对应的目录是/data/data/Package Name/Shared_Pref, /data/data/Package Name/files, /data/data/Package Name/database 。</p><p>一：使用SharedPreferences存储数据</p><p>首先说明SharedPreferences存储方式，它是 Android提供的用来存储一些简单配置信息的一种机制，</p><p>例如：登录用户的用户名与密码。</p><p>其采用了Map数据结构来存储数据，以键值的方式存储，可以简单的读取与写入，具体实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void ReadSharedPreferences()&#123;</span><br><span class="line"></span><br><span class="line">String strName,strPassword;</span><br><span class="line"></span><br><span class="line">SharedPreferences user = getSharedPreferences(“user_info”,0);</span><br><span class="line"></span><br><span class="line">strName = user.getString(“NAME”,””);</span><br><span class="line">strPassword = user getString(“PASSWORD”,””);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void WriteSharedPreferences(String strName,String strPassword)&#123;</span><br><span class="line"></span><br><span class="line">SharedPreferences user = getSharedPreferences(“user_info”,0);</span><br><span class="line"></span><br><span class="line">uer.edit();</span><br><span class="line">user.putString(“NAME”, strName);</span><br><span class="line">user.putString(“PASSWORD” ,strPassword);</span><br><span class="line">user.commit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据读取与写入的方法都非常简单，只是在写入的时候有些区别：先调用edit()使其处于编辑状态，然后才能修改数据，最后使用commit()提交修改的数据。</p><p>实际上SharedPreferences是采用了XML格式将数据存储到设备中，在DDMS中的File Explorer中的/data/data//shares_prefs下。</p><p>使用SharedPreferences是有些限制的：只能在同一个包内使用，不能在不同的包之间使用。</p><p>二：文件存储数据</p><p>文件存储方式是一种较常用的方法，在Android中读取/写入文件的方法，与 Java中实现I/O的程序是完全一样的，提供了openFileInput()和openFileOutput()方法来读取设备上的文件。具体实例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String fn = “moandroid.log”;</span><br><span class="line">FileInputStream fis = openFileInput(fn);</span><br><span class="line">FileOutputStream fos = openFileOutput(fn,Context.MODE_PRIVATE);</span><br></pre></td></tr></table></figure><p>三：网络存储数据</p><p>网络存储方式，需要与Android 网络数据包打交道，关于Android 网络数据包的详细说明，请阅读Android SDK引用了Java SDK的哪些package？。</p><p>四：ContentProvider</p><p>1、ContentProvider简介</p><p>当应用继承ContentProvider类，并重写该类用于提供数据和存储数据的方法，就可以向其他应用共享其数据。虽然使用其他方法也可以对外共享数据，但数据访问方式会因数据存储的方式而不同，如：采用文件方式对外共享数据，需要进行文件操作读写数据；采用sharedpreferences共享数据，需要使用sharedpreferences API读写数据。而使用ContentProvider共享数据的好处是统一了数据访问方式。</p><p>2、Uri类简介</p><p>Uri代表了要操作的数据，Uri主要包含了两部分信息：</p><p>1.需要操作的ContentProvider ，<br>2.对ContentProvider中的什么数据进行操作，一个Uri由以下几部分组成：</p><p>1.scheme：ContentProvider（内容提供者）的scheme已经由Android所规定为：content://…<br>2.主机名（或Authority）：用于唯一标识这个ContentProvider，外部调用者可以根据这个标识来找到它。</p><p>3.路径（path）：可以用来表示我们要操作的数据，路径的构建应根据业务而定，如下：<br>要操作contact表中id为10的记录，可以构建这样的路径:/contact/10<br>要操作contact表中id为10的记录的name字段， contact/10/name<br>要操作contact表中的所有记录，可以构建这样的路径:/contact?<br>要操作的数据不一定来自数据库，也可以是文件等他存储方式，如下:<br>要操作xml文件中contact节点下的name节点，可以构建这样的路径：/contact/name<br>如果要把一个字符串转换成Uri，可以使用Uri类中的parse()方法，如下：<br>Uri uri = Uri.parse(“content://com.changcheng.provider.contactprovider/contact”)</p><p>3、UriMatcher、ContentUrist和ContentResolver简介</p><p>因为Uri代表了要操作的数据，所以我们很经常需要解析Uri，并从 Uri中获取数据。Android系统提供了两个用于操作Uri的工具类，分别为UriMatcher 和ContentUris 。掌握它们的使用，会便于我们的开发工作。</p><p>UriMatcher：用于匹配Uri，它的用法如下：</p><p>1.首先把你需要匹配Uri路径全部给注册上，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码(-1)。</span><br><span class="line">UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);</span><br><span class="line">//如果match()方法匹配content://com.changcheng.sqlite.provider.contactprovider /contact路径，返回匹配码为1</span><br><span class="line">uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact”, 1);//添加需要匹配uri，如果匹配就会返回匹配码</span><br><span class="line">//如果match()方法匹配 content://com.changcheng.sqlite.provider.contactprovider/contact/230路径，返回匹配码为2</span><br><span class="line">uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact/#”, 2);//#号为通配符</span><br></pre></td></tr></table></figure><p>2.注册完需要匹配的Uri后，就可以使用uriMatcher.match(uri)</p><p>方法对输入的Uri进行匹配，如果匹配就返回匹配码，匹配码是调用 addURI()方法传入的第三个参数，假设匹配 content://com.changcheng.sqlite.provider.contactprovider/contact路径，返回的匹配码为1。<br>ContentUris：用于获取Uri路径后面的ID部分，它有两个比较实用的方法：<br>withAppendedId(uri, id)用于为路径加上ID部分<br>parseId(uri)方法用于从路径中获取ID部分<br>ContentResolver：当外部应用需要对ContentProvider中的数据进行添加、删除、修改和查询操作时，可以使用 ContentResolver 类来完成，要获取ContentResolver 对象，可以使用Activity提供的getContentResolver()方法。 ContentResolver使用insert、delete、update、query方法，来操作数据。</p><p>7、 activity的启动模式有哪些？是什么含义？</p><p>答：</p><p>在android里，有4种activity的启动模式，分别为：</p><p>“standard” (默认)<br>“singleTop”<br>“singleTask”<br>“singleInstance”</p><p>它们主要有如下不同：</p><ol><li><p>如何决定所属task<br>“standard”和”singleTop”的activity的目标task，和收到的Intent的发送者在同一个task内，除非intent包括参数FLAG_ACTIVITY_NEW_TASK。<br>如果提供了FLAG_ACTIVITY_NEW_TASK参数，会启动到别的task里。<br>“singleTask”和”singleInstance”总是把activity作为一个task的根元素，他们不会被启动到一个其他task里。</p></li><li><p>是否允许多个实例<br>“standard”和”singleTop”可以被实例化多次，并且存在于不同的task中，且一个task可以包括一个activity的多个实例；<br>“singleTask”和”singleInstance”则限制只生成一个实例，并且是task的根元素。 singleTop要求如果创建intent的时候栈顶已经有要创建 的Activity的实例，则将intent发送给该实例，而不发送给新的实例。</p></li><li><p>是否允许其它activity存在于本task内<br>“singleInstance”独占一个task，其它activity不能存在那个task里；如果它启动了一个新的activity，不管新的activity的launch mode 如何，新的activity都将会到别的task里运行（如同加了FLAG_ACTIVITY_NEW_TASK参数）。<br>而另外三种模式，则可以和其它activity共存。</p></li><li><p>是否每次都生成新实例<br>“standard”对于没一个启动Intent都会生成一个activity的新实例；<br>“singleTop”的activity如果在task的栈顶的话，则不生成新的该activity的实例，直接使用栈顶的实例，否则，生成该activity的实例。</p></li></ol><p>比如现在task栈元素为A-B-C-D（D在栈顶），这时候给D发一个启动intent，如果D是 “standard”的，则生成D的一个新实例，栈变为A－B－C－D－D。<br>如果D是singleTop的话，则不会生产D的新实例，栈状态仍为A-B-C-D<br>如果这时候给B发Intent的话，不管B的launchmode是”standard” 还是 “singleTop” ，都会生成B的新实例，栈状态变为A-B-C-D-B。<br>“singleInstance”是其所在栈的唯一activity，它会每次都被重用。<br>“singleTask”如果在栈顶，则接受intent，否则，该intent会被丢弃，但是该task仍会回到前台。</p><p>当已经存在的activity实例处理新的intent时候，会调用onNewIntent()方法 如果收到intent生成一个activity实例，那么用户可以通过back键回到上一个状态；如果是已经存在的一个activity来处理这个intent的话，用户不能通过按back键返回到这之前的状态。</p><p>8、 跟activity和Task 有关的 Intent启动方式有哪些？其含义？</p><p>核心的Intent Flag有：<br>FLAG_ACTIVITY_NEW_TASK<br>FLAG_ACTIVITY_CLEAR_TOP<br>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED<br>FLAG_ACTIVITY_SINGLE_TOP<br>FLAG_ACTIVITY_NEW_TASK</p><p>如果设置，这个Activity会成为历史stack中一个新Task的开始。一个Task（从启动它的Activity到下一个Task中的 Activity）定义了用户可以迁移的Activity原子组。Task可以移动到前台和后台；在某个特定Task中的所有Activity总是保持相同的次序。<br>这个标志一般用于呈现“启动”类型的行为：它们提供用户一系列可以单独完成的事情，与启动它们的Activity完全无关。</p><p>使用这个标志，如果正在启动的Activity的Task已经在运行的话，那么，新的Activity将不会启动；代替的，当前Task会简单的移入前台。参考FLAG_ACTIVITY_MULTIPLE_TASK标志，可以禁用这一行为。</p><p>这个标志不能用于调用方对已经启动的Activity请求结果。</p><p>FLAG_ACTIVITY_CLEAR_TOP</p><p>如果设置，并且这个Activity已经在当前的Task中运行，因此，不再是重新启动一个这个Activity的实例，而是在这个Activity上方的所有Activity都将关闭，然后这个Intent会作为一个新的Intent投递到老的Activity（现在位于顶端）中。</p><p>例如，假设一个Task中包含这些Activity：A，B，C，D。如果D调用了startActivity()，并且包含一个指向Activity B的Intent，那么，C和D都将结束，然后B接收到这个Intent，因此，目前stack的状况是：A，B。<br>上例中正在运行的Activity B既可以在onNewIntent()中接收到这个新的Intent，也可以把自己关闭然后重新启动来接收这个Intent。</p><p>如果它的启动模式声明为 “multiple”(默认值)，并且你没有在这个Intent中设置FLAG_ACTIVITY_SINGLE_TOP标志，那么它将关闭然后重新创建；对于其它的启动模式，或者在这个Intent中设置FLAG_ACTIVITY_SINGLE_TOP标志，都将把这个Intent投递到当前这个实例的onNewIntent()中。<br>这个启动模式还可以与FLAG_ACTIVITY_NEW_TASK结合起来使用：用于启动一个Task中的根Activity，它会把那个Task中任何运行的实例带入前台，然后清除它直到根Activity。这非常有用，例如，当从Notification Manager处启动一个Activity。</p><p>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED</p><p>如果设置这个标志，这个activity不管是从一个新的栈启动还是从已有栈推到栈顶，它都将以the front door of the task的方式启动。这就讲导致任何与应用相关的栈都讲重置到正常状态（不管是正在讲activity移入还是移除），如果需要，或者直接重置该栈为初始状态。</p><p>FLAG_ACTIVITY_SINGLE_TOP</p><p>如果设置，当这个Activity位于历史stack的顶端运行时，不再启动一个新的<br>FLAG_ACTIVITY_BROUGHT_TO_FRONT<br>这个标志一般不是由程序代码设置的，如在launchMode中设置singleTask模式时系统帮你设定。</p><p>FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET</p><p>如果设置，这将在Task的Activity stack中设置一个还原点，当Task恢复时，需要清理Activity。也就是说，下一次Task带着 FLAG_ACTIVITY_RESET_TASK_IF_NEEDED标记进入前台时（典型的操作是用户在主画面重启它），这个Activity和它之上的都将关闭，以至于用户不能再返回到它们，但是可以回到之前的Activity。</p><p>这在你的程序有分割点的时候很有用。</p><p>例如，一个e-mail应用程序可能有一个操作是查看一个附件，需要启动图片浏览Activity来显示。这个 Activity应该作为e-mail应用程序Task的一部分，因为这是用户在这个Task中触发的操作。然而，当用户离开这个Task，然后从主画面选择e-mail app，我们可能希望回到查看的会话中，但不是查看图片附件，因为这让人困惑。通过在启动图片浏览时设定这个标志，浏览及其它启动的Activity在下次用户返回到mail程序时都将全部清除。</p><p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</p><p>如果设置，新的Activity不会在最近启动的Activity的列表中保存。</p><p>FLAG_ACTIVITY_FORWARD_RESULT</p><p>如果设置，并且这个Intent用于从一个存在的Activity启动一个新的Activity，那么，这个作为答复目标的Activity将会传到这个新的Activity中。这种方式下，新的Activity可以调用setResult(int)，并且这个结果值将发送给那个作为答复目标的 Activity。</p><p>FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY</p><p>这个标志一般不由应用程序代码设置，如果这个Activity是从历史记录里启动的（常按HOME键），那么，系统会帮你设定。</p><p>FLAG_ACTIVITY_MULTIPLE_TASK</p><p>不要使用这个标志，除非你自己实现了应用程序启动器。与FLAG_ACTIVITY_NEW_TASK结合起来使用，可以禁用把已存的Task送入前台的行为。当设置时，新的Task总是会启动来处理Intent，而不管这是是否已经有一个Task可以处理相同的事情。</p><p>由于默认的系统不包含图形Task管理功能，因此，你不应该使用这个标志，除非你提供给用户一种方式可以返回到已经启动的Task。</p><p>如果FLAG_ACTIVITY_NEW_TASK标志没有设置，这个标志被忽略。</p><p>FLAG_ACTIVITY_NO_ANIMATION</p><p>如果在Intent中设置，并传递给Context.startActivity()的话，这个标志将阻止系统进入下一个Activity时应用 Acitivity迁移动画。这并不意味着动画将永不运行——如果另一个Activity在启动显示之前，没有指定这个标志，那么，动画将被应用。这个标志可以很好的用于执行一连串的操作，而动画被看作是更高一级的事件的驱动。</p><p>FLAG_ACTIVITY_NO_HISTORY</p><p>如果设置，新的Activity将不再历史stack中保留。用户一离开它，这个Activity就关闭了。这也可以通过设置noHistory特性。</p><p>FLAG_ACTIVITY_NO_USER_ACTION</p><p>如果设置，作为新启动的Activity进入前台时，这个标志将在Activity暂停之前阻止从最前方的Activity回调的onUserLeaveHint()。</p><p>典型的，一个Activity可以依赖这个回调指明显式的用户动作引起的Activity移出后台。这个回调在Activity的生命周期中标记一个合适的点，并关闭一些Notification。</p><p>如果一个Activity通过非用户驱动的事件，如来电或闹钟，启动的，这个标志也应该传递给Context.startActivity，保证暂停的Activity不认为用户已经知晓其Notification。</p><p>FLAG_ACTIVITY_PREVIOUS_IS_TOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If set and this intent is being used to launch a new activity from an existing one, the current activity will not be counted as the top activity for deciding whether the new intent should be delivered to the top instead of starting a new one. The previous activity will be used as the top, with the assumption being that the current activity will finish itself immediately.</span><br></pre></td></tr></table></figure><p>FLAG_ACTIVITY_REORDER_TO_FRONT</p><p>如果在Intent中设置，并传递给Context.startActivity()，这个标志将引发已经运行的Activity移动到历史stack的顶端。</p><p>例如，假设一个Task由四个Activity组成：A,B,C,D。</p><p>如果D调用startActivity()来启动Activity B，那么，B会移动到历史stack的顶端，现在的次序变成A,C,D,B。如果FLAG_ACTIVITY_CLEAR_TOP标志也设置的话，那么这个标志将被忽略。</p><p>9、 请描述下Activity的生命周期。</p><p>答：activity的生命周期方法有：onCreate()、onStart()、onReStart()、onResume()、onPause()、onStop()、onDestory()；</p><p>可见生命周期：从onStart()直到系统调用onStop()<br>前台生命周期：从onResume()直到系统调用onPause()</p><p>10、 activity在屏幕旋转时的生命周期</p><p>答：</p><p>不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次；设置Activity的android:configChanges=”orientation”时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次；设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p><p>11、 如何启用Service，如何停用Service。</p><p>服务的开发比较简单，如下：</p><p>第一步：继承Service类<br>public class SMSService extends Service {}</p><p>第二步：在AndroidManifest.xml文件中的节点里对服务进行配置:<br>服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。使用startService()方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。</p><p>如果打算采用Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p><p>如果打算采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。</p><p>如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法。</p><p>服务常用生命周期回调方法如下：</p><p>onCreate() 该方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次startService()或bindService()方法，服务也只被创建一次。</p><p>onDestroy()该方法在服务被终止时调用。</p><p>与采用Context.startService()方法启动服务有关的生命周期方法<br>onStart() 只有采用Context.startService()方法启动服务时才会回调该方法。该方法在服务开始运行时被调用。</p><p>多次调用startService()方法尽管不会多次创建服务，但onStart() 方法会被多次调用。</p><p>与采用Context.bindService()方法启动服务有关的生命周期方法<br>onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。</p><p>onUnbind()只有采用Context.bindService()方法启动服务时才会回调该方法。</p><p>该方法在调用者与服务解除绑定时被调用</p><p>12、 注册广播有几种方式，这些方式有何优缺点？请谈谈Android引入广播机制的用意。</p><p>答：首先写一个类要继承BroadcastReceiver</p><p>第一种:在清单文件中声明,添加</p><p>第二种使用代码进行注册如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter = new IntentFilter(&quot;android.provider.Telephony.SMS_RECEIVED&quot;);</span><br><span class="line">IncomingSMSReceiver receiver = new IncomgSMSReceiver();</span><br><span class="line">registerReceiver(receiver.filter);</span><br></pre></td></tr></table></figure><p>两种注册类型的区别是：</p><p>1)第一种不是常驻型广播，也就是说广播跟随程序的生命周期。<br>2)第二种是常驻型，也就是说当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行。</p><p>13、 请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系。</p><p>答：</p><p>简单的说，Handler获取当前线程中的looper对象，looper用来从存放Message的MessageQueue中取出Message，再有Handler进行Message的分发和处理.</p><p>Message Queue(消息队列)：用来存放通过Handler发布的消息，通常附属于某一个创建它的线程，可以通过Looper.myQueue()得到当前线程的消息队列</p><p>Handler：可以发布或者处理一个消息或者操作一个Runnable，通过Handler发布消息，消息将只会发送到与它关联的消息队列，然也只能处理该消息队列中的消息</p><p>Looper：是Handler和消息队列之间通讯桥梁，程序组件首先通过Handler把消息传递给Looper，Looper把消息放入队列。Looper也把消息队列里的消息广播给所有的</p><p>Handler：Handler接受到消息后调用handleMessage进行处理</p><p>Message：消息的类型，在Handler类中的handleMessage方法中得到单个的消息进行处理<br>在单线程模型下，为了线程通信问题，Android设计了一个Message Queue(消息队列)， 线程间可以通过该Message Queue并结合Handler和Looper组件进行信息交换。</p><p>下面将对它们进行分别介绍：</p><ol><li><p>Message<br>Message消息，理解为线程间交流的信息，处理数据后台线程需要更新UI，则发送Message内含一些数据给UI线程。</p></li><li><p>Handler<br>Handler处理者，是Message的主要处理者，负责Message的发送，Message内容的执行处理。后台线程就是通过传进来的 Handler对象引用来sendMessage(Message)。而使用Handler，需要implement 该类的 handleMessage(Message)方法，它是处理这些Message的操作内容，例如Update UI。通常需要子类化Handler来实现handleMessage方法。</p></li><li><p>Message Queue<br>Message Queue消息队列，用来存放通过Handler发布的消息，按照先进先出执行。<br>每个message queue都会有一个对应的Handler。Handler会向message queue通过两种方法发送消息：sendMessage或post。这两种消息都会插在message queue队尾并按先进先出执行。但通过这两种方法发送的消息执行的方式略有不同：通过sendMessage发送的是一个message对象,会被 Handler的handleMessage()函数处理；而通过post方法发送的是一个runnable对象，则会自己执行。</p></li><li><p>Looper<br>Looper是每条线程里的Message Queue的管家。Android没有Global的Message Queue，而Android会自动替主线程(UI线程)建立Message Queue，但在子线程里并没有建立Message Queue。所以调用Looper.getMainLooper()得到的主线程的Looper不为NULL，但调用Looper.myLooper() 得到当前线程的Looper就有可能为NULL。</p></li></ol><p>对于子线程使用Looper，API Doc提供了正确的使用方法：这个Message机制的大概流程：</p><ol><li><p>在Looper.loop()方法运行开始后，循环地按照接收顺序取出Message Queue里面的非NULL的Message。</p></li><li><p>一开始Message Queue里面的Message都是NULL的。当Handler.sendMessage(Message)到Message Queue，该函数里面设置了那个Message对象的target属性是当前的Handler对象。</p></li></ol><p>随后Looper取出了那个Message，则调用 该Message的target指向的Hander的dispatchMessage函数对Message进行处理。</p><p>在dispatchMessage方法里，如何处理Message则由用户指定，三个判断，优先级从高到低：</p><p>1) Message里面的Callback，一个实现了Runnable接口的对象，其中run函数做处理工作；<br>2) Handler里面的mCallback指向的一个实现了Callback接口的对象，由其handleMessage进行处理；<br>3) 处理消息Handler对象对应的类继承并实现了其中handleMessage函数，通过这个实现的handleMessage函数处理消息。<br>由此可见，我们实现的handleMessage方法是优先级最低的！</p><ol start="3"><li><p>Handler处理完该Message (update UI) 后，Looper则设置该Message为NULL，以便回收！<br>在网上有很多文章讲述主线程和其他子线程如何交互，传送信息，最终谁来执行处理信息之类的，个人理解是最简单的方法——判断Handler对象里面的Looper对象是属于哪条线程的，则由该线程来执行！</p></li><li><p>当Handler对象的构造函数的参数为空，则为当前所在线程的Looper；</p></li><li><p>Looper.getMainLooper()得到的是主线程的Looper对象，Looper.myLooper()得到的是当前线程的Looper对象。</p></li></ol><p>14、 简要解释一下activity、 intent 、intent<br>filter、service、Broadcase、BroadcaseReceiver</p><p>答：</p><p>一个activity呈现了一个用户可以操作的可视化用户界面；一个service不包含可见的用户界面，而是在后台运行，可以与一个activity绑定，通过绑定暴露出来接口并与其进行通信；一个broadcast receiver是一个接收广播消息并做出回应的component，broadcast receiver没有界面；一个intent是一个Intent对象，它保存了消息的内容。</p><p>对于activity和service来说，它指定了请求的操作名称和待操作数据的URI，Intent对象可以显式的指定一个目标component。如果这样的话，android会找到这个component(基于manifest文件中的声明)并激活它。</p><p>但如果一个目标不是显式指定的，android必须找到响应intent的最佳component。它是通过将Intent对象和目标的intent filter相比较来完成这一工作的；一个component的intent filter告诉android该component能处理的intent。</p><p>intent filter也是在manifest文件中声明的。</p><p>15、 说说mvc模式的原理，它在android中的运用,android的官方建议应用程序的开发采用mvc模式。何谓mvc？</p><p>mvc是model,view,controller的缩写，mvc包含三个部分：</p><p>　　模型（model）对象：是应用程序的主体部分，所有的业务逻辑都应该写在该层。</p><p>　　视图（view）对象：是应用程序中负责生成用户界面的部分。也是在整个mvc架构中用户唯一可以看到的一层，接收用户的输入，显示处理结果。</p><p>　　控制器（control）对象：是根据用户的输入，控制用户界面数据显示及更新model对象状态的部分，控制器更重要的一种导航功能，响应用户出发的相关事件，交给m层处理。</p><p>　　android鼓励弱耦合和组件的重用，在android中mvc的具体体现如下：</p><p>　　1)视图层（view）：一般采用xml文件进行界面的描述，使用的时候可以非常方便的引入，当然，如果你对android了解的比较的多了话，就一定可以想到在android中也可以使用javascript+html等的方式作为view层，当然这里需要进行java和javascript之间的通信，幸运的是，android提供了它们之间非常方便的通信实现。</p><p>　　2)控制层（controller）：android的控制层的重任通常落在了众多的acitvity的肩上，这句话也就暗含了不要在acitivity中写代码，要通过activity交割model业务逻辑层处理，这样做的另外一个原因是android中的acitivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉。</p><p>　　3)模型层（model）：对数据库的操作、对网络等的操作都应该在model里面处理，当然对业务计算等操作也是必须放在的该层的。</p><p>16、 什么是ANR 如何避免它？</p><p>答：</p><p>ANR：Application Not Responding。在Android中，活动管理器和窗口管理器这两个系统服务负责监视应用程序的响应，当用户操作的在5s内应用程序没能做出反应，BroadcastReceiver在10秒内没有执行完毕，就会出现应用程序无响应对话框，这既是ANR。</p><p>避免方法：Activity应该在它的关键生命周期方法（如onCreate()和onResume()）里尽可能少的去做创建操作。潜在的耗时操作，例如网络或数据库操作，或者高耗时的计算如改变位图尺寸，应该在子线程里（或者异步方式）来完成。主线程应该为子线程提供一个Handler，以便完成时能够提交给主线程。</p><p>17、 什么情况会导致Force Close ？如何避免？能否捕获导致其的异常？</p><p>答：程序出现异常，比如nullpointer。</p><p>避免：编写程序时逻辑连贯，思维缜密。能捕获异常，在logcat中能看到异常信息</p><p>18、 描述一下android的系统架构</p><p>android系统架构分从下往上为linux 内核层、运行库、应用程序框架层、和应用程序层。</p><p>linuxkernel：负责硬件的驱动程序、网络、电源、系统安全以及内存管理等功能。</p><p>libraries和 android runtime：libraries：即c/c++函数库部分，大多数都是开放源代码的函数库，例如webkit（引擎），该函数库负责 android网页浏览器的运行，例如标准的c函数库libc、openssl、sqlite等，当然也包括支持游戏开发2dsgl和 3dopengles，在多媒体方面有mediaframework框架来支持各种影音和图形文件的播放与显示，例如mpeg4、h.264、mp3、 aac、amr、jpg和png等众多的多媒体文件格式。android的runtime负责解释和执行生成的dalvik格式的字节码。</p><p>　　applicationframework（应用软件架构），java应用程序开发人员主要是使用该层封装好的api进行快速开发。</p><p>　　applications:该层是java的应用程序层，android内置的googlemaps、e-mail、即时通信工具、浏览器、mp3播放器等处于该层，java开发人员开发的程序也处于该层，而且和内置的应用程序具有平等的位置，可以调用内置的应用程序，也可以替换内置的应用程序。</p><p>　　上面的四个层次，下层为上层服务，上层需要下层的支持，调用下层的服务，这种严格分层的方式带来的极大的稳定性、灵活性和可扩展性，使得不同层的开发人员可以按照规范专心特定层的开发。</p><p>android应用程序使用框架的api并在框架下运行，这就带来了程序开发的高度一致性，另一方面也告诉我们，要想写出优质高效的程序就必须对整个 applicationframework进行非常深入的理解。精通applicationframework，你就可以真正的理解android的设计和运行机制，也就更能够驾驭整个应用层的开发。</p><p>19、 请介绍下ContentProvider是如何实现数据共享的。</p><p>一个程序可以通过实现一个Content provider的抽象接口将自己的数据完全暴露出去，而且Content providers是以类似数据库中表的方式将数据暴露。Content providers存储和检索数据，通过它可以让所有的应用程序访问到，这也是应用程序之间唯一共享数据的方法。</p><p>要想使应用程序的数据公开化，可通过2种方法：创建一个属于你自己的Content provider或者将你的数据添加到一个已经存在的Content provider中，前提是有相同数据类型并且有写入Content provider的权限。<br>如何通过一套标准及统一的接口获取其他应用程序暴露的数据？<br>Android提供了ContentResolver，外界的程序可以通过ContentResolver接口访问ContentProvider提供的数据。</p><p>20、 Service和Thread的区别？</p><p>答：</p><p>servie是系统的组件，它由系统进程托管（servicemanager）；它们之间的通信类似于client和server，是一种轻量级的ipc通信，这种通信的载体是binder，它是在linux层交换信息的一种ipc。而thread是由本应用程序托管。</p><p>1). Thread：Thread 是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。</p><p>2). Service：Service 是android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。</p><p>如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。</p><p>既然这样，那么我们为什么要用 Service 呢？</p><p>其实这跟 android 的系统机制有关，我们先拿 Thread 来说。Thread 的运行是独立于 Activity 的，也就是说当一个 Activity 被 finish 之后，如果你没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。因此这里会出现一个问题：当 Activity 被 finish 之后，你不再持有该 Thread 的引用。</p><p>另一方面，你没有办法在不同的 Activity 中对同一 Thread 进行控制。</p><p>举个例子：如果你的 Thread 需要不停地隔一段时间就要连接服务器做某种同步的话，该 Thread 需要在 Activity 没有start的时候也在运行。这个时候当你 start 一个 Activity 就没有办法在该 Activity 里面控制之前创建的 Thread。</p><p>因此你便需要创建并启动一个 Service ，在 Service 里面创建、运行并控制该 Thread，这样便解决了该问题（因为任何 Activity 都可以控制同一 Service，而系统也只会创建一个对应 Service 的实例）。</p><p>因此你可以把 Service 想象成一种消息服务，而你可以在任何有 Context 的地方调用 Context.startService、Context.stopService、Context.bindService，Context.unbindService，来控制它，你也可以在 Service 里注册 BroadcastReceiver，在其他地方通过发送 broadcast 来控制它，当然这些都是 Thread 做不到的。</p><p>21、 Android本身的api并未声明会抛出异常，则其在运行时有无可能抛出runtime异常，你遇到过吗？诺有的话会导致什么问题？如何解决？</p><p>答：</p><p>会，比如nullpointerException。我遇到过，比如textview.setText()时，textview没有初始化。会导致程序无法正常运行出现forceclose。打开控制台查看logcat信息找出异常信息并修改程序。</p><p>22、 IntentService有何优点?</p><p>答：</p><p>Acitivity的进程，当处理Intent的时候，会产生一个对应的Service； Android的进程处理器现在会尽可能的不kill掉你；非常容易使用</p><p>23、 </p><p>如果后台的Activity由于某原因被系统回收了，如何在被系统回收之前保存当前状态？</p><p>答：重写onSaveInstanceState()方法，在此方法中保存需要保存的数据，该方法将会在activity被回收之前调用。通过重写onRestoreInstanceState()方法可以从中提取保存好的数据</p><p>24、 如何将一个Activity设置成窗口的样式。</p><p>答：</p><p>中配置：android :theme=”@android:style/Theme.Dialog”<br>另外android:theme=”@android:style/Theme.Translucent” 是设置透明</p><p>25、 如何退出Activity？如何安全退出已调用多个Activity的Application？</p><p>答：</p><p>对于单一Activity的应用来说，退出很简单，直接finish()即可。当然，也可以用killProcess()和System.exit()这样的方法。</p><p>对于多个activity，</p><p>1、记录打开的Activity：每打开一个Activity，就记录下来。在需要退出时，关闭每一个Activity即可。</p><p>2、发送特定广播：在需要结束应用时，发送一个特定的广播，每个Activity收到广播后，关闭即可。</p><p>3、递归退出：在打开新的Activity时使用startActivityForResult，然后自己加标志，在onActivityResult中处理，递归关闭。为了编程方便，最好定义一个Activity基类，处理这些共通问题。</p><p>在2.1之前，可以使用ActivityManager的restartPackage方法。</p><p>它可以直接结束整个应用。在使用时需要权限android.permission.RESTART_PACKAGES。<br>注意不要被它的名字迷惑。</p><p>可是，在2.2，这个方法失效了。在2.2添加了一个新的方法，killBackground Processes()，需要权限 android.permission.KILL_BACKGROUND_PROCESSES。可惜的是，它和2.2的restartPackage一样，根本起不到应有的效果。<br>另外还有一个方法，就是系统自带的应用程序管理里，强制结束程序的方法，forceStopPackage()。</p><p>它需要权限android.permission.FORCE_STOP_PACKAGES。</p><p>并且需要添加android:sharedUserId=”android.uid.system”属性。同样可惜的是，该方法是非公开的，他只能运行在系统进程，第三方程序无法调用。</p><p>因为需要在Android.mk中添加LOCAL_CERTIFICATE := platform。</p><p>而Android.mk是用于在Android源码下编译程序用的。</p><p>从以上可以看出，在2.2，没有办法直接结束一个应用，而只能用自己的办法间接办到。</p><p>现提供几个方法，供参考：</p><p>1、抛异常强制退出：<br>该方法通过抛异常，使程序Force Close。<br>验证可以，但是，需要解决的问题是，如何使程序结束掉，而不弹出Force Close的窗口。</p><p>2、记录打开的Activity：<br>每打开一个Activity，就记录下来。在需要退出时，关闭每一个Activity即可。</p><p>3、发送特定广播：<br>在需要结束应用时，发送一个特定的广播，每个Activity收到广播后，关闭即可。</p><p>4、递归退出<br>在打开新的Activity时使用startActivityForResult，然后自己加标志，在onActivityResult中处理，递归关闭。</p><p>除了第一个，都是想办法把每一个Activity都结束掉，间接达到目的。但是这样做同样不完美。你会发现，如果自己的应用程序对每一个Activity都设置了nosensor，在两个Activity结束的间隙，sensor可能有效了。</p><p>但至少，我们的目的达到了，而且没有影响用户使用。为了编程方便，最好定义一个Activity基类，处理这些共通问题。</p><p>26、 AIDL的全称是什么？如何工作？能处理哪些类型的数据？</p><p>答：</p><p>全称是：Android Interface Define Language<br>在Android中, 每个应用程序都可以有自己的进程. 在写UI应用的时候, 经常要用到Service. 在不同的进程中, 怎样传递对象呢?</p><p>显然, Java中不允许跨进程内存共享. 因此传递对象, 只能把对象拆分成操作系统能理解的简单形式, 以达到跨界对象访问的目的. </p><p>在J2EE中,采用RMI的方式, 可以通过序列化传递对象. 在Android中, 则采用AIDL的方式. 理论上AIDL可以传递Bundle,实际上做起来却比较麻烦。</p><p>AIDL(AndRoid接口描述语言)是一种借口描述语言; 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程的目的. 如果需要在一个Activity中, 访问另一个Service中的某个对象, 需要先将对象转化成AIDL可识别的参数(可能是多个参数), 然后使用AIDL来传递这些参数, 在消息的接收端, 使用这些参数组装成自己需要的对象.</p><p>AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。</p><p>它使用代理类在客户端和实现层间传递值. 如果要使用AIDL, 需要完成2件事情: </p><ol><li><p>引入AIDL的相关类.; </p></li><li><p>调用aidl产生的class.</p></li></ol><p>AIDL的创建方法:</p><p>AIDL语法很简单,可以用来声明一个带一个或多个方法的接口，也可以传递参数和返回值。 </p><p>由于远程调用的需要, 这些参数和返回值并不是任何类型.下面是些AIDL支持的数据类型:</p><ol><li>不需要import声明的简单Java编程语言类型(int,boolean等)</li><li>String, CharSequence不需要特殊声明</li><li>List, Map和Parcelables类型, 这些类型内所包含的数据成员也只能是简单数据类型, String等其他比支持的类型.</li></ol><p>(另外: 我没尝试Parcelables, 在Eclipse+ADT下编译不过, 或许以后会有所支持)</p><p>27、 请解释下Android程序运行时权限与文件系统权限的区别。</p><p>答：运行时权限Dalvik( android授权)</p><p>文件系统 linux 内核授权</p><p>28、 系统上安装了多种浏览器，能否指定某浏览器访问指定页面？请说明原由。</p><p>通过直接发送Uri把参数带过去，或者通过manifest里的intentfilter里的data属性</p><p>29、 android系统的优势和不足</p><p>答：Android平台手机 5大优势：</p><p>一、开放性<br>在优势方面，Android平台首先就是其开发性，开发的平台允许任何移动终端厂商加入到Android联盟中来。显著的开放性可以使其拥有更多的开发者，随着用户和应用的日益丰富，一个崭新的平台也将很快走向成熟。开放性对于Android的发展而言，有利于积累人气，这里的人气包括消费者和厂商，而对于消费者来讲，随大的受益正是丰富的软件资源。开放的平台也会带来更大竞争，如此一来，消费者将可以用更低的价位购得心仪的手机。</p><p>二、挣脱运营商的束缚<br>在过去很长的一段时间，特别是在欧美地区，手机应用往往受到运营商制约，使用什么功能接入什么网络，几乎都受到运营商的控制。从去年iPhone 上市 ，用户可以更加方便地连接网络，运营商的制约减少。随着EDGE、HSDPA这些2G至3G移动网络的逐步过渡和提升，手机随意接入网络已不是运营商口中的笑谈，当你可以通过手机IM软件方便地进行即时聊天时，再回想不久前天价的彩信和图铃下载业务，是不是像噩梦一样？互联网巨头Google推动的Android终端天生就有网络特色，将让用户离互联网更近。</p><p>三、丰富的硬件选择<br>这一点还是与Android平台的开放性相关，由于Android的开放性，众多的厂商会推出千奇百怪，功能特色各具的多种产品。功能上的差异和特色，却不会影响到数据同步、甚至软件的兼容，好比你从诺基亚 Symbian风格手机 一下改用苹果 iPhone ，同时还可将Symbian中优秀的软件带到iPhone上使用、联系人等资料更是可以方便地转移，是不是非常方便呢？</p><p>四、不受任何限制的开发商<br>Android平台提供给第三方开发商一个十分宽泛、自由的环境，不会受到各种条条框框的阻扰，可想而知，会有多少新颖别致的软件会诞生。但也有其两面性，血腥、暴力、方面的程序和游戏如可控制正是留给Android难题之一。</p><p>五、无缝结合的Google应用<br>如今叱诧互联网的Google已经走过10年度历史，从搜索巨人到全面的互联网渗透，Google服务如地图、邮件、搜索等已经成为连接用户和互联网的重要纽带，而Android平台手机将无缝结合这些优秀的Google服务。</p><p>再说Android的5大不足：</p><p>一、安全和隐私<br>由于手机 与互联网的紧密联系，个人隐私很难得到保守。除了上网过程中经意或不经意留下的个人足迹，Google这个巨人也时时站在你的身后，洞穿一切，因此，互联网的深入将会带来新一轮的隐私危机。</p><p>二、首先开卖Android手机的不是最大运营商<br>众所周知，T-Mobile在23日，于美国纽约发布 了Android首款手机G1。但是在北美市场，最大的两家运营商乃AT&amp;T和Verizon，而目前所知取得Android手机销售权的仅有 T-Mobile和Sprint，其中T-Mobile的3G网络相对于其他三家也要逊色不少，因此，用户可以买账购买G1，能否体验到最佳的3G网络服务则要另当别论了！</p><p>三、运营商仍然能够影响到Android手机<br>在国内市场，不少用户对购得移动定制机不满，感觉所购的手机被人涂画了广告一般。这样的情况在国外市场同样出现。Android手机的另一发售运营商Sprint就将在其机型中内置其手机商店程序。</p><p>四、同类机型用户减少<br>在不少手机论坛都会有针对某一型号的子论坛，对一款手机的使用心得交流，并分享软件资源。而对于Android平台手机，由于厂商丰富，产品类型多样，这样使用同一款机型的用户越来越少，缺少统一机型的程序强化。举个稍显不当的例子，现在山寨机泛滥，品种各异，就很少有专门针对某个型号山寨机的讨论和群组，除了哪些功能异常抢眼、颇受追捧的机型以外。</p><p>五、过分依赖开发商缺少标准配置<br>在使用PC端的Windows Xp系统的时候，都会内置微软Windows Media Player这样一个浏览器程序，用户可以选择更多样的播放器，如Realplay或暴风影音等。但入手开始使用默认的程序同样可以应付多样的需要。在 Android平台中，由于其开放性，软件更多依赖第三方厂商，比如Android系统的SDK中就没有内置音乐 播放器，全部依赖第三方开发，缺少了产品的统一性。</p><p>30、 Android dvm的进程和Linux的进程, 应用程序的进程是否为同一个概念<br>答：DVM指dalivk的虚拟机。每一个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalvik虚拟机实例。而每一个DVM都是在Linux 中的一个进程，所以说可以认为是同一个概念。</p><p>31、 sim卡的EF文件是什么？有何作用<br>答：sim卡的文件系统有自己规范，主要是为了和手机通讯，sim本 身可以有自己的操作系统，EF就是作存储并和手机通讯用的</p><p>32、 嵌入式操作系统内存管理有哪几种， 各有何特性<br>　　页式，段式，段页，用到了MMU,虚拟空间等技术</p><p>33、 什么是嵌入式实时操作系统, Android 操作系统属于实时操作系统吗?</p><p>嵌入式实时操作系统是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统作出快速响应，并控制所有实时任务协调一致运行的嵌入式操作系统。主要用于工业控制、 军事设备、 航空航天等领域对系统的响应时间有苛刻的要求，这就需要使用实时系统。又可分为软实时和硬实时两种，而android是基于linux内核的，因此属于软实时。</p><p>34、 一条最长的短信息约占多少byte?</p><p>　　中文70(包括标点)，英文160，160个字节。　　</p><p>35、 有一个一维整型数组int[]data保存的是一张宽为width，高为height的图片像素值信息。请写一个算法，将该图片所有的白色不透明(0xffffffff)像素点的透明度调整为50% ###。</p><p>36、 如何将SQLite数据库(dictionary.db文件)与apk文件一起发布<br>解答：可以将dictionary.db文件复制到Eclipse Android工程中的res aw目录中。所有在res aw目录中的文件不会被压缩，这样可以直接提取该目录中的文件。可以将dictionary.db文件复制到res aw目录中</p><p>37、 如何将打开res aw目录中的数据库文件?</p><p>解答：在Android中不能直接打开res aw目录中的数据库文件，而需要在程序第一次启动时将该文件复制到手机内存或SD卡的某个目录中，然后再打开该数据库文件。</p><p>复制的基本方法是使用getResources().openRawResource方法获得res aw目录中资源的 InputStream对象，然后将该InputStream对象中的数据写入其他的目录中相应文件中。</p><p>在Android SDK中可以使用SQLiteDatabase.openOrCreateDatabase方法来打开任意目录中的SQLite数据库文件。</p><p>38、 DDMS和TraceView的区别?</p><p>DDMS是一个程序执行查看器，在里面可以看见线程和堆栈等信息，TraceView是程序性能分析器 。</p><p>39、 java中如何引用本地语言</p><p>可以用JNI（java native interface java 本地接口）接口 。</p><p>40、 谈谈Android的IPC（进程间通信）机制</p><p>IPC是内部进程通信的简称， 是共享”命名管道”的资源。Android中的IPC机制是为了让Activity和Service之间可以随时的进行交互，故在Android中该机制，只适用于Activity和Service之间的通信，类似于远程方法调用，类似于C/S模式的访问。通过定义AIDL接口文件来定义IPC接口。Servier端实现IPC接口，Client端调用IPC接口本地代理。</p><p>41、 NDK是什么</p><p>NDK是一些列工具的集合，NDK提供了一系列的工具，帮助开发者迅速的开发C/C++的动态库，并能自动将so和java 应用打成apk包。<br>NDK集成了交叉编译器，并提供了相应的mk文件和隔离cpu、平台等的差异，开发人员只需简单的修改mk文件就可以创建出so</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/categories/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/tags/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android课程体系</title>
    <link href="https://huangguangda.github.io/2018/05/11/1/"/>
    <id>https://huangguangda.github.io/2018/05/11/1/</id>
    <published>2018-05-11T02:59:53.000Z</published>
    <updated>2018-06-22T03:17:06.785Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>来源网络收集</p><p>第一阶段：Java se阶段</p><p>阶段    课程    课程内容    讲解知识点</p><p>Java语言基础    入门基础    </p><p>1.Java开发环境搭建<br>（第一天只能使用文本文档编写代码）    </p><p>1.Java语言发展史介绍<br>2.Java体系与特点<br>3.JVM与GC介绍<br>4.Java跨平台原理<br>5.JavaSE组成概念<br>6.JDK与JRE介绍<br>7.Java开发环境搭建<br>8.实现 HelloWorld 程序<br>9.HelloWorld程序编写与分析<br>10.Java中的三种注释<br>11.常见Java开发工具介绍<br>12.Wiki文档的使用技巧    </p><p>1.基本语法与命名规范<br>2.程序分支结构控制<br>3.数组及常用算法<br>（可以考虑使用Editplus编辑器）    </p><p>1.1    变量<br>1.2  数据类型<br>1.3  二进制以及进制间转换<br>1.4  标识符<br>1.5  类型转换<br>1.6  关键字<br>1.7  常量<br>1.8  转义字符<br>1.9  算术运算符<br>1.10  赋值运算符<br>1.11  关系运算符<br>1.12  逻辑运算符<br>1.13  位运算符<br>1.14  移位运算符<br>1.15  字符串连接运算符<br>1.16  三目运算符<br>1.17  运算符优先级</p><p>2.1   if条件语句<br>2.2   switch语句<br>2.3   for循环语句<br>2.4   while循环语句<br>2.5   do while循环语句</p><p>3.1数组四种声明方式以及特性<br>3.2数组插入、遍历等常用操作<br>3.3常用算法：最大、最小、平均值<br>3.4多维数组声明及原理<br>3.5多维数组的存储、遍历等操作    </p><p>面向对象</p><p>基础</p><p>1.面向过程与面向对象思想分析<br>2.封装性<br>3.String类<br>4.this关键字<br>5.static关键字<br>6.对象数组<br>7.JDK1.5新特性<br>8.代码块<br>9.内部类    1.1面向对象思想介绍<br>1.2面向过程与面向对象分析<br>1.3什么是类？什么是对象？<br>1.4类与对象之间的关系<br>1.5类的定义格式<br>1.6对象的定义格式<br>1.7创建对象时的内存分析<br>1.8调用类中的属性，调用方法<br>1.9方法的重载</p><p>2.1   封装性介绍<br>2.2   构造方法<br>2.3   构造方法的重载<br>2.4   匿名对象<br>2.5   如何设计一个类</p><p>3.1   String的两种赋值方式<br>3.2   String的比较<br>3.3   String两种赋值方式的区别<br>3.4   String的值不可改变<br>        （字符串常量池）<br>3.5   String类的常用操作方法<br>3.6   引用传递深入讲解<br>        （课件中三个范例）<br>3.6一对一关系讲解</p><p>4.1   this关键字<br>4.2   this调用类中的属性<br>4.3   this调用类中的方法<br>4.4   this表示当前对象<br>4.5   this接收本类引用<br>        （自定义对象的比较）</p><p>5.1   static关键字介绍<br>5.2   static特点<br>5.3   static访问限制<br>5.4   成员变量和类变量<br>5.5   static属性内存分析<br>5.6   应用案例- - 计数器<br>5.7   main方法讲解<br>5.8   设计模式—单例（懒汉、饿汉）</p><p>6.1   自定义对象定义数组<br>6.2   对象数组案例-商品管理系统</p><p>7.1   foreach输出<br>7.2   可变参数</p><p>8.1   普通代码块<br>8.2   构造块<br>8.3   静态代码块<br>8.4   三种代码块以及构造方法执行顺序</p><p>9.1内部类概念<br>9.2内部类的访问规则<br>9.3内部类的访问限制<br>9.4递归<br>9.5链表（添加、删除、输出）    </p><p>高级    </p><p>1.继承<br>2.super关键字<br>3.final关键字<br>4.抽象类<br>5.接口<br>6.多态性<br>7.instanceOf关键字<br>8.Object类<br>9.抽象类和接口的关系<br>10.接口应用<br>11.匿名内部类<br>12.包装类<br>13.包与访问修饰符<br>14.Eclipse介绍    </p><p>1.1继承的概念（定义）<br>1.2继承的格式<br>1.3继承的好处<br>1.4继承的限制<br>1.5子类的实例化过程<br>1.6访问修饰符讲解<br>1.7重载和重写的区别</p><p>2.1   super关键字<br>2.2   super调用父类中的属性<br>2.3   super调用父类中的方法</p><p>3.1   final关键字<br>3.2   final修饰类<br>3.3   final修饰方法<br>3.4   final修饰属性</p><p>4.1   抽象类概念、定义<br>4.2   抽象方法<br>4.3   抽象类特点<br>4.4   设计模式—模板方法<br>（大保健的例子）</p><p>5.1   接口的定义<br>5.2   接口的特点<br>5.3   接口多实现、不能实例化…<br>5.4   设计模式—策略模式<br>5.5   接口总结（接口中定义什么？）</p><p>6.1   多态概念<br>6.2   两种多态<br>6.3   向上、向下转型<br>6.4   多态的体现<br>6.5   多态的好处<br>6.6   多态的弊端<br>6.7   多态的前提</p><p>7.1   instanceOf关键字<br>7.2   抽象类的实际应用<br>7.3   接口的实际应用</p><p>8.1   Object类讲解<br>8.2   toString方法<br>8.3   equals方法<br>8.4   Object接收任意引用参数</p><p>9.1   （简单介绍即）</p><p>10.1  简单工厂设计模式<br>10.2  代理设计模式<br>（课件案例或潘金莲案例）<br>10.3  适配器模式（课件案例）<br>10.4  面向对象六大原则其中三个</p><p>12.1匿名内部类</p><p>12.1  包装类概念介绍<br>12.2  装箱、拆箱概念<br>12.3  JDK1.5新特性—<br>自动装箱、自动拆箱<br>12.4  转型操作<br>12.5  Integer—享元设计模式</p><p>13.1   包介绍<br>13.2  包的命名规则<br>13.3  访问修饰符的访问范围整理</p><p>14.1Eclipse接受<br>14.2发放Eclipse工具<br>14.3发放Eclipse配色、快捷键大全    </p><p>Java语言高级    异常处理    </p><p>1.认识并处理异常<br>2.异常的处理流程、<br>3.标准的异常处理格式<br>4.RuntimeException和<br>Exception的区别<br>5.自定义异常<br>6.Eclipse  Debug    </p><p>1.1演示算数异常的产生<br>1.2讲解异常结构图<br>1.3讲解Exception和Error的区别<br>1.4使用if语句先处理异常<br>1.5使用try catch处理异常<br>1.6演示数组下标越界异常<br>1.7处理数组下标越界异常</p><p>2.1   讲解异常捕获的流程<br>2.2   异常的统一出口finally<br>2.3   面试题：在try块中有return</p><p>语句并且正常执行，问Finally语句块中的内容是否会执行</p><p>2.4   throws关键字<br>2.5   throw关键字</p><p>3.1   演示标准的异常处理格式<br>3.2   添加多个catch语句块<br>3.3   多个catch块继承关系的顺序<br>3.4   JDK1.7多个catch的新支持<br>4.1   讲解RuntimeException<br>4.2   讲解 Exception<br>4.3   总结区别</p><p>5.1   自定义异常<br>5.2   使用自定义异常</p><p>6.1   讲解Eclipse Debug使用    </p><p>常用类库    </p><p>1.深入StringBuffer类及其操作方法<br>2.国际化程序的实现<br>3.日期操作，Date、DateFormat、SimpleDateFormat等<br>4.比较器的实现及原来二分查找、二叉树、以及对象的克隆    </p><p>1.1由String特性引出<br>1.2介绍StringBuffer特性<br>1.3StringBuffer实现原理：<br>A.默认缓冲区大小<br>B.缓冲区扩充算法<br>1.4StringBuilder介绍<br>1.5面试题：Builder与Buffer区别？</p><p>2.1   介绍国际化程序<br>2.2   Locale类介绍<br>2.3   ResourceBundle类介绍<br>2.2   实现国际化程序<br>2.5   处理动态文本</p><p>3.1   Math类介绍及常用方法演示<br>3.2   Random介绍及演示<br>3.3   Arrays类介绍及演示<br>3.4   演示Arrays类中的binarySearch方法<br>3.5   二分查找法（折半查找）<br>3.6   Date类介绍<br>3.7   Calendar类介绍<br>3.8   使用Calendar实现中国式时间<br>3.9   使用SimpleDateFormat格式化时间</p><p>4.1   Arrays的sort方法引出<br>4.2   Comparable接口讲解<br>4.3   排序规则的讲解<br>4.4   二叉树算法（添加、输出）<br>4.5   Comparator接口讲解<br>4.6   Cloneable接口讲解<br>4.7   对象的克隆实现</p><p>IO操作    </p><p>1.File类的使用及利用递归实现文件搜索器<br>2.字节操作流，InputStream、OutputStream、FileInputStream、ByteArrayInputStream等等<br>3.字符操作流，缓冲流、管道流、合并流<br>4.对象序列化及对象序列化原理，源码解析<br>5.装饰者设计模式    1.1File类的介绍<br>1.2 创建文件<br>1.3 删除文件<br>1.4 判断文件类型<br>1.5 列出目录中的文件<br>1.6 递归遍历文件</p><p>2.1    FileOutputStream<br>2.2    FileInputStream<br>2.3    一次读取一个字节示例<br>2.4    一次读取整个文件示例<br>2.5    定义缓冲区读取文件<br>2.6    文件复制习题</p><p>3.1    字节流读取中文引出乱码<br>3.2    字符流处理中文讲解<br>3.3    示例：使用字节流字符流分别写入文件<br>3.4    引出缓冲区概念，讲解字节流字符流区别<br>3.5    位字节流添加缓冲功能BufferedOutputStream<br>3.6    字节字符转换流OutputStreamWriter</p><p>InputStreamReader</p><p>3.7    使用字符流向文件输出‘97’<br>3.8    引出PrintStream打印流<br>3.9    文件分割、合并练习</p><p>4.1    对象序列化概念介绍<br>4.2    Serializable接口介绍<br>4.2    序列化：ObjectOutputStream<br>4.3    反序列化：ObjectInputStream<br>4.4    序列化一组对象<br>4.5    transient关键字作用<br>4.6    内存操作流ByteArrayInputStream<br>         ByteArrayOutputStream<br>4.7    缓冲区读取：BufferedReader类<br>4.7    数据流DataOutputStream<br>         DataInputStream<br>4.8    将管理系统序列化存储<br>4.9    字符编码介绍<br>4.10  IO体系结构梳理</p><p>5.1    装饰者设计模式讲解    </p><p>集合    </p><p>1.集合与数组的区别，缓存的管理，Collection 、List、Set接口的作用及相关的子类<br>2.Map集合与Conllection的区别，Map的好处及用法HashMap、HashTable、Properties等<br>3.Object 类中的方法及Object类存在的意义泛型的作用、枚举与泛型、泛型的好处<br>4.常用集合工具类Collections<br>5.哈希算法实现原来剖析    </p><p>1.1类集引出<br>1.2集合结构图讲解<br>1.3Collection接口讲解<br>1.4List接口讲解<br>1.5ArrayList实现原理及使用<br>1.6Vector实现原理及使用<br>1.7ArrayList和Vector区别<br>1.8LinkedList实现原理及使用<br>1.9LinkedList当做队列、堆栈使用<br>1.10Set接口讲解<br>1.11HashSet实现原理及使用<br>1.12TreeSet实现原理及使用<br>1.13平衡二叉树介绍<br>1.14集合输出Iterator接口<br>1.15双向输出ListIterator接口<br>1.16介绍废弃的接口Enumeration<br>1.17Foreach输出集合</p><p>2.1Map接口介绍<br>2.2HashMap实现原理及使用<br>2.3Object类中的hashCode方法<br>2.4哈希算法的存储实现原理<br>2.5哈希表的重新散列<br>2.6HashTable实现原理及使用<br>2.7HashMap和HashTable区别<br>2.8TreeMap实现原理 及使用<br>2.9Map集合的输出讲解</p><p>3.1一对多关系讲解<br>3.2多对多关系讲解</p><p>4.1Collections和Collection区别</p><p>5.1   分析hashCode、equals和内存泄露    </p><p>多线程    </p><p>1.进程和线程关系及区别<br>2.Thread与Runnable底层原理及使用作用原理<br>3.线程的优先级、线程池<br>4.线程的同步与死锁线程的并发处理    </p><p>1.1进程的概念<br>1.2线程的概念<br>1.3多线程概念介绍<br>1.4线程的两种实现方式<br>2<br>2.1两种实现方式的区别<br>2.2线程的操作状态<br>2.3线程的常用操作方法<br>2.4线程的强制执行<br>2.5线程的休眠<br>2.6线程的中断原理<br>3<br>3.1线程的优先级介绍<br>3.2线程池介绍及使用<br>4<br>4.1买票例子引出线程同步问题<br>4.2同步方法与同步代码块解决问题<br>4.3JDK1.5 新的加锁方式Lock<br>4.4模拟线程死锁<br>4.5生产者消费者案例讲解<br>4.6线程的生命周期    通过本章学习，可以掌握Java中线程的两种实现方式，熟练使用Java中的多线程，要求掌握Java中线程的同步并且避免Java中线程的死锁问题。理解并熟练使用线程池。    2<br>    网络编程    1.TCP、UDP程序的实现<br>2.ServerSocket  和Scoket 类的使用<br>3.URLConnection的使用    1.1计算机网络介绍<br>1.2网络通信协议介绍<br>1.3网络通信接口介绍<br>1.4CS/BS程序介绍<br>1.5TCP/IP协议介绍<br>1.6三次握手原理讲解<br>2<br>2.1使用Socket、和ServerSocket<br>编写服务器端程序<br>2.2使用Socket写客户端程序<br>2.3为服务器端加入ECHO<br>2.4为服务器端加入多线程<br>2.5UDP协议介绍<br>2.6使用DatagramPacket、<br>DatagramSocket实现UDP程序</p><p>3.1   URL介绍<br>3.2   URLConnection介绍<br>3.3   连网下载图片案例讲解    </p><p>GUI编程    </p><p>1.常用组件了解<br>2.事件与监听器<br>3.观察者设计模式    1.1GUI介绍<br>1.2AWT组成结构介绍<br>1.3Component类介绍<br>1.4Frame类介绍<br>1.5Panel讲解<br>1.6实现我们的第一个窗体<br>1.7Toolkit介绍<br>1.8使用Toolkit设置初始化位置<br>1.9布局介绍<br>1.10四种布局讲解</p><p>2.1实现事件处理的步骤<br>2.23种事件处理方式</p><p>3.1观察者设计模式实现<br>3.2使用JDK提供的观察者<br>3.3Swing介绍<br>3.4使用swing画登录窗体    </p><p>反射内省    1.Java Reflection API的作用、检查运行时的对象、动态更新字段、调用方法</p><p>2.反射主要的类 Class 、Method 、Field 、Constructor<br>3.内省机制的使用    </p><p>1.1什么是反射<br>1.2Class类讲解<br>1.3Class类的三种实例化方式<br>1.4使用Class类实例化对象<br>1.5反射调用无参构造方法<br>1.6反射调用有参构造方法<br>1.7反射类所在的包<br>1.8反射获取类中的属性（公有）<br>1.9反射获取类中的私有属性<br>1.10反射调用类中的私有方法</p><p>2.1Constructor类介绍<br>2.2Method类介绍<br>2.3Field类介绍</p><p>3.1内省概念介绍<br>3.2JavaBean介绍<br>3.3标准的get/set介绍<br>3.4使用trospector模拟框架底层</p><p>XML    </p><p>1.XML基础简介<br>2.XML的解析方式<br>3.深入XML两种解析思想DOM与SAX<br>4.DOM4J与JDOM    </p><p>1.1XML介绍<br>1.2XML用途</p><p>2.1XML的两种解析原理<br>2.2DOM原理讲解<br>2.3DOM解析示例<br>2.4SAX原理讲解<br>2.5SAX解析示例</p><p>3.1JDOM解析示例<br>3.2DOM4J解析示例<br>3.3通过对象生成XML文件<br>3.4各种解析方法分析比较    </p><p>XML文件可以用作数据的存储，数据传输，配置文件。</p><p>第二阶段：Java Web（2周/10天共60课时）</p><p>数据库应用    MySQL    </p><p>1.Mysql安装、基础语法、DDL、DML、DCL语法的操作、事务管理、数据库设计范式等    </p><p>JDBC    </p><p>1.JDBC实现对Mysql实现CURD操作<br>2.Sql注入问题及解决方案<br>3.批处理与事务控制<br>4.DAO设计模式</p><p>Java Web<br>前台与服务器端应用    </p><p>1.HTML标签<br>2.Web服务器环境搭建与配置<br>3.Web三大组件，Servlet<br>4.使用httpwatch解析Http协议原理<br>5.Web程序设计及MVC设计模式<br>6.Html5与JavaScript    </p><p>第三阶段：Android阶段</p><p>Android基础<br>Android入门    </p><p>1.Android简史<br>2.Android体系结构<br>3.DVM与JVM<br>4.SDK的获取(搭环境)<br>5.SDK目录结构<br>6.创建模拟器启动<br>7.运行HelloWord<br>8.项目目录结构<br>9.应用打包安装过程<br>10.DDMS使用<br>11.Logcat的使用</p><p>Android基础UI    </p><p>1.常用基本控件<br>2.Toast<br>3.常用响应事件<br>4.Menu<br>5.Dialog<br>6.常用布局</p><p>掌握Android<br>常用Menu 与 各种Dialog, 以及Android的五种布局    </p><p>Android文件读写<br>1.内部存储与外部存   储概念<br>2.内部存储读写文件<br>3.使用路径API在内部存储中读写文件<br>4.文件访问权限<br>5.外部存储读写文件<br>6.导入Setting源码<br>7.获取SD卡剩余容量<br>8.SharedPreference的使用    </p><p>掌握</p><p>SharedPreference的使用方式    </p><p>生成XML文件,Android单元测试与数据库操作    </p><p>1.Xml生成与解析 并通过debug 查看解析过程<br>2.Android中的单元测试<br>3.SQLite数据库简介<br>4.创建数据库<br>5.增删改查<br>6.SQLite事物<br>7.数据展示</p><p>Android单元测试</p><p>SQLite数据库的使用;<br>    AdapterView    </p><p>1.ListView 预览<br>2.Adapter简介<br>3.ListView的使用<br>4.ArrayAdapter ,SimpleAdapter ,CursorAdapter , SimpleCursorAdapter 等adapter的使用<br>5.BaseAdapter的使用(自定义Adapter)<br>6.Spinner选择列表的使用<br>7.GridView网格视图的使用<br>8.ListView , Spinner , GridView与BaseAdapter结合;<br>9.ListView , Spinner , GridView缓存原理与BaseAdapter优化    </p><p>Android进阶    Activity与 Intent    </p><p>1.Activity使用<br>2.Activity四大加载模式<br>2.Activity 生命周期<br>3.Activity 启动与关闭<br>4.Activity 横竖屏<br>5.Intent属性与使用<br>6.Activity 显式 隐式 带返回值跳转<br>7.IntentFilter(过滤器)<br>8.Activity回退栈原理</p><p>多线程与Android网络编程    </p><p>1.Android进程与线程<br>2.UI线程模型<br>3.Handler机制<br>4.使用消息队列刷新UI<br>5.AsyncTask的使用<br>6.进程通信<br>7.Android网络编程简介<br>8.获取网络状态<br>9.Get Post提交数据<br>10.Http协议<br>11.下载数据并建立本地缓存<br>12.JSON生成与解析 , Gson.jar包使用</p><p>1.服务介绍<br>2.启动Service与生命周期<br>3.绑定Service与生命周期<br>4.混合启动Service与声明周期<br>5.启动远程服务</p><ol start="6"><li>AIDL的使用</li></ol><p>Android四大组件之广播    </p><p>1.Android广播机制与概念<br>2.定义广播接收者<br>3.无序广播与有序广播<br>4.短信拦截系统<br>5.内存卡状态监听<br>6.监控应用状态<br>7.发送无序广播与有序广播<br>8.发送系统级广播</p><p>Android四大组件之内容提供者    </p><p>1.内容提供者简介<br>2.增删改差<br>3.URL匹配器<br>4.备份系统短信<br>5.插入系统短信<br>6.备份通讯录<br>7.插入联系人</p><p>Android多媒体编程    </p><p>1.摄像头的使用<br>2.图片处理<br>3.画板<br>4.音乐播放<br>5.视频播放    </p><p>Android动画    </p><p>1.动画简介<br>2.逐帧动画<br>3.补间动画<br>4.XML与JAVA代码形式实现<br>5.混合使用补间动画    </p><p>Android高级    </p><p>高级UI组件<br>与<br>常用开源组件</p><p>1.widget 桌面控件<br>2.XlistView 上拉刷新, 下拉加载更多<br>3.Drawerlayout抽屉效果<br>4.PopupWindow 定点弹窗<br>5.ExpandableListView 二级展开列表<br>6.ViewPager 滑动<br>7.WebView 网页加载    </p><p>Android碎片化之Fragment    </p><p>1.Android碎片化介绍<br>2.Fragment简介<br>3.FragmentManager使用<br>4.Fragment生命周期<br>5.Fragment使用方式<br>6.Fragment事物<br>7.Fragment 常见错误使用方式<br>8.Fragment与Viewpager结合使用    </p><p>开源框架之Volly    </p><p>1.Volly框架简介<br>2.创建请求队列<br>3.请求对象 StringRequest , JsonObjecyRequest,<br>JsonArrayRequest,<br>4.GET/POST请求<br>5.绑定Activity<br>6.二次回调封装<br>7.ImageRequest,<br>ImageLoader,<br>NetWorkImageView, 加载网络图片 并 监听<br>8.lruCache与ImageCache 本地缓存    </p><p>开源框架之Xutils    </p><p>1.Xutils四大模块简介<br>2.ViewUtils模块: 简化界面代码<br>3.DBUtils模块: 简化数据库操作<br>4.BitmapUtils模块: 优化图片加载<br>5.HttpUtils 模块: GET/POST请求网络    </p><p>开源框架之UniversalImageLoader    </p><p>1.图片加载器ImageLoader的单例模式简介<br>2.ImageLoaderConfiguration的作用<br>3.使用默认的ImageLoaderConfiguration给图片加载器ImageLoader配置加载参数<br>4.通过API方法自行创建ImageLoaderConfiguration对象设置加载参数<br>5.通过displayImage()异步加载图片<br>6.通过loadImage()异步加载图片<br>7.PauseOnScrollListener监听器的使用    </p><p>开源框架之Glide    </p><p>1.Glide简介<br>2.Glide中Gif动图与视频的解码方式介绍,<br>3.使用Glide加载gif图<br>4.使用Glide加载缩略图    </p><p>开源框架之Cropper    </p><p>1.Cropper简介<br>2.使用Cropper剪裁图片<br>3.使用Cropper实现图片旋转等    </p><p>LSB应用    百度地图</p><p>1.百度地图API简介<br>2.注册百度开发者以及地图访问密钥<br>3.集成百度地图SDK并成功调用出地图页面<br>5.设置地图显示类型<br>6.百度地图图层概念介绍<br>7.添加实时交通状况图层、添加热力图图层、添加标注点图层、添加弹出窗图层<br>8.使用百度地图实现定位<br>9.使用百度地图实现路径规划（步行、公共交通、驾车）<br>10.使用百度地图实现POI检索（附近检索、全程检索、详情检索</p><p>Android6.0新特性</p><p>Android M特点及Android Studio    </p><p>1.Android Studio下载与安装<br>2.Studio项目结构与运行HelloWord<br>3.常用功能介绍<br>4.常用快捷键介绍<br>5.导出导入Eclipse项目<br>6.APK打包签名设置<br>7.Gradle Plugin 中 buildTypes 、 productFlavors<br>8.Android6.0与新特性<br>9.Gradle自动化项目构建工具    </p><p>高级应用    </p><p>项目构建工具、项目版本管理、Android测试与发布、阿里云服务器    </p><p>1.Gradle项目构建工具<br>2.Git项目版本控制<br>3.JUnit单元测试<br>4.Android应用发布流程<br>5.阿里云服务器搭建及使用技巧    </p><p>编辑 ：达叔</p><p>定位：分享 Android&amp;Java 知识点</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/categories/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/tags/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android技术面试整理附有详细答案(包括百度、新浪、中科软等多家公司笔试面试题)</title>
    <link href="https://huangguangda.github.io/2018/05/10/1/"/>
    <id>https://huangguangda.github.io/2018/05/10/1/</id>
    <published>2018-05-10T02:30:45.000Z</published>
    <updated>2018-06-22T02:34:47.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">用一切抱怨的时间去努力</blockquote><a id="more"></a><p>1、Android的四大组件是哪些，它们的作用？</p><p>答：</p><p>Activity：Activity是Android程序与用户交互的窗口，是Android构造块中最基本的一种，它需要为保持各界面的状态，做很多持久化的事情，妥善管理生命周期以及一些跳转逻辑</p><p>service：后台服务于Activity，封装有一个完整的功能逻辑实现，接受上层指令，完成相关的食物，定义好需要接受的Intent提供同步和异步的接口</p><p>Content Provider：是Android提供的第三方应用数据的访问方案，可以派生Content Provider类，对外提供数据，可以像数据库一样进行选择排序，屏蔽内部数据的存储细节，向外提供统一的借口模型，大大简化上层应用，对数据的整合提供了更方便的途径</p><p>BroadCast Receiver：接受一种或者多种Intent作触发事件，接受相关消息，做一些简单处理，转换成一条Notification，统一了Android的事件广播模型</p><p>2、请介绍下Android中常用的五种布局。</p><p>常用五种布局方式，分别是：FrameLayout（框架布局），LinearLayout （线性布局），AbsoluteLayout（绝对布局），RelativeLayout（相对布局），TableLayout（表格布局）。</p><p>一、</p><p>FrameLayout：所有东西依次都放在左上角，会重叠，这个布局比较简单，也只能放一点比较简单的东西。</p><p>二、</p><p>LinearLayout：线性布局，每一个LinearLayout里面又可分为垂直布局（android:orientation=”vertical”）和水平布局（android:orientation=”horizontal” ）。</p><p>当垂直布局时，每一行就只有一个元素，多个元素依次垂直往下；水平布局时，只有一行，每一个元素依次向右排列。</p><p>三、</p><p>AbsoluteLayout：绝对布局，用X,Y坐标来指定元素的位置，这种布局方式也比较简单，但是在屏幕旋转时，往往会出问题，而且多个元素的时候，计算比较麻烦。</p><p>四、</p><p>RelativeLayout：相对布局可以理解为某一个元素为参照物，来定位的布局方式。</p><p>主要属性有：</p><p>相对于某一个元素<br>android:layout_below、android:layout_toLeftOf</p><p>相对于父元素的地方<br>android:layout_alignParentLeft、android:layout_alignParentRigh；</p><p>五、</p><p>TableLayout：表格布局，每一个TableLayout里面有表格行TableRow，TableRow里面可以具体定义每一个元素。每一个布局都有自己适合的方式，这五个布局元素可以相互嵌套应用，做出美观的界面。</p><p>3、android中的动画有哪几类，它们的特点和区别是什么  </p><p>答：</p><p>两种，</p><p>一种是Tween动画、还有一种是Frame动画。</p><p>Tween动画，这种实现方式可以使视图组件移动、放大、缩小以及产生透明度的变化;</p><p>另一种Frame动画，传统的动画方法，通过顺序的播放排列好的图片来实现，类似电影。</p><p>4、android 中有哪几种解析xml的类？官方推荐哪种？以及它们的原理和区别。</p><p>答：</p><p>XML解析主要有三种方式，SAX、DOM、PULL。</p><p>常规在PC上开发我们使用Dom相对轻松些，但一些性能敏感的数据库或手机上还是主要采用SAX方式，SAX读取是单向的，优点:不占内存空间、解析属性方便，但缺点就是对于套嵌多个分支来说处理不是很方便。</p><p>而DOM方式会把整个XML文件加载到内存中去，这里Android开发网提醒大家该方法在查找方面可以和XPath很好的结合如果数据量不是很大推荐使用，而PULL常常用在J2ME对于节点处理比较好，类似SAX方式，同样很节省内存，在J2ME中我们经常使用的KXML库来解析。</p><p>SAX和PULL使用</p><p>Pull解析器的运行方式与 SAX 解析器相似</p><pre><code>区别为：SAX解析器的工作方式是自动将事件推入事件处理器进行处理，因此你不能控制事件的处理主动结束；而Pull解析器的工作方式为允许你的应用程序代码主动从解析器中获取事件，正因为是主动获取事件，因此可以在满足了需要的条件后不再获取事件，结束解析。你随便找个sax和pull的例子比较一下就可以发现，pull是一个while循环，随时可以跳出，而sax不是，sax是只要解析了，就必须解析完成。</code></pre><p>5、ListView的优化方案</p><p>答：</p><p>1、</p><p>如果自定义适配器，那么在getView方法中要考虑方法传进来的参数contentView是否为null，如果为null就创建contentView并返回，如果不为null则直接使用。在这个方法中尽可能少创建view。</p><p>2、</p><p>给contentView设置tag（setTag（）），传入一个viewHolder对象，用于缓存要显示的数据，可以达到图像数据异步加载的效果。</p><p>3、</p><p>如果listview需要显示的item很多，就要考虑分页加载。比如一共要显示100条或者更多的时候，我们可以考虑先加载20条，等用户拉到列表底部的时候再去加载接下来的20条。</p><p>6、请介绍下Android的数据存储方式。</p><p>答：</p><p>使用SharedPreferences存储数据；<br>文件存储数据；<br>SQLite数据库存储数据；<br>使用ContentProvider存储数据；<br>网络存储数据；</p><p>Preference，File， DataBase这三种方式</p><p>分别对应的目录是</p><p>/data/data/Package Name/Shared_Pref, </p><p>/data/data/Package Name/files, </p><p>/data/data/Package Name/database 。</p><p>一：使用SharedPreferences存储数据</p><p>首先说明SharedPreferences存储方式，它是 Android提供的用来存储一些简单配置信息的一种机制，例如：登录用户的用户名与密码。</p><p>其采用了Map数据结构来存储数据，以键值的方式存储，可以简单的读取与写入，具体实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void ReadSharedPreferences()&#123;</span><br><span class="line"></span><br><span class="line">String strName,strPassword;</span><br><span class="line"></span><br><span class="line">SharedPreferences user = getSharedPreferences(“user_info”,0);</span><br><span class="line"></span><br><span class="line">strName = user.getString(“NAME”,””);</span><br><span class="line">strPassword = user.getString(“PASSWORD”,””);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void WriteSharedPreferences(String strName,String strPassword)&#123;</span><br><span class="line"></span><br><span class="line">SharedPreferences user = getSharedPreferences(“user_info”,0);</span><br><span class="line"></span><br><span class="line">uer.edit();</span><br><span class="line">user.putString(“NAME”, strName);</span><br><span class="line">user.putString(“PASSWORD” ,strPassword);</span><br><span class="line">user.commit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据读取与写入的方法都非常简单，只是在写入的时候有些区别：先调用edit()使其处于编辑状态，然后才能修改数据，最后使用commit()提交修改的数据。</p><p>实际上SharedPreferences是采用了XML格式将数据存储到设备中，<br>在DDMS中的File Explorer中的/data/data/<package name="">/shares_prefs下。</package></p><p>使用SharedPreferences是有些限制的：只能在同一个包内使用，不能在不同的包之间使用。</p><p>二：文件存储数据</p><p>文件存储方式是一种较常用的方法，在Android中读取/写入文件的方法，与 Java中实现I/O的程序是完全一样的，提供了openFileInput()和openFileOutput()方法来读取设备上的文件。具体实例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String fn = “moandroid.log”;</span><br><span class="line">FileInputStream fis = openFileInput(fn);</span><br><span class="line">FileOutputStream fos = openFileOutput(fn,Context.MODE_PRIVATE);</span><br></pre></td></tr></table></figure><p>三：网络存储数据</p><p>网络存储方式，需要与Android 网络数据包打交道，关于Android 网络数据包的详细说明，请阅读Android SDK引用了Java SDK的哪些package？。</p><p>四：ContentProvider</p><p>1、ContentProvider简介</p><p>当应用继承ContentProvider类，并重写该类用于提供数据和存储数据的方法，就可以向其他应用共享其数据。虽然使用其他方法也可以对外共享数据，但数据访问方式会因数据存储的方式而不同，如：采用文件方式对外共享数据，需要进行文件操作读写数据；采用sharedpreferences共享数据，需要使用sharedpreferences API读写数据。而使用ContentProvider共享数据的好处是统一了数据访问方式。</p><p>2、Uri类简介</p><p>Uri代表了要操作的数据，Uri主要包含了两部分信息：</p><p>1.需要操作的ContentProvider ，</p><p>2.对ContentProvider中的什么数据进行操作，一个Uri由以下几部分组成：</p><p>1.scheme：ContentProvider（内容提供者）的scheme已经由Android所规定为：content://…<br>2.主机名（或Authority）：用于唯一标识这个ContentProvider，外部调用者可以根据这个标识来找到它。<br>3.路径（path）：可以用来表示我们要操作的数据，路径的构建应根据业务而定，如下：</p><p>要操作contact表中id为10的记录，可以构建这样的路径:/contact/10</p><p>要操作contact表中id为10的记录的name字段， contact/10/name</p><p>要操作contact表中的所有记录，可以构建这样的路径:/contact?</p><p>要操作的数据不一定来自数据库，也可以是文件等他存储方式，如下:</p><p>要操作xml文件中contact节点下的name节点，可以构建这样的路径：/contact/name<br>如果要把一个字符串转换成Uri，可以使用Uri类中的parse()方法，如下：<br>Uri uri = Uri.parse(“content://com.changcheng.provider.contactprovider/contact”)</p><p>3、UriMatcher、ContentUrist和ContentResolver简介</p><p>因为Uri代表了要操作的数据，所以我们很经常需要解析Uri，并从 Uri中获取数据。Android系统提供了两个用于操作Uri的工具类，分别为UriMatcher 和ContentUris 。掌握它们的使用，会便于我们的开发工作。<br>UriMatcher：用于匹配Uri，它的用法如下：</p><p>1.首先把你需要匹配Uri路径全部给注册上，如下：</p><p>//常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码(-1)。<br>UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);</p><p>//如果match()方法匹配content://com.changcheng.sqlite.provider.contactprovider /contact路径，返回匹配码为1</p><p>uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact”, 1);//添加需要匹配uri，如果匹配就会返回匹配码</p><p>//如果match()方法匹配 content://com.changcheng.sqlite.provider.contactprovider/contact/230路径，返回匹配码为2</p><p>uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact/#”, 2);//#号为通配符</p><p>2.注册完需要匹配的Uri后，就可以使用uriMatcher.match(uri)</p><p>方法对输入的Uri进行匹配，如果匹配就返回匹配码，匹配码是调用 addURI()方法传入的第三个参数，假设匹配 content://com.changcheng.sqlite.provider.contactprovider/contact路径，返回的匹配码为1。</p><p>ContentUris：用于获取Uri路径后面的ID部分，它有两个比较实用的方法：</p><p>withAppendedId(uri, id)用于为路径加上ID部分<br>parseId(uri)方法用于从路径中获取ID部分<br>ContentResolver：当外部应用需要对ContentProvider中的数据进行添加、删除、修改和查询操作时，可以使用 ContentResolver 类来完成，要获取ContentResolver 对象，可以使用Activity提供的getContentResolver()方法。 ContentResolver使用insert、delete、update、query方法，来操作数据。</p><p>7、activity的启动模式有哪些？是什么含义？</p><p>答：</p><p>在android里，有4种activity的启动模式，分别为：<br>“standard” (默认)<br>“singleTop”<br>“singleTask”<br>“singleInstance”</p><p>它们主要有如下不同：</p><ol><li>如何决定所属task </li></ol><p>“standard”和”singleTop”的activity的目标task，和收到的Intent的发送者在同一个task内，除非intent包括参数FLAG_ACTIVITY_NEW_TASK。<br>如果提供了FLAG_ACTIVITY_NEW_TASK参数，会启动到别的task里。<br>“singleTask”和”singleInstance”总是把activity作为一个task的根元素，他们不会被启动到一个其他task里。</p><ol start="2"><li>是否允许多个实例 </li></ol><p>“standard”和”singleTop”可以被实例化多次，并且存在于不同的task中，且一个task可以包括一个activity的多个实例； </p><p>“singleTask”和”singleInstance”则限制只生成一个实例，并且是task的根元素。 </p><p>singleTop要求如果创建intent的时候栈顶已经有要创建 的Activity的实例，则将intent发送给该实例，而不发送给新的实例。</p><ol start="3"><li>是否允许其它activity存在于本task内 </li></ol><p>“singleInstance”独占一个task，其它activity不能存在那个task里；如果它启动了一个新的activity，不管新的activity的launch mode 如何，新的activity都将会到别的task里运行（如同加了FLAG_ACTIVITY_NEW_TASK参数）。<br>而另外三种模式，则可以和其它activity共存。</p><ol start="4"><li>是否每次都生成新实例 </li></ol><p>“standard”对于没一个启动Intent都会生成一个activity的新实例；<br>“singleTop”的activity如果在task的栈顶的话，则不生成新的该activity的实例，直接使用栈顶的实例，否则，生成该activity的实例。 </p><p>比如现在task栈元素为A-B-C-D（D在栈顶），这时候给D发一个启动intent，如果D是 “standard”的，则生成D的一个新实例，栈变为A－B－C－D－D。 </p><p>如果D是singleTop的话，则不会生产D的新实例，栈状态仍为A-B-C-D<br>如果这时候给B发Intent的话，不管B的launchmode是”standard” 还是 “singleTop” ，都会生成B的新实例，栈状态变为A-B-C-D-B。</p><p>“singleInstance”是其所在栈的唯一activity，它会每次都被重用。<br>“singleTask”如果在栈顶，则接受intent，否则，该intent会被丢弃，但是该task仍会回到前台。</p><p>当已经存在的activity实例处理新的intent时候，会调用onNewIntent()方法 如果收到intent生成一个activity实例，那么用户可以通过back键回到上一个状态；如果是已经存在的一个activity来处理这个intent的话，用户不能通过按back键返回到这之前的状态。</p><p>8、跟activity和Task 有关的 Intent启动方式有哪些？其含义？</p><p>核心的Intent Flag有：<br>FLAG_ACTIVITY_NEW_TASK<br>FLAG_ACTIVITY_CLEAR_TOP<br>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED<br>FLAG_ACTIVITY_SINGLE_TOP<br>FLAG_ACTIVITY_NEW_TASK </p><p>  如果设置，这个Activity会成为历史stack中一个新Task的开始。一个Task（从启动它的Activity到下一个Task中的 Activity）定义了用户可以迁移的Activity原子组。Task可以移动到前台和后台；在某个特定Task中的所有Activity总是保持相同的次序。 </p><p>  这个标志一般用于呈现“启动”类型的行为：它们提供用户一系列可以单独完成的事情，与启动它们的Activity完全无关。 </p><p>  使用这个标志，如果正在启动的Activity的Task已经在运行的话，那么，新的Activity将不会启动；代替的，当前Task会简单的移入前台。参考FLAG_ACTIVITY_MULTIPLE_TASK标志，可以禁用这一行为。 </p><p>  这个标志不能用于调用方对已经启动的Activity请求结果。</p><p>FLAG_ACTIVITY_CLEAR_TOP </p><p>  如果设置，并且这个Activity已经在当前的Task中运行，因此，不再是重新启动一个这个Activity的实例，而是在这个Activity上方的所有Activity都将关闭，然后这个Intent会作为一个新的Intent投递到老的Activity（现在位于顶端）中。 </p><p>  例如，假设一个Task中包含这些Activity：A，B，C，D。如果D调用了startActivity()，并且包含一个指向Activity B的Intent，那么，C和D都将结束，然后B接收到这个Intent，因此，目前stack的状况是：A，B。 </p><p>  上例中正在运行的Activity B既可以在onNewIntent()中接收到这个新的Intent，也可以把自己关闭然后重新启动来接收这个Intent。如果它的启动模式声明为 “multiple”(默认值)，并且你没有在这个Intent中设置FLAG_ACTIVITY_SINGLE_TOP标志，那么它将关闭然后重新创建；对于其它的启动模式，或者在这个Intent中设置FLAG_ACTIVITY_SINGLE_TOP标志，都将把这个Intent投递到当前这个实例的onNewIntent()中。 </p><p>  这个启动模式还可以与FLAG_ACTIVITY_NEW_TASK结合起来使用：用于启动一个Task中的根Activity，它会把那个Task中任何运行的实例带入前台，然后清除它直到根Activity。这非常有用，例如，当从Notification Manager处启动一个Activity。 </p><p>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED </p><pre><code>如果设置这个标志，这个activity不管是从一个新的栈启动还是从已有栈推到栈顶，它都将以the front door of the task的方式启动。这就讲导致任何与应用相关的栈都讲重置到正常状态（不管是正在讲activity移入还是移除），如果需要，或者直接重置该栈为初始状态。</code></pre><p>FLAG_ACTIVITY_SINGLE_TOP </p><p>  如果设置，当这个Activity位于历史stack的顶端运行时，不再启动一个新的<br>FLAG_ACTIVITY_BROUGHT_TO_FRONT<br>  这个标志一般不是由程序代码设置的，如在launchMode中设置singleTask模式时系统帮你设定。 </p><p>FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET </p><p>  如果设置，这将在Task的Activity stack中设置一个还原点，当Task恢复时，需要清理Activity。也就是说，下一次Task带着 FLAG_ACTIVITY_RESET_TASK_IF_NEEDED标记进入前台时（典型的操作是用户在主画面重启它），这个Activity和它之上的都将关闭，以至于用户不能再返回到它们，但是可以回到之前的Activity。 </p><p>  这在你的程序有分割点的时候很有用。例如，一个e-mail应用程序可能有一个操作是查看一个附件，需要启动图片浏览Activity来显示。这个 Activity应该作为e-mail应用程序Task的一部分，因为这是用户在这个Task中触发的操作。然而，当用户离开这个Task，然后从主画面选择e-mail app，我们可能希望回到查看的会话中，但不是查看图片附件，因为这让人困惑。通过在启动图片浏览时设定这个标志，浏览及其它启动的Activity在下次用户返回到mail程序时都将全部清除。 </p><p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS </p><p>  如果设置，新的Activity不会在最近启动的Activity的列表中保存。<br>FLAG_ACTIVITY_FORWARD_RESULT<br>  如果设置，并且这个Intent用于从一个存在的Activity启动一个新的Activity，那么，这个作为答复目标的Activity将会传到这个新的Activity中。这种方式下，新的Activity可以调用setResult(int)，并且这个结果值将发送给那个作为答复目标的 Activity。<br>FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY<br>  这个标志一般不由应用程序代码设置，如果这个Activity是从历史记录里启动的（常按HOME键），那么，系统会帮你设定。 </p><p>FLAG_ACTIVITY_MULTIPLE_TASK </p><p>  不要使用这个标志，除非你自己实现了应用程序启动器。与FLAG_ACTIVITY_NEW_TASK结合起来使用，可以禁用把已存的Task送入前台的行为。当设置时，新的Task总是会启动来处理Intent，而不管这是是否已经有一个Task可以处理相同的事情。 </p><p>  由于默认的系统不包含图形Task管理功能，因此，你不应该使用这个标志，除非你提供给用户一种方式可以返回到已经启动的Task。 </p><p>  如果FLAG_ACTIVITY_NEW_TASK标志没有设置，这个标志被忽略。 </p><p>FLAG_ACTIVITY_NO_ANIMATION </p><p>  如果在Intent中设置，并传递给Context.startActivity()的话，这个标志将阻止系统进入下一个Activity时应用 Acitivity迁移动画。这并不意味着动画将永不运行——如果另一个Activity在启动显示之前，没有指定这个标志，那么，动画将被应用。这个标志可以很好的用于执行一连串的操作，而动画被看作是更高一级的事件的驱动。 </p><p>FLAG_ACTIVITY_NO_HISTORY </p><p>  如果设置，新的Activity将不再历史stack中保留。用户一离开它，这个Activity就关闭了。这也可以通过设置noHistory特性。 </p><p>FLAG_ACTIVITY_NO_USER_ACTION </p><p>  如果设置，作为新启动的Activity进入前台时，这个标志将在Activity暂停之前阻止从最前方的Activity回调的onUserLeaveHint()。 </p><p>  典型的，一个Activity可以依赖这个回调指明显式的用户动作引起的Activity移出后台。这个回调在Activity的生命周期中标记一个合适的点，并关闭一些Notification。 </p><p>  如果一个Activity通过非用户驱动的事件，如来电或闹钟，启动的，这个标志也应该传递给Context.startActivity，保证暂停的Activity不认为用户已经知晓其Notification。<br>FLAG_ACTIVITY_PREVIOUS_IS_TOP </p><p>  If set and this intent is being used to launch a new activity from an existing one, the current activity will not be counted as the top activity for deciding whether the new intent should be delivered to the top instead of starting a new one. The previous activity will be used as the top, with the assumption being that the current activity will finish itself immediately. </p><p>FLAG_ACTIVITY_REORDER_TO_FRONT </p><p>  如果在Intent中设置，并传递给Context.startActivity()，这个标志将引发已经运行的Activity移动到历史stack的顶端。<br>  例如，假设一个Task由四个Activity组成：A,B,C,D。如果D调用startActivity()来启动Activity B，那么，B会移动到历史stack的顶端，现在的次序变成A,C,D,B。如果FLAG_ACTIVITY_CLEAR_TOP标志也设置的话，那么这个标志将被忽略。 </p><p>9、请描述下Activity的生命周期。</p><p>答：</p><p>activity的生命周期方法有：</p><p>onCreate()、onStart()、onReStart()、onResume()、onPause()、onStop()、onDestory()；</p><p>可见生命周期：从onStart()直到系统调用onStop()</p><p>前台生命周期：从onResume()直到系统调用onPause()</p><p>10、activity在屏幕旋转时的生命周期</p><p>答：</p><p>不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次；设置Activity的android:configChanges=”orientation”时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次；设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p><p>11、如何启用Service，如何停用Service。</p><p>服务的开发比较简单，如下：</p><p>第一步：继承Service类</p><p>public class SMSService extends Service {}</p><p>第二步：在AndroidManifest.xml文件中的<application></application></p><p>节点里对服务进行配置:<service android:name=".SMSService"></service></p><p>服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。</p><p>这两个方法都可以启动Service，但是它们的使用场合有所不同。</p><p>使用startService()方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。</p><p>使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。</p><p>如果打算采用Context.startService()</p><p>方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。</p><p>如果调用startService()<br>方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。</p><p>采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p><p>如果打算采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。</p><p>这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。</p><p>如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。</p><p>如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法。</p><p>服务常用生命周期回调方法如下： </p><p>onCreate() 该方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次startService()或bindService()方法，服务也只被创建一次。</p><p>onDestroy()该方法在服务被终止时调用。</p><p>与采用Context.startService()方法启动服务有关的生命周期方法<br>onStart() 只有采用Context.startService()方法启动服务时才会回调该方法。</p><p>该方法在服务开始运行时被调用。</p><p>多次调用startService()方法尽管不会多次创建服务，但onStart() 方法会被多次调用。<br>与采用Context.bindService()方法启动服务有关的生命周期方法<br>onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。</p><p>该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。</p><p>onUnbind()只有采用Context.bindService()方法启动服务时才会回调该方法。</p><p>该方法在调用者与服务解除绑定时被调用</p><p>12、注册广播有几种方式，这些方式有何优缺点？请谈谈Android引入广播机制的用意。</p><p>答：</p><p>首先写一个类要继承BroadcastReceiver</p><p>第一种:在清单文件中声明,添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;receive android:name=&quot;.IncomingSMSReceiver &quot; &gt;</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">   &lt;action android:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;)</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">&lt;receiver&gt;</span><br></pre></td></tr></table></figure><p>第二种使用代码进行注册如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter = new IntentFilter(&quot;android.provider.Telephony.SMS_RECEIVED&quot;);</span><br><span class="line">IncomingSMSReceiver receiver = new IncomgSMSReceiver();</span><br><span class="line">registerReceiver(receiver.filter);</span><br></pre></td></tr></table></figure><p>两种注册类型的区别是：</p><p>1)第一种不是常驻型广播，也就是说广播跟随程序的生命周期。<br>2)第二种是常驻型，也就是说当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行。</p><p>13、请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系。</p><p>答：</p><p>简单的说，Handler获取当前线程中的looper对象，looper用来从存放Message的MessageQueue中取出Message，再有Handler进行Message的分发和处理.</p><p>Message Queue(消息队列)</p><p>：用来存放通过Handler发布的消息，通常附属于某一个创建它的线程，可以通过Looper.myQueue()得到当前线程的消息队列</p><p>Handler：</p><p>可以发布或者处理一个消息或者操作一个Runnable，通过Handler发布消息，消息将只会发送到与它关联的消息队列，然也只能处理该消息队列中的消息</p><p>Looper：</p><p>是Handler和消息队列之间通讯桥梁，程序组件首先通过Handler把消息传递给Looper，Looper把消息放入队列。Looper也把消息队列里的消息广播给所有的</p><p>Handler：</p><p>Handler接受到消息后调用handleMessage进行处理</p><p>Message：</p><p>消息的类型，在Handler类中的handleMessage方法中得到单个的消息进行处理<br>在单线程模型下，为了线程通信问题，Android设计了一个Message Queue(消息队列)， 线程间可以通过该Message Queue并结合Handler和Looper组件进行信息交换。</p><p>下面将对它们进行分别介绍：</p><ol><li><p>Message<br> Message消息，理解为线程间交流的信息，处理数据后台线程需要更新UI，则发送Message内含一些数据给UI线程。</p></li><li><p>Handler<br> Handler处理者，是Message的主要处理者，负责Message的发送，Message内容的执行处理。后台线程就是通过传进来的 Handler对象引用来sendMessage(Message)。而使用Handler，需要implement 该类的 handleMessage(Message)方法，它是处理这些Message的操作内容，例如Update UI。通常需要子类化Handler来实现handleMessage方法。</p></li><li><p>Message Queue<br> Message Queue消息队列，用来存放通过Handler发布的消息，按照先进先出执行。<br> 每个message queue都会有一个对应的Handler。Handler会向message queue通过两种方法发送消息：sendMessage或post。这两种消息都会插在message queue队尾并按先进先出执行。但通过这两种方法发送的消息执行的方式略有不同：通过sendMessage发送的是一个message对象,会被 Handler的handleMessage()函数处理；而通过post方法发送的是一个runnable对象，则会自己执行。</p></li><li><p>Looper<br> Looper是每条线程里的Message Queue的管家。Android没有Global的Message Queue，而Android会自动替主线程(UI线程)建立Message Queue，但在子线程里并没有建立Message Queue。所以调用Looper.getMainLooper()得到的主线程的Looper不为NULL，但调用Looper.myLooper() 得到当前线程的Looper就有可能为NULL。对于子线程使用Looper，API Doc提供了正确的使用方法：</p></li></ol><p>这个Message机制的大概流程：</p><ol><li><p>在Looper.loop()方法运行开始后，循环地按照接收顺序取出Message Queue里面的非NULL的Message。</p></li><li><p>一开始Message Queue里面的Message都是NULL的。当Handler.sendMessage(Message)到Message Queue，该函数里面设置了那个Message对象的target属性是当前的Handler对象。</p></li></ol><p>随后Looper取出了那个Message，则调用 该Message的target指向的Hander的dispatchMessage函数对Message进行处理。在dispatchMessage方法里，如何处理Message则由用户指定，三个判断，优先级从高到低：</p><pre><code>1) Message里面的Callback，一个实现了Runnable接口的对象，其中run函数做处理工作；2) Handler里面的mCallback指向的一个实现了Callback接口的对象，由其handleMessage进行处理；3) 处理消息Handler对象对应的类继承并实现了其中handleMessage函数，通过这个实现的handleMessage函数处理消息。由此可见，我们实现的handleMessage方法是优先级最低的！</code></pre><ol start="3"><li>Handler处理完该Message (update UI) 后，Looper则设置该Message为NULL，以便回收！</li></ol><p>在网上有很多文章讲述主线程和其他子线程如何交互，传送信息，最终谁来执行处理信息之类的，个人理解是最简单的方法——判断Handler对象里面的Looper对象是属于哪条线程的，则由该线程来执行！ </p><pre><code>1. 当Handler对象的构造函数的参数为空，则为当前所在线程的Looper； </code></pre><ol start="2"><li>Looper.getMainLooper()得到的是主线程的Looper对象，Looper.myLooper()得到的是当前线程的Looper对象。</li></ol><p>14、简要解释一下activity、 intent 、intent filter、service、Broadcase、BroadcaseReceiver</p><p>答：</p><p>一个activity呈现了一个用户可以操作的可视化用户界面；一个service不包含可见的用户界面，而是在后台运行，可以与一个activity绑定，通过绑定暴露出来接口并与其进行通信；一个broadcast receiver是一个接收广播消息并做出回应的component，broadcast receiver没有界面；一个intent是一个Intent对象，它保存了消息的内容。</p><p>对于activity和service来说，它指定了请求的操作名称和待操作数据的URI，Intent对象可以显式的指定一个目标component。如果这样的话，android会找到这个component(基于manifest文件中的声明)并激活它。但如果一个目标不是显式指定的，android必须找到响应intent的最佳component。它是通过将Intent对象和目标的intent filter相比较来完成这一工作的；一个component的intent filter告诉android该component能处理的intent。intent filter也是在manifest文件中声明的。</p><p>15、说说mvc模式的原理，它在android中的运用,android的官方建议应用程序的开发采用mvc模式。何谓mvc？</p><p>mvc是model,view,controller的缩写，mvc包含三个部分：</p><p>　　模型（model）对象：是应用程序的主体部分，所有的业务逻辑都应该写在该层。<br>　　视图（view）对象：是应用程序中负责生成用户界面的部分。也是在整个mvc架构中用户唯一可以看到的一层，接收用户的输入，显示处理结果。<br>　　控制器（control）对象：是根据用户的输入，控制用户界面数据显示及更新model对象状态的部分，控制器更重要的一种导航功能，响应用户出发的相关事件，交给m层处理。</p><p>　　android鼓励弱耦合和组件的重用，在android中mvc的具体体现如下：</p><p>　　1)视图层（view）：一般采用xml文件进行界面的描述，使用的时候可以非常方便的引入，当然，如果你对android了解的比较的多了话，就一定可以想到在android中也可以使用javascript+html等的方式作为view层，当然这里需要进行java和javascript之间的通信，幸运的是，android提供了它们之间非常方便的通信实现。</p><p>　　2)控制层（controller）：android的控制层的重任通常落在了众多的acitvity的肩上，这句话也就暗含了不要在acitivity中写代码，要通过activity交割model业务逻辑层处理，这样做的另外一个原因是android中的acitivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉。</p><p>　　3)模型层（model）：对数据库的操作、对网络等的操作都应该在model里面处理，当然对业务计算等操作也是必须放在的该层的。</p><p>16、什么是ANR 如何避免它？</p><p>答：</p><p>ANR：Application Not Responding。在Android中，活动管理器和窗口管理器这两个系统服务负责监视应用程序的响应，当用户操作的在5s内应用程序没能做出反应，BroadcastReceiver在10秒内没有执行完毕，就会出现应用程序无响应对话框，这既是ANR。</p><p>避免方法：Activity应该在它的关键生命周期方法（如onCreate()和onResume()）里尽可能少的去做创建操作。潜在的耗时操作，例如网络或数据库操作，或者高耗时的计算如改变位图尺寸，应该在子线程里（或者异步方式）来完成。主线程应该为子线程提供一个Handler，以便完成时能够提交给主线程。</p><p>17、什么情况会导致Force Close ？如何避免？能否捕获导致其的异常？</p><p>答：程序出现异常，比如nullpointer。</p><p>避免：编写程序时逻辑连贯，思维缜密。能捕获异常，在logcat中能看到异常信息</p><p>18、描述一下android的系统架构</p><p>android系统架构分从下往上为linux 内核层、运行库、应用程序框架层、和应用程序层。</p><p>linuxkernel：负责硬件的驱动程序、网络、电源、系统安全以及内存管理等功能。</p><p>libraries和 android runtime：libraries：即c/c++函数库部分，大多数都是开放源代码的函数库，例如webkit（引擎），该函数库负责 android网页浏览器的运行，例如标准的c函数库libc、openssl、sqlite等，当然也包括支持游戏开发2dsgl和 3dopengles，在多媒体方面有mediaframework框架来支持各种影音和图形文件的播放与显示，例如mpeg4、h.264、mp3、 aac、amr、jpg和png等众多的多媒体文件格式。</p><p>android的runtime负责解释和执行生成的dalvik格式的字节码。</p><p>　　applicationframework（应用软件架构），java应用程序开发人员主要是使用该层封装好的api进行快速开发。</p><p>　　applications:该层是java的应用程序层，android内置的googlemaps、e-mail、即时通信工具、浏览器、mp3播放器等处于该层，java开发人员开发的程序也处于该层，而且和内置的应用程序具有平等的位置，可以调用内置的应用程序，也可以替换内置的应用程序。</p><p>　　上面的四个层次，下层为上层服务，上层需要下层的支持，调用下层的服务，这种严格分层的方式带来的极大的稳定性、灵活性和可扩展性，使得不同层的开发人员可以按照规范专心特定层的开发。</p><p>android应用程序使用框架的api并在框架下运行，这就带来了程序开发的高度一致性，另一方面也告诉我们，要想写出优质高效的程序就必须对整个 applicationframework进行非常深入的理解。精通applicationframework，你就可以真正的理解android的设计和运行机制，也就更能够驾驭整个应用层的开发。</p><p>19、请介绍下ContentProvider是如何实现数据共享的。</p><p>一个程序可以通过实现一个Content provider的抽象接口将自己的数据完全暴露出去，而且Content providers是以类似数据库中表的方式将数据暴露。Content providers存储和检索数据，通过它可以让所有的应用程序访问到，这也是应用程序之间唯一共享数据的方法。</p><p>要想使应用程序的数据公开化，可通过2种方法：创建一个属于你自己的Content provider或者将你的数据添加到一个已经存在的Content provider中，前提是有相同数据类型并且有写入Content provider的权限。</p><p>如何通过一套标准及统一的接口获取其他应用程序暴露的数据？</p><p>Android提供了ContentResolver，外界的程序可以通过ContentResolver接口访问ContentProvider提供的数据。</p><p>20、Service和Thread的区别？</p><p>答：</p><p>servie是系统的组件，它由系统进程托管（servicemanager）；它们之间的通信类似于client和server，是一种轻量级的ipc通信，这种通信的载体是binder，它是在linux层交换信息的一种ipc。而thread是由本应用程序托管。</p><p>1). Thread：Thread 是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。</p><p>2). Service：Service 是android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。</p><p>既然这样，那么我们为什么要用 Service 呢？</p><p>其实这跟 android 的系统机制有关，我们先拿 Thread 来说。</p><p>Thread 的运行是独立于 Activity 的，也就是说当一个 Activity 被 finish 之后，如果你没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。</p><p>因此这里会出现一个问题：当 Activity 被 finish 之后，你不再持有该 Thread 的引用。</p><p>另一方面，你没有办法在不同的 Activity 中对同一 Thread 进行控制。  </p><p>举个例子：</p><p>如果你的 Thread 需要不停地隔一段时间就要连接服务器做某种同步的话，该 Thread 需要在 Activity 没有start的时候也在运行。这个时候当你 start 一个 Activity 就没有办法在该 Activity 里面控制之前创建的 Thread。因此你便需要创建并启动一个 Service ，在 Service 里面创建、运行并控制该 Thread，这样便解决了该问题（因为任何 Activity 都可以控制同一 Service，而系统也只会创建一个对应 Service 的实例）。  </p><p>因此你可以把 Service 想象成一种消息服务，而你可以在任何有 Context 的地方调用 Context.startService、Context.stopService、Context.bindService，Context.unbindService，来控制它，你也可以在 Service 里注册 BroadcastReceiver，在其他地方通过发送 broadcast 来控制它，当然这些都是 Thread 做不到的。</p><p>21、Android本身的api并未声明会抛出异常，则其在运行时有无可能抛出runtime异常，你遇到过吗？诺有的话会导致什么问题？如何解决？</p><p>答：</p><p>会，比如nullpointerException。我遇到过，比如textview.setText()时，textview没有初始化。会导致程序无法正常运行出现forceclose。打开控制台查看logcat信息找出异常信息并修改程序。</p><p>22、IntentService有何优点?</p><p>答：Acitivity的进程，当处理Intent的时候，会产生一个对应的Service； Android的进程处理器现在会尽可能的不kill掉你；非常容易使用</p><p>23、如果后台的Activity由于某原因被系统回收了，如何在被系统回收之前保存当前状态？</p><p>答：重写onSaveInstanceState()方法，在此方法中保存需要保存的数据，该方法将会在activity被回收之前调用。通过重写onRestoreInstanceState()方法可以从中提取保存好的数据</p><p>24、如何将一个Activity设置成窗口的样式。</p><p>答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity&gt;中配置：android :theme=&quot;@android:style/Theme.Dialog&quot; </span><br><span class="line">另外android:theme=&quot;@android:style/Theme.Translucent&quot; 是设置透明</span><br></pre></td></tr></table></figure><p>25、如何退出Activity？如何安全退出已调用多个Activity的Application？</p><p>答：</p><p>对于单一Activity的应用来说，退出很简单，直接finish()即可。</p><p>当然，也可以用killProcess()和System.exit()这样的方法。</p><p>对于多个activity，</p><p>1、记录打开的Activity：每打开一个Activity，就记录下来。在需要退出时，关闭每一个Activity即可。</p><p>2、发送特定广播：在需要结束应用时，发送一个特定的广播，每个Activity收到广播后，关闭即可。</p><p>3、递归退出：在打开新的Activity时使用startActivityForResult，然后自己加标志，在onActivityResult中处理，递归关闭。</p><p>为了编程方便，最好定义一个Activity基类，处理这些共通问题。</p><p>在2.1之前，可以使用ActivityManager的restartPackage方法。</p><p>它可以直接结束整个应用。</p><p>在使用时需要权限android.permission.RESTART_PACKAGES。</p><p>注意不要被它的名字迷惑。</p><p>可是，在2.2，这个方法失效了。</p><p>在2.2添加了一个新的方法，killBackground Processes()，需要权限 android.permission.KILL_BACKGROUND_PROCESSES。</p><p>可惜的是，它和2.2的restartPackage一样，根本起不到应有的效果。</p><p>另外还有一个方法，就是系统自带的应用程序管理里，强制结束程序的方法，forceStopPackage()。</p><p>它需要权限android.permission.FORCE_STOP_PACKAGES。并且需要添加android:sharedUserId=”android.uid.system”属性。</p><p>同样可惜的是，该方法是非公开的，他只能运行在系统进程，第三方程序无法调用。</p><p>因为需要在Android.mk中添加LOCAL_CERTIFICATE := platform。</p><p>而Android.mk是用于在Android源码下编译程序用的。</p><p>从以上可以看出，在2.2，没有办法直接结束一个应用，而只能用自己的办法间接办到。<br>现提供几个方法，供参考：</p><p>1、抛异常强制退出：<br>该方法通过抛异常，使程序Force Close。<br>验证可以，但是，需要解决的问题是，如何使程序结束掉，而不弹出Force Close的窗口。</p><p>2、记录打开的Activity：<br>每打开一个Activity，就记录下来。在需要退出时，关闭每一个Activity即可。</p><p>3、发送特定广播：<br>在需要结束应用时，发送一个特定的广播，每个Activity收到广播后，关闭即可。</p><p>4、递归退出<br>在打开新的Activity时使用startActivityForResult，然后自己加标志，在onActivityResult中处理，递归关闭。</p><p>除了第一个，都是想办法把每一个Activity都结束掉，间接达到目的。但是这样做同样不完美。你会发现，如果自己的应用程序对每一个Activity都设置了nosensor，在两个Activity结束的间隙，sensor可能有效了。</p><p>但至少，我们的目的达到了，而且没有影响用户使用。为了编程方便，最好定义一个Activity基类，处理这些共通问题。</p><p>26、AIDL的全称是什么？如何工作？能处理哪些类型的数据？</p><p>答：</p><p>全称是：Android Interface Define Language<br>在Android中, 每个应用程序都可以有自己的进程. 在写UI应用的时候, 经常要用到Service. 在不同的进程中, 怎样传递对象呢?</p><p>显然, Java中不允许跨进程内存共享. 因此传递对象, 只能把对象拆分成操作系统能理解的简单形式, 以达到跨界对象访问的目的. 在J2EE中,采用RMI的方式, 可以通过序列化传递对象. 在Android中, 则采用AIDL的方式. 理论上AIDL可以传递Bundle,实际上做起来却比较麻烦。</p><p>AIDL(AndRoid接口描述语言)是一种接口描述语言; 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程的目的. 如果需要在一个Activity中, 访问另一个Service中的某个对象, 需要先将对象转化成AIDL可识别的参数(可能是多个参数), 然后使用AIDL来传递这些参数, 在消息的接收端, 使用这些参数组装成自己需要的对象.</p><p>AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。它使用代理类在客户端和实现层间传递值. 如果要使用AIDL, 需要完成2件事情: 1. 引入AIDL的相关类.; 2. 调用aidl产生的class.</p><p>AIDL的创建方法:</p><p>AIDL语法很简单,可以用来声明一个带一个或多个方法的接口，也可以传递参数和返回值。 </p><p>由于远程调用的需要, 这些参数和返回值并不是任何类型.下面是些AIDL支持的数据类型:</p><ol><li>不需要import声明的简单Java编程语言类型(int,boolean等)</li><li>String, CharSequence不需要特殊声明</li><li>List, Map和Parcelables类型, 这些类型内所包含的数据成员也只能是简单数据类型, String等其他比支持的类型.<br>(另外: 我没尝试Parcelables, 在Eclipse+ADT下编译不过, 或许以后会有所支持)</li></ol><p>27、请解释下Android程序运行时权限与文件系统权限的区别。</p><p>答：</p><p>运行时权限Dalvik( android授权)<br>文件系统 linux 内核授权</p><p>28、</p><p>系统上安装了多种浏览器，能否指定某浏览器访问指定页面？</p><p>请说明原由。<br>通过直接发送Uri把参数带过去，或者通过manifest里的intentfilter里的data属性</p><p>29、android系统的优势和不足</p><p>答：Android平台手机 5大优势： </p><p>一、开放性 </p><p>在优势方面，Android平台首先就是其开发性，开发的平台允许任何移动终端厂商加入到Android联盟中来。显著的开放性可以使其拥有更多的开发者，随着用户和应用的日益丰富，一个崭新的平台也将很快走向成熟。开放性对于Android的发展而言，有利于积累人气，这里的人气包括消费者和厂商，而对于消费者来讲，随大的受益正是丰富的软件资源。开放的平台也会带来更大竞争，如此一来，消费者将可以用更低的价位购得心仪的手机。</p><p>二、挣脱运营商的束缚 </p><p>在过去很长的一段时间，特别是在欧美地区，手机应用往往受到运营商制约，使用什么功能接入什么网络，几乎都受到运营商的控制。从去年iPhone 上市 ，用户可以更加方便地连接网络，运营商的制约减少。随着EDGE、HSDPA这些2G至3G移动网络的逐步过渡和提升，手机随意接入网络已不是运营商口中的笑谈，当你可以通过手机IM软件方便地进行即时聊天时，再回想不久前天价的彩信和图铃下载业务，是不是像噩梦一样？互联网巨头Google推动的Android终端天生就有网络特色，将让用户离互联网更近。</p><p>三、丰富的硬件选择 </p><p>这一点还是与Android平台的开放性相关，由于Android的开放性，众多的厂商会推出千奇百怪，功能特色各具的多种产品。功能上的差异和特色，却不会影响到数据同步、甚至软件的兼容，好比你从诺基亚 Symbian风格手机 一下改用苹果 iPhone ，同时还可将Symbian中优秀的软件带到iPhone上使用、联系人等资料更是可以方便地转移，是不是非常方便呢？</p><p>四、不受任何限制的开发商 </p><p>Android平台提供给第三方开发商一个十分宽泛、自由的环境，不会受到各种条条框框的阻扰，可想而知，会有多少新颖别致的软件会诞生。但也有其两面性，血腥、暴力、情色方面的程序和游戏如可控制正是留给Android难题之一。</p><p>五、无缝结合的Google应用 </p><p>如今叱诧互联网的Google已经走过10年度历史，从搜索巨人到全面的互联网渗透，Google服务如地图、邮件、搜索等已经成为连接用户和互联网的重要纽带，而Android平台手机将无缝结合这些优秀的Google服务。<br>再说Android的5大不足：</p><p>一、安全和隐私 </p><p>由于手机 与互联网的紧密联系，个人隐私很难得到保守。除了上网过程中经意或不经意留下的个人足迹，Google这个巨人也时时站在你的身后，洞穿一切，因此，互联网的深入将会带来新一轮的隐私危机。</p><p>二、首先开卖Android手机的不是最大运营商 </p><p>众所周知，T-Mobile在23日，于美国纽约发布 了Android首款手机G1。</p><p>但是在北美市场，最大的两家运营商乃AT&amp;T和Verizon，而目前所知取得Android手机销售权的仅有 T-Mobile和Sprint，其中T-Mobile的3G网络相对于其他三家也要逊色不少，因此，用户可以买账购买G1，能否体验到最佳的3G网络服务则要另当别论了！</p><p>三、运营商仍然能够影响到Android手机 </p><p>在国内市场，不少用户对购得移动定制机不满，感觉所购的手机被人涂画了广告一般。这样的情况在国外市场同样出现。</p><p>Android手机的另一发售运营商Sprint就将在其机型中内置其手机商店程序。</p><p>四、同类机型用户减少 </p><p>在不少手机论坛都会有针对某一型号的子论坛，对一款手机的使用心得交流，并分享软件资源。而对于Android平台手机，由于厂商丰富，产品类型多样，这样使用同一款机型的用户越来越少，缺少统一机型的程序强化。</p><p>举个稍显不当的例子，现在山寨机泛滥，品种各异，就很少有专门针对某个型号山寨机的讨论和群组，除了哪些功能异常抢眼、颇受追捧的机型以外。</p><p>五、过分依赖开发商缺少标准配置 </p><p>在使用PC端的Windows Xp系统的时候，都会内置微软Windows Media Player这样一个浏览器程序，用户可以选择更多样的播放器，如Realplay或暴风影音等。</p><p>但入手开始使用默认的程序同样可以应付多样的需要。</p><p>在 Android平台中，由于其开放性，软件更多依赖第三方厂商，比如Android系统的SDK中就没有内置音乐 播放器，全部依赖第三方开发，缺少了产品的统一性。</p><p>30、Android dvm的进程和Linux的进程, 应用程序的进程是否为同一个概念 </p><p>答：</p><p>DVM指dalivk的虚拟机。</p><p>每一个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalvik虚拟机实例。</p><p>而每一个DVM都是在Linux 中的一个进程，所以说可以认为是同一个概念。</p><p>31、sim卡的EF文件是什么？有何作用</p><p>答：</p><p>sim卡的文件系统有自己规范，主要是为了和手机通讯，sim本 身可以有自己的操作系统，EF就是作存储并和手机通讯用的</p><p>32、嵌入式操作系统内存管理有哪几种， 各有何特性</p><p>　　页式，段式，段页，用到了MMU,虚拟空间等技术</p><p>33、什么是嵌入式实时操作系统, Android 操作系统属于实时操作系统吗?</p><p>嵌入式实时操作系统是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统作出快速响应，并控制所有实时任务协调一致运行的嵌入式操作系统。</p><p>主要用于工业控制、 军事设备、 航空航天等领域对系统的响应时间有苛刻的要求，这就需要使用实时系统。又可分为软实时和硬实时两种，而android是基于linux内核的，因此属于软实时。</p><p>34、一条最长的短信息约占多少byte?</p><p>　　中文70(包括标点)，英文160，160个字节。<br>　　<br>35、有一个一维整型数组int[]</p><p>data保存的是一张宽为width，高为height的图片像素值信息。</p><p>请写一个算法，将该图片所有的白色不透明(0xffffffff)像素点的透明度调整为50%。</p><p>36、如何将SQLite数据库(dictionary.db文件)与apk文件一起发布</p><p>解答：</p><p>可以将dictionary.db文件复制到Eclipse Android工程中的res aw目录中。</p><p>所有在res aw目录中的文件不会被压缩，这样可以直接提取该目录中的文件。</p><p>可以将dictionary.db文件复制到res aw目录中</p><p>37、如何将打开res aw目录中的数据库文件?</p><p>解答：</p><p>在Android中不能直接打开res aw目录中的数据库文件，而需要在程序第一次启动时将该文件复制到手机内存或SD卡的某个目录中，然后再打开该数据库文件。</p><p>复制的基本方法是使用getResources().openRawResource方法获得res aw目录中资源的 InputStream对象，然后将该InputStream对象中的数据写入其他的目录中相应文件中。</p><p>在Android SDK中可以使用SQLiteDatabase.openOrCreateDatabase方法来打开任意目录中的SQLite数据库文件。</p><p>38、DDMS和TraceView的区别? </p><p>DDMS是一个程序执行查看器，在里面可以看见线程和堆栈等信息，TraceView是程序性能分析器 。</p><p>39、java中如何引用本地语言 </p><p>可以用JNI（java native interface  java 本地接口）接口 。</p><p>40、谈谈Android的IPC（进程间通信）机制 </p><p>IPC是内部进程通信的简称， 是共享”命名管道”的资源。</p><p>Android中的IPC机制是为了让Activity和Service之间可以随时的进行交互，故在Android中该机制，只适用于Activity和Service之间的通信，类似于远程方法调用，类似于C/S模式的访问。通过定义AIDL接口文件来定义IPC接口。</p><p>Servier端实现IPC接口，Client端调用IPC接口本地代理。</p><p>41、NDK是什么</p><p>NDK是一些列工具的集合，NDK提供了一系列的工具，帮助开发者迅速的开发C/C++的动态库，并能自动将so和java 应用打成apk包。</p><p>NDK集成了交叉编译器，并提供了相应的mk文件和隔离cpu、平台等的差异，开发人员只需简单的修改mk文件就可以创建出so</p><p>编辑 ：达叔</p><p>定位：分享 Android&amp;Java 知识点</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;用一切抱怨的时间去努力&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/categories/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="我的书籍" scheme="https://huangguangda.github.io/tags/%E6%88%91%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
</feed>
